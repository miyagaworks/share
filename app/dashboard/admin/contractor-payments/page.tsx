// app/dashboard/admin/contractor-payments/page.tsx
'use client';
import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { Spinner } from '@/components/ui/Spinner';
import { toast } from 'react-hot-toast';
import {
  HiCurrencyDollar,
  HiUsers,
  HiCalendar,
  HiCheckCircle,
  HiClock,
  HiExclamationCircle,
  HiTrendingUp,
  HiDocumentText,
  HiAdjustments,
  HiRefresh,
  HiEye,
  HiCheck,
  HiX,
  HiInformationCircle,
  HiArrowLeft,
  HiArrowRight,
  HiDownload,
  HiChartBar,
} from 'react-icons/hi';
import { getPagePermissions, ReadOnlyBanner } from '@/lib/utils/admin-permissions';

// AdminAccessÂûãÂÆöÁæ©
interface AdminAccess {
  isSuperAdmin: boolean;
  isFinancialAdmin: boolean;
  adminLevel: 'super' | 'financial' | 'none';
}

// ÂûãÂÆöÁæ©Ôºàlib/profit-allocation.ts„Å®‰∏ÄËá¥Ôºâ
interface ContractorAllocation {
  contractorId: string;
  name: string;
  email: string;
  originalPercent: number;
  adjustedPercent: number;
  allocationAmount: number;
  expenseReimbursement: number;
  totalPayment: number;
  adjustmentReason?: string;
}

interface ProfitAllocation {
  year: number;
  month: number;
  totalRevenue: number;
  totalFees: number;
  grossProfit: number;
  totalExpenses: number;
  netProfit: number;
  totalContractorShare: number;
  companyShare: number;
  contractors: {
    yoshitsune: ContractorAllocation;
    kensei: ContractorAllocation;
  };
  hasAdjustments: boolean;
  adjustments: any[];
  status: 'draft' | 'finalized' | 'paid';
  finalizedAt?: string;
  paidAt?: string;
}

interface SettlementData {
  allocation: ProfitAllocation;
  pendingAdjustments: number;
  canFinalize: boolean;
  canMarkPaid: boolean;
}

interface AdjustmentRequest {
  adjustmentType: 'self_reduction' | 'admin_proposal' | 'peer_proposal';
  targetPerson: 'yoshitsune' | 'kensei';
  adjustedPercent: number;
  reason: string;
}

export default function ContractorPaymentsPage() {
  const { data: session } = useSession();
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [adminAccess, setAdminAccess] = useState<AdminAccess | null>(null);
  const [data, setData] = useState<SettlementData | null>(null);
  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth() + 1);
  const [actionLoading, setActionLoading] = useState(false);
  const [isAdjustmentModalOpen, setIsAdjustmentModalOpen] = useState(false);
  const [adjustmentForm, setAdjustmentForm] = useState<AdjustmentRequest>({
    adjustmentType: 'admin_proposal',
    targetPerson: 'yoshitsune',
    adjustedPercent: 30,
    reason: '',
  });

  // üîß ‰øÆÊ≠£: Ë≤°ÂãôÁÆ°ÁêÜËÄÖ„ÇÇË®±ÂèØ„Åô„ÇãÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
  const checkPermissions = useCallback(async () => {
    if (!session?.user?.id) return;

    try {
      const response = await fetch('/api/admin/access');
      if (response.ok) {
        const accessData = await response.json();

        // „Çπ„Éº„Éë„ÉºÁÆ°ÁêÜËÄÖ„Åæ„Åü„ÅØË≤°ÂãôÁÆ°ÁêÜËÄÖ„ÅÆÂ†¥Âêà„Ç¢„ÇØ„Çª„ÇπË®±ÂèØ
        if (accessData.adminLevel !== 'none') {
          setAdminAccess({
            isSuperAdmin: accessData.isSuperAdmin,
            isFinancialAdmin: accessData.isFinancialAdmin,
            adminLevel: accessData.adminLevel,
          });
        } else {
          router.push('/dashboard');
        }
      }
    } catch (error) {
      console.error('Ê®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
      router.push('/dashboard');
    }
  }, [session?.user?.id, router]);

  // üÜï Ê®©ÈôêË®≠ÂÆö„ÅÆÂèñÂæó
  const permissions = adminAccess
    ? getPagePermissions(
        adminAccess.isSuperAdmin ? 'admin' : 'financial-admin',
        'contractor-payments',
      )
    : { canView: false, canEdit: false, canDelete: false, canCreate: false };

  // ÊúàÊ¨°Á≤æÁÆó„Éá„Éº„Çø„ÅÆÂèñÂæóÔºàË®àÁîªÊõ∏Ê∫ñÊã†„ÅÆÁµ±ÂêàÂÆüË£ÖÔºâ
  const loadSettlementData = useCallback(async () => {
    if (!adminAccess) return;

    try {
      setLoading(true);
      const response = await fetch(
        `/api/admin/monthly-settlement?year=${currentYear}&month=${currentMonth}`,
      );

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Á≤æÁÆó„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }

      const result = await response.json();
      if (result.success) {
        setData(result.data);
      } else {
        throw new Error(result.error || 'Á≤æÁÆó„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error: any) {
      console.error('Á≤æÁÆó„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
      toast.error(error.message || 'Á≤æÁÆó„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setLoading(false);
    }
  }, [adminAccess, currentYear, currentMonth]);

  // Á≤æÁÆóÁ¢∫ÂÆöÔºàÂ•ëÁ¥ÑÊõ∏Á¨¨6Êù°Ê∫ñÊã†Ôºâ
  const handleFinalize = async () => {
    if (!adminAccess?.isSuperAdmin || !data?.canFinalize || !permissions.canEdit) {
      toast.error('Á≤æÁÆóÁ¢∫ÂÆö„Å´„ÅØ„Çπ„Éº„Éë„ÉºÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô');
      return;
    }

    try {
      setActionLoading(true);
      const response = await fetch('/api/admin/monthly-settlement', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          year: currentYear,
          month: currentMonth,
          action: 'finalize',
        }),
      });

      const result = await response.json();
      if (result.success) {
        toast.success(result.message);
        await loadSettlementData();
      } else {
        throw new Error(result.error || 'Á≤æÁÆóÁ¢∫ÂÆö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error: any) {
      console.error('Á≤æÁÆóÁ¢∫ÂÆö„Ç®„É©„Éº:', error);
      toast.error(error.message || 'Á≤æÁÆóÁ¢∫ÂÆö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setActionLoading(false);
    }
  };

  // ÊîØÊâï„ÅÑÂÆå‰∫ÜË®òÈå≤ÔºàÂ•ëÁ¥ÑÊõ∏Á¨¨6Êù°Ê∫ñÊã†ÔºöÁøåÊúà10Êó•ÊîØÊâï„ÅÑÔºâ
  const handleMarkPaid = async () => {
    if (!adminAccess?.isSuperAdmin || !data?.canMarkPaid || !permissions.canEdit) {
      toast.error('ÊîØÊâï„ÅÑÂÆå‰∫ÜË®òÈå≤„Å´„ÅØ„Çπ„Éº„Éë„ÉºÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô');
      return;
    }

    try {
      setActionLoading(true);
      const response = await fetch('/api/admin/monthly-settlement', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          year: currentYear,
          month: currentMonth,
          action: 'mark_paid',
        }),
      });

      const result = await response.json();
      if (result.success) {
        toast.success(result.message);
        await loadSettlementData();
      } else {
        throw new Error(result.error || 'ÊîØÊâï„ÅÑÂÆå‰∫ÜË®òÈå≤„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error: any) {
      console.error('ÊîØÊâï„ÅÑÂÆå‰∫ÜË®òÈå≤„Ç®„É©„Éº:', error);
      toast.error(error.message || 'ÊîØÊâï„ÅÑÂÆå‰∫ÜË®òÈå≤„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setActionLoading(false);
    }
  };

  // ÈÖçÂàÜË™øÊï¥Áî≥Ë´ãÔºàÂ•ëÁ¥ÑÊõ∏Á¨¨3Êù°Á¨¨4È†ÖÊ∫ñÊã†Ôºâ
  const handleAdjustmentSubmit = async () => {
    if (!permissions.canEdit) {
      toast.error('ÈÖçÂàÜË™øÊï¥Áî≥Ë´ã„Å´„ÅØ„Çπ„Éº„Éë„ÉºÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô');
      return;
    }

    try {
      setActionLoading(true);
      const response = await fetch('/api/admin/revenue-adjustment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          year: currentYear,
          month: currentMonth,
          ...adjustmentForm,
        }),
      });

      const result = await response.json();
      if (result.success) {
        toast.success(result.message);
        setIsAdjustmentModalOpen(false);
        setAdjustmentForm({
          adjustmentType: 'admin_proposal',
          targetPerson: 'yoshitsune',
          adjustedPercent: 30,
          reason: '',
        });
        await loadSettlementData();
      } else {
        throw new Error(result.error || 'ÈÖçÂàÜË™øÊï¥Áî≥Ë´ã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error: any) {
      console.error('ÈÖçÂàÜË™øÊï¥Áî≥Ë´ã„Ç®„É©„Éº:', error);
      toast.error(error.message || 'ÈÖçÂàÜË™øÊï¥Áî≥Ë´ã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setActionLoading(false);
    }
  };

  // ÊúàÂ§âÊõ¥
  const changeMonth = (delta: number) => {
    let newMonth = currentMonth + delta;
    let newYear = currentYear;

    if (newMonth > 12) {
      newMonth = 1;
      newYear++;
    } else if (newMonth < 1) {
      newMonth = 12;
      newYear--;
    }

    setCurrentMonth(newMonth);
    setCurrentYear(newYear);
  };

  // „Éá„Éº„Çø„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÔºàÂ∞ÜÊù•Êã°ÂºµÁî®Ôºâ
  const handleExportData = async () => {
    if (!data?.allocation) return;

    try {
      const exportData = {
        period: `${currentYear}Âπ¥${currentMonth}Êúà`,
        ...data.allocation,
        exportedAt: new Date().toISOString(),
      };

      const blob = new Blob([JSON.stringify(exportData, null, 2)], {
        type: 'application/json',
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `contractor-payments-${currentYear}-${currentMonth}.json`;
      a.click();
      URL.revokeObjectURL(url);

      toast.success('„Éá„Éº„Çø„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Åæ„Åó„Åü');
    } catch (error) {
      console.error('„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Ç®„É©„Éº:', error);
      toast.error('„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  // ÂàùÊúüÂåñ
  useEffect(() => {
    if (session?.user?.id) {
      checkPermissions();
    }
  }, [session?.user?.id, checkPermissions]);

  useEffect(() => {
    if (adminAccess) {
      loadSettlementData();
    }
  }, [adminAccess, loadSettlementData]);

  // „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÈñ¢Êï∞
  const formatCurrency = (amount: number) => `¬•${amount.toLocaleString()}`;
  const formatPercent = (percent: number) => `${percent.toFixed(1)}%`;

  // „É≠„Éº„Éá„Ç£„É≥„Ç∞„ÉªÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <Spinner />
          <p className="mt-2 text-gray-500">ÂèóË®óËÄÖÊîØÊâï„ÅÑÁÆ°ÁêÜÁîªÈù¢„ÇíË™≠„ÅøËæº„Åø‰∏≠...</p>
        </div>
      </div>
    );
  }

  if (!adminAccess) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <HiExclamationCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-900 mb-2">„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</h1>
          <p className="text-gray-600 mb-6">Ë≤°ÂãôÁÆ°ÁêÜËÄÖÊ®©Èôê‰ª•‰∏ä„ÅåÂøÖË¶Å„Åß„Åô</p>
          <button
            onClick={() => router.push('/dashboard')}
            className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600"
          >
            „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Å´Êàª„Çã
          </button>
        </div>
      </div>
    );
  }

  const allocation = data?.allocation;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto p-6">
        {/* üÜï Ê®©Èôê„Éê„Éä„ÉºË°®Á§∫ */}
        <ReadOnlyBanner message={permissions.readOnlyMessage} />

        {/* „Éò„ÉÉ„ÉÄ„Éº */}
        <div className="bg-gradient-to-r from-emerald-600 to-teal-700 rounded-xl p-8 mb-8 text-white">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <HiUsers className="h-10 w-10" />
              <div>
                <h1 className="text-3xl font-bold">ÂèóË®óËÄÖÊîØÊâï„ÅÑÁÆ°ÁêÜ</h1>
                <p className="text-emerald-100 mt-2">
                  Ê•≠ÂãôÂßîË®óÂ•ëÁ¥ÑÊõ∏Á¨¨3Êù°„ÉªÁ¨¨6Êù°Ê∫ñÊã†„ÅÆÊúàÊ¨°Âà©ÁõäÈÖçÂàÜ„Ç∑„Çπ„ÉÜ„É†
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              {/* üÜï Ê®©Èôê„Éê„ÉÉ„Ç∏Ë°®Á§∫ */}
              <div className="bg-white/20 px-3 py-1 rounded-full text-sm font-medium">
                {adminAccess.isSuperAdmin ? '„Çπ„Éº„Éë„ÉºÁÆ°ÁêÜËÄÖ' : 'Ë≤°ÂãôÁÆ°ÁêÜËÄÖ'}
              </div>
              <button
                onClick={handleExportData}
                disabled={!allocation}
                className="bg-white/20 hover:bg-white/30 px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors disabled:opacity-50"
              >
                <HiDownload className="h-5 w-5" />
                <span>„Ç®„ÇØ„Çπ„Éù„Éº„Éà</span>
              </button>
              <button
                onClick={loadSettlementData}
                disabled={loading}
                className="bg-white/20 hover:bg-white/30 px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
              >
                <HiRefresh className="h-5 w-5" />
                <span>Êõ¥Êñ∞</span>
              </button>
            </div>
          </div>
        </div>

        {/* ÊúàÈÅ∏Êäû */}
        <div className="flex items-center justify-center space-x-6 mb-8">
          <button
            onClick={() => changeMonth(-1)}
            className="p-3 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors"
          >
            <HiArrowLeft className="h-6 w-6" />
          </button>
          <div className="flex items-center space-x-3 bg-white px-8 py-4 rounded-xl border shadow-sm">
            <HiCalendar className="h-6 w-6 text-gray-500" />
            <span className="text-2xl font-bold text-gray-900">
              {currentYear}Âπ¥{currentMonth}Êúà
            </span>
          </div>
          <button
            onClick={() => changeMonth(1)}
            className="p-3 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors"
          >
            <HiArrowRight className="h-6 w-6" />
          </button>
        </div>

        {allocation ? (
          <>
            {/* „Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫ */}
            <div className="mb-8">
              <div
                className={`p-6 rounded-xl border-2 ${
                  allocation.status === 'paid'
                    ? 'bg-green-50 border-green-200'
                    : allocation.status === 'finalized'
                      ? 'bg-blue-50 border-blue-200'
                      : 'bg-yellow-50 border-yellow-200'
                }`}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    {allocation.status === 'paid' && (
                      <HiCheckCircle className="h-8 w-8 text-green-600" />
                    )}
                    {allocation.status === 'finalized' && (
                      <HiClock className="h-8 w-8 text-blue-600" />
                    )}
                    {allocation.status === 'draft' && (
                      <HiExclamationCircle className="h-8 w-8 text-yellow-600" />
                    )}
                    <div>
                      <h3
                        className={`text-xl font-bold ${
                          allocation.status === 'paid'
                            ? 'text-green-800'
                            : allocation.status === 'finalized'
                              ? 'text-blue-800'
                              : 'text-yellow-800'
                        }`}
                      >
                        {allocation.status === 'paid' && '‚úÖ ÊîØÊâï„ÅÑÂÆå‰∫Ü'}
                        {allocation.status === 'finalized' && '‚è∞ Á≤æÁÆóÁ¢∫ÂÆöÊ∏à„ÅøÔºàÊîØÊâï„ÅÑÂæÖ„Å°Ôºâ'}
                        {allocation.status === 'draft' && 'üìù ‰∏ãÊõ∏„ÅçÁä∂ÊÖã'}
                      </h3>
                      <p
                        className={`text-sm ${
                          allocation.status === 'paid'
                            ? 'text-green-700'
                            : allocation.status === 'finalized'
                              ? 'text-blue-700'
                              : 'text-yellow-700'
                        }`}
                      >
                        {allocation.status === 'paid' &&
                          allocation.paidAt &&
                          `ÊîØÊâï„ÅÑÂÆå‰∫ÜÊó•: ${new Date(allocation.paidAt).toLocaleDateString('ja-JP')}`}
                        {allocation.status === 'finalized' &&
                          allocation.finalizedAt &&
                          `Á¢∫ÂÆöÊó•: ${new Date(allocation.finalizedAt).toLocaleDateString('ja-JP')} | ÊîØÊâï„ÅÑ‰∫àÂÆö: ÁøåÊúà10Êó•`}
                        {allocation.status === 'draft' && 'Á≤æÁÆóÁ¢∫ÂÆöÂâç„ÅÆË®àÁÆóÁµêÊûú„Åß„Åô'}
                      </p>
                    </div>
                  </div>

                  {/* üÜï Ê®©Èôê„Å´Âøú„Åò„Å¶„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥„ÇíÂà∂Âæ° */}
                  <div className="flex flex-wrap gap-3">
                    {allocation.status === 'draft' && permissions.canEdit && (
                      <button
                        onClick={() => setIsAdjustmentModalOpen(true)}
                        className="bg-orange-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-orange-600 flex items-center space-x-2"
                      >
                        <HiAdjustments className="h-5 w-5" />
                        <span>ÈÖçÂàÜË™øÊï¥Áî≥Ë´ã</span>
                      </button>
                    )}

                    {adminAccess?.isSuperAdmin &&
                      allocation.status === 'draft' &&
                      data.canFinalize &&
                      permissions.canEdit && (
                        <button
                          onClick={handleFinalize}
                          disabled={actionLoading}
                          className="bg-blue-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-600 disabled:opacity-50 flex items-center space-x-2"
                        >
                          {actionLoading ? (
                            <Spinner size="sm" />
                          ) : (
                            <HiCheckCircle className="h-5 w-5" />
                          )}
                          <span>Á≤æÁÆóÁ¢∫ÂÆö</span>
                        </button>
                      )}

                    {adminAccess?.isSuperAdmin &&
                      allocation.status === 'finalized' &&
                      data.canMarkPaid &&
                      permissions.canEdit && (
                        <button
                          onClick={handleMarkPaid}
                          disabled={actionLoading}
                          className="bg-green-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-green-600 disabled:opacity-50 flex items-center space-x-2"
                        >
                          {actionLoading ? <Spinner size="sm" /> : <HiCheck className="h-5 w-5" />}
                          <span>ÊîØÊâï„ÅÑÂÆå‰∫Ü</span>
                        </button>
                      )}
                  </div>
                </div>

                {/* Ë≠¶Âëä„É°„ÉÉ„Çª„Éº„Ç∏ */}
                {data.pendingAdjustments > 0 && (
                  <div className="mt-4 p-4 bg-amber-100 border border-amber-300 rounded-lg">
                    <div className="flex items-center space-x-2">
                      <HiExclamationCircle className="h-5 w-5 text-amber-600" />
                      <p className="text-amber-800 font-medium">
                        Êú™Âá¶ÁêÜ„ÅÆÈÖçÂàÜË™øÊï¥Áî≥Ë´ã„Åå{data.pendingAdjustments}
                        ‰ª∂„ÅÇ„Çä„Åæ„Åô„ÄÇÁ≤æÁÆóÁ¢∫ÂÆöÂâç„Å´Âá¶ÁêÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Ë≤°Âãô„Çµ„Éû„É™„ÉºÔºàÂ•ëÁ¥ÑÊõ∏Ê∫ñÊã†Ôºâ */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              <div className="bg-white p-6 rounded-xl border shadow-sm">
                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm font-medium text-gray-600">Á∑èÂ£≤‰∏ä</span>
                  <HiTrendingUp className="h-6 w-6 text-green-500" />
                </div>
                <div className="text-2xl font-bold text-gray-900">
                  {formatCurrency(allocation.totalRevenue)}
                </div>
                <div className="text-xs text-gray-500 mt-1">ÊâãÊï∞ÊñôÂ∑ÆÂºïÂâç</div>
              </div>

              <div className="bg-white p-6 rounded-xl border shadow-sm">
                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm font-medium text-gray-600">Á¥îÂà©Áõä</span>
                  <HiChartBar className="h-6 w-6 text-blue-500" />
                </div>
                <div className="text-2xl font-bold text-gray-900">
                  {formatCurrency(allocation.netProfit)}
                </div>
                <div className="text-xs text-gray-500 mt-1">ÈÖçÂàÜ„ÅÆÂü∫Ê∫ñÈ°ç</div>
              </div>

              <div className="bg-white p-6 rounded-xl border shadow-sm">
                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm font-medium text-gray-600">ÂèóË®óËÄÖÈÖçÂàÜ</span>
                  <HiUsers className="h-6 w-6 text-purple-500" />
                </div>
                <div className="text-2xl font-bold text-purple-600">
                  {formatCurrency(allocation.totalContractorShare)}
                </div>
                <div className="text-xs text-gray-500 mt-1">Âà©Áõä„ÅÆ60%ÔºàÁæ©Áµå30% + ÂÅ•‰∏ñ30%Ôºâ</div>
              </div>

              <div className="bg-white p-6 rounded-xl border shadow-sm">
                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm font-medium text-gray-600">ÂßîË®óËÄÖÈÖçÂàÜ</span>
                  <HiCurrencyDollar className="h-6 w-6 text-orange-500" />
                </div>
                <div className="text-2xl font-bold text-orange-600">
                  {formatCurrency(allocation.companyShare)}
                </div>
                <div className="text-xs text-gray-500 mt-1">Âà©Áõä„ÅÆ40%</div>
              </div>
            </div>

            {/* ÂèóË®óËÄÖÂà•ÈÖçÂàÜË©≥Á¥∞ÔºàÂ•ëÁ¥ÑÊõ∏Á¨¨3Êù°Ê∫ñÊã†Ôºâ */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
              {Object.values(allocation.contractors).map((contractor, index) => (
                <div
                  key={contractor.contractorId}
                  className="bg-white rounded-xl border shadow-sm overflow-hidden"
                >
                  <div className={`p-6 ${index === 0 ? 'bg-blue-50' : 'bg-purple-50'} border-b`}>
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="text-xl font-bold text-gray-900">{contractor.name}</h3>
                        <p className="text-sm text-gray-600 mt-1">{contractor.email}</p>
                      </div>
                      <div
                        className={`px-4 py-2 rounded-full text-sm font-bold ${
                          index === 0
                            ? 'bg-blue-100 text-blue-800'
                            : 'bg-purple-100 text-purple-800'
                        }`}
                      >
                        {formatPercent(contractor.adjustedPercent)}
                      </div>
                    </div>
                  </div>

                  <div className="p-6">
                    <div className="space-y-4">
                      <div className="flex justify-between items-center">
                        <span className="text-gray-600">Âü∫Êú¨ÈÖçÂàÜÁéá</span>
                        <span className="font-medium">
                          {formatPercent(contractor.originalPercent)}
                        </span>
                      </div>

                      {contractor.adjustmentReason && (
                        <div className="bg-amber-50 border border-amber-200 p-4 rounded-lg">
                          <div className="flex items-center space-x-2 mb-2">
                            <HiAdjustments className="h-4 w-4 text-amber-600" />
                            <span className="text-sm font-medium text-amber-800">ÈÖçÂàÜË™øÊï¥„ÅÇ„Çä</span>
                          </div>
                          <p className="text-sm text-amber-700">{contractor.adjustmentReason}</p>
                        </div>
                      )}

                      <div className="flex justify-between items-center">
                        <span className="text-gray-600">Âà©ÁõäÈÖçÂàÜÈ°ç</span>
                        <span
                          className={`font-bold text-lg ${
                            index === 0 ? 'text-blue-600' : 'text-purple-600'
                          }`}
                        >
                          {formatCurrency(contractor.allocationAmount)}
                        </span>
                      </div>

                      <div className="flex justify-between items-center">
                        <span className="text-gray-600">Á´ãÊõøÁµåË≤ªÁ≤æÁÆó</span>
                        <span className="font-medium text-green-600">
                          {formatCurrency(contractor.expenseReimbursement)}
                        </span>
                      </div>

                      <div className="border-t pt-4">
                        <div className="flex justify-between items-center">
                          <span className="text-lg font-bold text-gray-900">Á∑èÊîØÊâïÈ°ç</span>
                          <span
                            className={`text-2xl font-bold ${
                              index === 0 ? 'text-blue-600' : 'text-purple-600'
                            }`}
                          >
                            {formatCurrency(contractor.totalPayment)}
                          </span>
                        </div>
                        <p className="text-xs text-gray-500 mt-1">ÈÖçÂàÜ + Á´ãÊõøÁµåË≤ªÁ≤æÁÆó</p>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* ÈÖçÂàÜË™øÊï¥Â±•Ê≠¥ */}
            {allocation.hasAdjustments && (
              <div className="bg-white rounded-xl border shadow-sm">
                <div className="p-6 border-b">
                  <h3 className="text-lg font-bold text-gray-900">ÈÖçÂàÜË™øÊï¥Â±•Ê≠¥</h3>
                  <p className="text-sm text-gray-600 mt-1">Â•ëÁ¥ÑÊõ∏Á¨¨3Êù°Á¨¨4È†Ö„Å´Âü∫„Å•„ÅèÈÖçÂàÜË™øÊï¥</p>
                </div>
                <div className="p-6">
                  <div className="space-y-4">
                    {allocation.adjustments.map((adjustment: any, index: number) => (
                      <div
                        key={index}
                        className="flex items-center justify-between p-4 bg-gray-50 rounded-lg"
                      >
                        <div>
                          <p className="font-medium text-gray-900">
                            {adjustment.targetPerson === 'yoshitsune' ? 'Â∞èÊ≤≥ÂéüÁæ©Áµå' : 'Á¶èÂ≥∂ÂÅ•‰∏ñ'}
                            „ÅÆÈÖçÂàÜË™øÊï¥
                          </p>
                          <p className="text-sm text-gray-600 mt-1">
                            {formatPercent(adjustment.originalPercent)} ‚Üí{' '}
                            {formatPercent(adjustment.adjustedPercent)}
                          </p>
                          <p className="text-sm text-gray-500 mt-1">{adjustment.reason}</p>
                        </div>
                        <span
                          className={`px-3 py-1 rounded-full text-sm font-medium ${
                            adjustment.status === 'approved'
                              ? 'bg-green-100 text-green-800'
                              : adjustment.status === 'pending'
                                ? 'bg-yellow-100 text-yellow-800'
                                : 'bg-red-100 text-red-800'
                          }`}
                        >
                          {adjustment.status === 'approved'
                            ? 'ÊâøË™çÊ∏à„Åø'
                            : adjustment.status === 'pending'
                              ? 'ÊâøË™çÂæÖ„Å°'
                              : 'Âê¶Ë™ç'}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </>
        ) : (
          <div className="text-center py-16">
            <HiInformationCircle className="h-20 w-20 text-gray-400 mx-auto mb-6" />
            <h3 className="text-xl font-bold text-gray-900 mb-2">„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</h3>
            <p className="text-gray-600 mb-6">
              {currentYear}Âπ¥{currentMonth}Êúà„ÅÆÁ≤æÁÆó„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì
            </p>
            <button
              onClick={loadSettlementData}
              className="bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600"
            >
              ÂÜçË™≠„ÅøËæº„Åø
            </button>
          </div>
        )}

        {/* üÜï Ê®©Èôê„Å´Âøú„Åò„Å¶ÈÖçÂàÜË™øÊï¥Áî≥Ë´ã„É¢„Éº„ÉÄ„É´„ÇíË°®Á§∫ */}
        {isAdjustmentModalOpen && permissions.canEdit && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-8 rounded-xl max-w-lg w-full mx-4 max-h-[90vh] overflow-y-auto">
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-xl font-bold text-gray-900">ÈÖçÂàÜË™øÊï¥Áî≥Ë´ã</h3>
                <button
                  onClick={() => setIsAdjustmentModalOpen(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <HiX className="h-6 w-6" />
                </button>
              </div>

              <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg mb-6">
                <p className="text-sm text-blue-800">
                  <strong>Â•ëÁ¥ÑÊõ∏Á¨¨3Êù°Á¨¨4È†Ö:</strong>{' '}
                  ÂèóË®óËÄÖ„ÅÆË≤¢ÁåÆÂ∫¶„Å´Âøú„Åò„Å¶ÈÖçÂàÜÁéá„ÇíË™øÊï¥„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô
                </p>
              </div>

              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Ë™øÊï¥„Çø„Ç§„Éó</label>
                  <select
                    value={adjustmentForm.adjustmentType}
                    onChange={(e) =>
                      setAdjustmentForm((prev) => ({
                        ...prev,
                        adjustmentType: e.target.value as any,
                      }))
                    }
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="admin_proposal">ÂßîË®óËÄÖ„Åã„Çâ„ÅÆË™øÊï¥ÊèêÊ°à</option>
                    <option value="peer_proposal">ÂèóË®óËÄÖÈñì„ÅÆÁõ∏‰∫íË™øÊï¥ÊèêÊ°à</option>
                    <option value="self_reduction">ÂèóË®óËÄÖÊú¨‰∫∫„Åã„Çâ„ÅÆËá™Â∑±Áî≥ÂëäÊ∏õÈ°ç</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">ÂØæË±°ËÄÖ</label>
                  <select
                    value={adjustmentForm.targetPerson}
                    onChange={(e) =>
                      setAdjustmentForm((prev) => ({
                        ...prev,
                        targetPerson: e.target.value as 'yoshitsune' | 'kensei',
                      }))
                    }
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="yoshitsune">Â∞èÊ≤≥ÂéüÁæ©Áµå</option>
                    <option value="kensei">Á¶èÂ≥∂ÂÅ•‰∏ñ</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ë™øÊï¥ÂæåÈÖçÂàÜÁéá (%)
                  </label>
                  <input
                    type="number"
                    min="0"
                    max="30"
                    step="0.1"
                    value={adjustmentForm.adjustedPercent}
                    onChange={(e) =>
                      setAdjustmentForm((prev) => ({
                        ...prev,
                        adjustedPercent: parseFloat(e.target.value) || 0,
                      }))
                    }
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Âü∫Êú¨ÈÖçÂàÜÁéá: 30% | Ë™øÊï¥ÂèØËÉΩÁØÑÂõ≤: 0% - 30%
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ë™øÊï¥ÁêÜÁî± <span className="text-red-500">*</span>
                  </label>
                  <textarea
                    value={adjustmentForm.reason}
                    onChange={(e) =>
                      setAdjustmentForm((prev) => ({
                        ...prev,
                        reason: e.target.value,
                      }))
                    }
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 h-32 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="ÈÖçÂàÜË™øÊï¥„ÅÆÂÖ∑‰ΩìÁöÑ„Å™ÁêÜÁî±„ÇíË©≥„Åó„ÅèË®òÂÖ•„Åó„Å¶„Åè„Å†„Åï„ÅÑ&#10;‰æãÔºö„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆË≤¢ÁåÆÂ∫¶„ÄÅË≤¨‰ªªÁØÑÂõ≤„ÅÆÂ§âÊõ¥„ÄÅ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË©ï‰æ°„Å™„Å©"
                    required
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Ë™øÊï¥ÁêÜÁî±„ÅØÊâøË™çÂØ©Êüª„ÅÆÈáçË¶Å„Å™Âà§Êñ≠ÊùêÊñô„Å®„Å™„Çä„Åæ„Åô
                  </p>
                </div>
              </div>

              <div className="flex space-x-4 mt-8">
                <button
                  onClick={() => setIsAdjustmentModalOpen(false)}
                  className="flex-1 border border-gray-300 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-50 font-medium"
                >
                  „Ç≠„É£„É≥„Çª„É´
                </button>
                <button
                  onClick={handleAdjustmentSubmit}
                  disabled={actionLoading || !adjustmentForm.reason.trim()}
                  className="flex-1 bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed font-medium flex items-center justify-center space-x-2"
                >
                  {actionLoading && <Spinner size="sm" />}
                  <span>Áî≥Ë´ãÊèêÂá∫</span>
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}