generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String                   @id @default(cuid())
  email                    String                   @unique
  name                     String?
  nameEn                   String?
  password                 String?
  image                    String?
  bio                      String?
  mainColor                String                   @default("#3B82F6")
  phone                    String?
  company                  String?
  emailVerified            DateTime?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  companyLabel             String?
  companyUrl               String?
  snsIconColor             String?                  @default("#333333")
  stripeCustomerId         String?
  subscriptionStatus       String?
  trialEndsAt              DateTime?
  corporateRole            String?
  departmentId             String?
  position                 String?
  tenantId                 String?
  bioBackgroundColor       String?                  @default("#FFFFFF")
  bioTextColor             String?                  @default("#333333")
  nameKana                 String?
  lastName                 String?
  firstName                String?
  lastNameKana             String?
  firstNameKana            String?
  headerText               String?
  textColor                String?
  isFinancialAdmin         Boolean                  @default(false)
  accounts                 Account[]
  sentEmails               AdminEmailLog[]          @relation("SentByAdmin")
  billingHistory           BillingRecord[]
  cancelRequests           CancelRequest[]
  companyExpensesApproved  CompanyExpense[]         @relation("CompanyExpenseApprover")
  companyExpensesInput     CompanyExpense[]         @relation("CompanyExpenseInputBy")
  contacts                 Contact[]
  activityLogs             CorporateActivityLog[]   @relation("UserActivities")
  adminOfTenant            CorporateTenant?         @relation("TenantAdmin")
  customLinks              CustomLink[]
  emailVerificationToken   EmailVerificationToken?
  financialAccessLogs      FinancialAccessLog[]     @relation("FinancialAccessUser")
  addedFinancialAdmins     FinancialAdmin[]         @relation("AddedByUser")
  financialAdminRecord     FinancialAdmin?
  financialRecordsApproved FinancialRecord[]        @relation("FinancialRecordApprover")
  financialRecordsCreated  FinancialRecord[]        @relation("FinancialRecordCreator")
  settlementsFinalized     MonthlySettlement[]      @relation("SettlementFinalizer")
  passwordResetTokens      PasswordResetToken[]
  profile                  Profile?
  qrCodePages              QrCodePage[]
  adjustmentsApproved      RevenueShareAdjustment[] @relation("AdjustmentApprover")
  adjustmentsProposed      RevenueShareAdjustment[] @relation("AdjustmentProposer")
  snsLinks                 SnsLink[]
  subscription             Subscription?
  department               Department?              @relation(fields: [departmentId], references: [id])
  tenant                   CorporateTenant?         @relation("TenantUsers", fields: [tenantId], references: [id])
  oneTapSealOrders         OneTapSealOrder[]
  oneTapSealItems          OneTapSealItem[] @relation("OneTapSealItemMember")
}

model Profile {
  id           String    @id @default(cuid())
  userId       String    @unique
  slug         String    @unique
  views        Int       @default(0)
  isPublic     Boolean   @default(true)
  lastAccessed DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  oneTapSealItems OneTapSealItem[] // 新規追加
}

model SnsLink {
  id           String   @id @default(cuid())
  userId       String
  platform     String
  username     String?
  url          String
  displayOrder Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model CustomLink {
  id           String   @id @default(cuid())
  userId       String
  name         String
  url          String
  displayOrder Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Subscription {
  id                 String           @id @default(cuid())
  userId             String           @unique
  status             String
  plan               String
  priceId            String?
  subscriptionId     String?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean          @default(false)
  trialStart         DateTime?
  trialEnd           DateTime?
  canceledAt         DateTime?
  cancelReason       String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  interval           String?
  cancelRequests     CancelRequest[]
  corporateTenant    CorporateTenant?
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  oneTapSealOrders   OneTapSealOrder[]
}

model BillingRecord {
  id          String    @id @default(cuid())
  userId      String
  invoiceId   String?
  amount      Int
  status      String
  description String?
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Contact {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  email       String
  companyName String?
  type        String
  subject     String
  message     String
  status      String   @default("pending")
  notes       String?
  assignedTo  String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
}

model CorporateTenant {
  id                   String                 @id @default(cuid())
  name                 String
  logoUrl              String?
  primaryColor         String?
  secondaryColor       String?
  customDomain         String?                @unique
  maxUsers             Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  adminId              String                 @unique
  accountStatus        String                 @default("active")
  billingAddress       Json?
  billingContact       String?
  billingEmail         String?
  dataRetentionDays    Int                    @default(365)
  notificationSettings Json?
  securitySettings     Json?
  subscriptionId       String?                @unique
  logoHeight           Int?
  logoWidth            Int?
  headerText           String?
  textColor            String?
  onboardingCompleted  Boolean                @default(false)
  activityLogs         CorporateActivityLog[] @relation("TenantActivities")
  corporateSnsLinks    CorporateSnsLink[]
  admin                User                   @relation("TenantAdmin", fields: [adminId], references: [id])
  subscription         Subscription?          @relation(fields: [subscriptionId], references: [id])
  departments          Department[]
  users                User[]                 @relation("TenantUsers")
  oneTapSealOrders     OneTapSealOrder[]
}

model Department {
  id          String          @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  tenantId    String
  tenant      CorporateTenant @relation(fields: [tenantId], references: [id])
  users       User[]
}

model CorporateSnsLink {
  id           String          @id @default(cuid())
  tenantId     String
  platform     String
  username     String?
  url          String
  displayOrder Int
  isRequired   Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  tenant       CorporateTenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, platform])
}

model CorporateActivityLog {
  id          String          @id @default(cuid())
  tenantId    String
  userId      String?
  action      String
  entityType  String
  entityId    String?
  description String
  metadata    Json?
  createdAt   DateTime        @default(now())
  tenant      CorporateTenant @relation("TenantActivities", fields: [tenantId], references: [id], onDelete: Cascade)
  user        User?           @relation("UserActivities", fields: [userId], references: [id])

  @@index([tenantId, createdAt(sort: Desc)])
  @@index([userId])
}

model QrCodePage {
  id             String    @id @default(cuid())
  slug           String    @unique
  userId         String
  userName       String
  profileUrl     String
  template       String
  primaryColor   String
  secondaryColor String
  accentColor    String?
  views          Int       @default(0)
  lastAccessed   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  textColor      String?
  nameEn         String?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  oneTapSealItems OneTapSealItem[]
}

model Notification {
  id           String             @id @db.Uuid
  title        String
  content      String
  type         String
  priority     String             @default("normal")
  imageUrl     String?
  startDate    DateTime           @db.Timestamptz(6)
  endDate      DateTime?          @db.Timestamptz(6)
  targetGroup  String             @default("all")
  active       Boolean            @default(true)
  createdAt    DateTime           @db.Timestamptz(6)
  updatedAt    DateTime           @db.Timestamptz(6)
  readStatuses NotificationRead[]

  @@map("Notification")
}

model NotificationRead {
  id             String       @id @db.Uuid
  notificationId String       @db.Uuid
  user_id        String
  readAt         DateTime     @db.Timestamptz(6)
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([notificationId, user_id])
  @@map("NotificationRead")
}

model AdminEmailLog {
  id          String   @id @default(uuid())
  subject     String
  title       String
  message     String
  targetGroup String
  ctaText     String?
  ctaUrl      String?
  sentCount   Int
  failCount   Int
  sentBy      String
  sentAt      DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation("SentByAdmin", fields: [sentBy], references: [id])

  @@index([sentBy])
  @@index([targetGroup])
  @@index([sentAt])
}

model IdempotencyRequest {
  id        String   @id
  endpoint  String
  result    Json
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CancelRequest {
  id                  String       @id @default(cuid())
  userId              String
  subscriptionId      String
  requestedCancelDate DateTime
  reason              String?
  currentPlan         String
  currentInterval     String
  paidAmount          Int
  refundAmount        Int
  usedMonths          Int
  status              String       @default("pending")
  adminNotes          String?
  processedBy         String?
  processedAt         DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  subscription        Subscription @relation(fields: [subscriptionId], references: [id])
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model FinancialAdmin {
  id          String   @id @default(cuid())
  userId      String   @unique
  addedBy     String
  addedAt     DateTime @default(now())
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  addedByUser User     @relation("AddedByUser", fields: [addedBy], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([addedBy])
  @@index([isActive])
}

model FinancialRecord {
  id                String             @id @default(cuid())
  recordType        String
  title             String
  description       String?
  amount            Decimal
  category          String
  recordDate        DateTime
  type              String
  date              DateTime
  sourceType        String?
  sourceId          String?
  isAutoImported    Boolean            @default(false)
  feeAmount         Decimal?
  netAmount         Decimal?
  contractorId      String?
  needsApproval     Boolean            @default(false)
  approvalStatus    String             @default("approved")
  approvedBy        String?
  approvedAt        DateTime?
  inputBy           String
  createdBy         String
  editHistory       Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  companyExpense    CompanyExpense?
  approver          User?              @relation("FinancialRecordApprover", fields: [approvedBy], references: [id])
  creator           User               @relation("FinancialRecordCreator", fields: [createdBy], references: [id])
  stripeTransaction StripeTransaction?

  @@index([recordType, recordDate])
  @@index([sourceType, isAutoImported])
  @@index([contractorId])
  @@index([approvalStatus])
  @@index([type, date])
}

model MonthlySettlement {
  id                String    @id @default(cuid())
  year              Int
  month             Int
  totalRevenue      Int
  totalExpenses     Int
  profit            Int
  contractorShare   Int
  yoshitsuneShare   Int
  yoshitsunePercent Float     @default(15.0)
  kenseiShare       Int
  kenseiPercent     Float     @default(15.0)
  status            String    @default("draft")
  finalizedBy       String?
  finalizedAt       DateTime?
  paidAt            DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  finalizer         User?     @relation("SettlementFinalizer", fields: [finalizedBy], references: [id])

  @@unique([year, month])
  @@index([year, month])
}

model RevenueShareAdjustment {
  id              String   @id @default(cuid())
  year            Int
  month           Int
  adjustmentType  String
  targetPerson    String
  originalPercent Float
  adjustedPercent Float
  reason          String
  proposedBy      String
  approvedBy      String?
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  approver        User?    @relation("AdjustmentApprover", fields: [approvedBy], references: [id])
  proposer        User     @relation("AdjustmentProposer", fields: [proposedBy], references: [id])

  @@index([year, month])
  @@index([targetPerson])
}

model FinancialAccessLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String
  entityId   String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation("FinancialAccessUser", fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([action, createdAt])
}

model StripeTransaction {
  id                String           @id @default(cuid())
  stripePaymentId   String           @unique
  stripeChargeId    String?          @unique
  stripeCustomerId  String?
  amount            Decimal
  currency          String           @default("jpy")
  description       String?
  customerEmail     String?
  stripeFeeAmount   Decimal
  stripeFeeRate     Decimal
  netAmount         Decimal
  transactionDate   DateTime
  settledDate       DateTime?
  actualSettledDate DateTime?
  subscriptionType  String?
  planName          String?
  status            String
  refundAmount      Decimal?
  refundReason      String?
  stripeMetadata    Json?
  webhookProcessed  Boolean          @default(false)
  financialRecordId String?          @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  financialRecord   FinancialRecord? @relation(fields: [financialRecordId], references: [id])

  @@index([transactionDate])
  @@index([status])
  @@index([subscriptionType])
  @@index([webhookProcessed])
}

model CompanyExpense {
  id                String           @id @default(cuid())
  title             String
  description       String?
  amount            Decimal
  category          String
  subCategory       String?
  expenseDate       DateTime
  expenseType       String
  isRecurring       Boolean          @default(false)
  recurringCycle    String?
  requiresApproval  Boolean          @default(false)
  approvalStatus    String           @default("approved")
  approvedBy        String?
  approvedAt        DateTime?
  approvalComments  String?
  rejectionReason   String?
  paymentMethod     String?
  paymentStatus     String           @default("paid")
  paidDate          DateTime?
  invoiceNumber     String?
  receiptUrl        String?
  attachmentUrls    Json?
  taxIncluded       Boolean          @default(true)
  taxRate           Decimal?
  taxAmount         Decimal?
  financialRecordId String?          @unique
  inputBy           String
  editHistory       Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  approvedByUser    User?            @relation("CompanyExpenseApprover", fields: [approvedBy], references: [id])
  financialRecord   FinancialRecord? @relation(fields: [financialRecordId], references: [id])
  inputByUser       User             @relation("CompanyExpenseInputBy", fields: [inputBy], references: [id])

  @@index([category, expenseDate])
  @@index([expenseType])
  @@index([approvalStatus])
  @@index([paymentStatus])
}

model MonthlyProfitSummary {
  id                       String    @id @default(cuid())
  targetYear               Int
  targetMonth              Int
  totalRevenue             Decimal
  stripeTransactionCount   Int
  averageTransactionAmount Decimal
  totalStripeFees          Decimal
  averageFeeRate           Decimal
  totalCompanyExpenses     Decimal
  totalContractorExpenses  Decimal
  totalExpenses            Decimal
  grossProfit              Decimal
  netProfit                Decimal
  profitMargin             Decimal
  totalAllocations         Decimal
  remainingProfit          Decimal
  isFinalized              Boolean   @default(false)
  finalizedAt              DateTime?
  finalizedBy              String?
  revenueBreakdown         Json?
  expenseBreakdown         Json?
  allocationBreakdown      Json?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  @@unique([targetYear, targetMonth])
  @@index([targetYear, targetMonth])
  @@index([isFinalized])
}

model StripeWebhookLog {
  id                   String   @id @default(cuid())
  stripeEventId        String   @unique
  eventType            String
  eventData            Json
  processingStatus     String   @default("pending")
  processingResult     String?
  errorMessage         String?
  retryCount           Int      @default(0)
  createdTransactionId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([eventType, processingStatus])
  @@index([createdAt])
}

model AutoSyncSettings {
  id                        String    @id @default(cuid())
  stripeAutoSync            Boolean   @default(true)
  syncFrequency             String    @default("realtime")
  lastSyncAt                DateTime?
  defaultStripeFeeRate      Decimal   @default(0.036)
  notifyOnLargeTransaction  Boolean   @default(true)
  largeTransactionThreshold Decimal   @default(100000)
  updatedBy                 String
  updatedAt                 DateTime  @updatedAt
  createdAt                 DateTime  @default(now())

  @@map("AutoSyncSettings")
}

model OneTapSealOrder {
  id                 String    @id @default(cuid())
  userId             String
  tenantId           String?              // 法人注文の場合
  subscriptionId     String?              // 同時注文の場合
  orderType          String               // 'individual', 'corporate'
  orderDate          DateTime  @default(now())
  status             String    @default("pending") // 'pending', 'paid', 'preparing', 'shipped', 'delivered'
  
  // 配送情報（JSON形式に変更）
  shippingAddress    Json                 // EnhancedShippingAddress 型のJSONデータ
  
  // 金額情報（税抜）
  sealTotal          Int                  // シール代金小計
  shippingFee        Int       @default(185) // 配送料（クリックポスト185円）
  taxAmount          Int                  // 消費税
  totalAmount        Int                  // 合計金額（税込）
  
  // 配送管理
  trackingNumber     String?              // クリックポスト追跡番号
  shippedAt          DateTime?            // 発送日時
  shippedBy          String?              // 発送処理者（admin ID）
  
  // Stripe情報
  stripePaymentIntentId String?
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // リレーション
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant             CorporateTenant? @relation(fields: [tenantId], references: [id])
  subscription       Subscription? @relation(fields: [subscriptionId], references: [id])
  items              OneTapSealItem[]
  
  @@index([userId])
  @@index([tenantId])
  @@index([status])
  @@index([orderDate])
}

model OneTapSealItem {
  id              String    @id @default(cuid())
  orderId         String
  memberUserId    String?               // 法人注文時のメンバーID
  color           String                // 'black', 'gray', 'white'
  quantity        Int
  unitPrice       Int       @default(550) // 550円固定
  profileSlug     String                // Profile.slug参照（NFCタグ書き込み用）
  qrSlug          String?               // QRCodePage.slug参照（後方互換性用）
  
  createdAt       DateTime  @default(now())
  
  // リレーション
  order           OneTapSealOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  memberUser      User?     @relation("OneTapSealItemMember", fields: [memberUserId], references: [id])
  profile         Profile   @relation(fields: [profileSlug], references: [slug]) // 新規追加
  qrCodePage      QrCodePage? @relation(fields: [qrSlug], references: [slug]) // 任意に変更
  
  @@index([orderId])
  @@index([memberUserId])
  @@index([profileSlug])
  @@index([qrSlug])
}