
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model SnsLink
 * 
 */
export type SnsLink = $Result.DefaultSelection<Prisma.$SnsLinkPayload>
/**
 * Model CustomLink
 * 
 */
export type CustomLink = $Result.DefaultSelection<Prisma.$CustomLinkPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model BillingRecord
 * 
 */
export type BillingRecord = $Result.DefaultSelection<Prisma.$BillingRecordPayload>
/**
 * Model PasswordResetToken
 * 
 */
export type PasswordResetToken = $Result.DefaultSelection<Prisma.$PasswordResetTokenPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model CorporateTenant
 * 
 */
export type CorporateTenant = $Result.DefaultSelection<Prisma.$CorporateTenantPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model CorporateSnsLink
 * 
 */
export type CorporateSnsLink = $Result.DefaultSelection<Prisma.$CorporateSnsLinkPayload>
/**
 * Model CorporateActivityLog
 * 
 */
export type CorporateActivityLog = $Result.DefaultSelection<Prisma.$CorporateActivityLogPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.snsLink`: Exposes CRUD operations for the **SnsLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SnsLinks
    * const snsLinks = await prisma.snsLink.findMany()
    * ```
    */
  get snsLink(): Prisma.SnsLinkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customLink`: Exposes CRUD operations for the **CustomLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomLinks
    * const customLinks = await prisma.customLink.findMany()
    * ```
    */
  get customLink(): Prisma.CustomLinkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.billingRecord`: Exposes CRUD operations for the **BillingRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BillingRecords
    * const billingRecords = await prisma.billingRecord.findMany()
    * ```
    */
  get billingRecord(): Prisma.BillingRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordResetToken`: Exposes CRUD operations for the **PasswordResetToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResetTokens
    * const passwordResetTokens = await prisma.passwordResetToken.findMany()
    * ```
    */
  get passwordResetToken(): Prisma.PasswordResetTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.corporateTenant`: Exposes CRUD operations for the **CorporateTenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CorporateTenants
    * const corporateTenants = await prisma.corporateTenant.findMany()
    * ```
    */
  get corporateTenant(): Prisma.CorporateTenantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.corporateSnsLink`: Exposes CRUD operations for the **CorporateSnsLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CorporateSnsLinks
    * const corporateSnsLinks = await prisma.corporateSnsLink.findMany()
    * ```
    */
  get corporateSnsLink(): Prisma.CorporateSnsLinkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.corporateActivityLog`: Exposes CRUD operations for the **CorporateActivityLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CorporateActivityLogs
    * const corporateActivityLogs = await prisma.corporateActivityLog.findMany()
    * ```
    */
  get corporateActivityLog(): Prisma.CorporateActivityLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Profile: 'Profile',
    SnsLink: 'SnsLink',
    CustomLink: 'CustomLink',
    Account: 'Account',
    Subscription: 'Subscription',
    BillingRecord: 'BillingRecord',
    PasswordResetToken: 'PasswordResetToken',
    Contact: 'Contact',
    CorporateTenant: 'CorporateTenant',
    Department: 'Department',
    CorporateSnsLink: 'CorporateSnsLink',
    CorporateActivityLog: 'CorporateActivityLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "profile" | "snsLink" | "customLink" | "account" | "subscription" | "billingRecord" | "passwordResetToken" | "contact" | "corporateTenant" | "department" | "corporateSnsLink" | "corporateActivityLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      SnsLink: {
        payload: Prisma.$SnsLinkPayload<ExtArgs>
        fields: Prisma.SnsLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SnsLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SnsLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SnsLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SnsLinkPayload>
          }
          findFirst: {
            args: Prisma.SnsLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SnsLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SnsLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SnsLinkPayload>
          }
          findMany: {
            args: Prisma.SnsLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SnsLinkPayload>[]
          }
          create: {
            args: Prisma.SnsLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SnsLinkPayload>
          }
          createMany: {
            args: Prisma.SnsLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SnsLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SnsLinkPayload>[]
          }
          delete: {
            args: Prisma.SnsLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SnsLinkPayload>
          }
          update: {
            args: Prisma.SnsLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SnsLinkPayload>
          }
          deleteMany: {
            args: Prisma.SnsLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SnsLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SnsLinkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SnsLinkPayload>[]
          }
          upsert: {
            args: Prisma.SnsLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SnsLinkPayload>
          }
          aggregate: {
            args: Prisma.SnsLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSnsLink>
          }
          groupBy: {
            args: Prisma.SnsLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<SnsLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.SnsLinkCountArgs<ExtArgs>
            result: $Utils.Optional<SnsLinkCountAggregateOutputType> | number
          }
        }
      }
      CustomLink: {
        payload: Prisma.$CustomLinkPayload<ExtArgs>
        fields: Prisma.CustomLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomLinkPayload>
          }
          findFirst: {
            args: Prisma.CustomLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomLinkPayload>
          }
          findMany: {
            args: Prisma.CustomLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomLinkPayload>[]
          }
          create: {
            args: Prisma.CustomLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomLinkPayload>
          }
          createMany: {
            args: Prisma.CustomLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomLinkPayload>[]
          }
          delete: {
            args: Prisma.CustomLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomLinkPayload>
          }
          update: {
            args: Prisma.CustomLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomLinkPayload>
          }
          deleteMany: {
            args: Prisma.CustomLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomLinkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomLinkPayload>[]
          }
          upsert: {
            args: Prisma.CustomLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomLinkPayload>
          }
          aggregate: {
            args: Prisma.CustomLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomLink>
          }
          groupBy: {
            args: Prisma.CustomLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomLinkCountArgs<ExtArgs>
            result: $Utils.Optional<CustomLinkCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      BillingRecord: {
        payload: Prisma.$BillingRecordPayload<ExtArgs>
        fields: Prisma.BillingRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillingRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillingRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          findFirst: {
            args: Prisma.BillingRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillingRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          findMany: {
            args: Prisma.BillingRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>[]
          }
          create: {
            args: Prisma.BillingRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          createMany: {
            args: Prisma.BillingRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BillingRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>[]
          }
          delete: {
            args: Prisma.BillingRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          update: {
            args: Prisma.BillingRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          deleteMany: {
            args: Prisma.BillingRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BillingRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BillingRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>[]
          }
          upsert: {
            args: Prisma.BillingRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          aggregate: {
            args: Prisma.BillingRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBillingRecord>
          }
          groupBy: {
            args: Prisma.BillingRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillingRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.BillingRecordCountArgs<ExtArgs>
            result: $Utils.Optional<BillingRecordCountAggregateOutputType> | number
          }
        }
      }
      PasswordResetToken: {
        payload: Prisma.$PasswordResetTokenPayload<ExtArgs>
        fields: Prisma.PasswordResetTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          findMany: {
            args: Prisma.PasswordResetTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          create: {
            args: Prisma.PasswordResetTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          createMany: {
            args: Prisma.PasswordResetTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          update: {
            args: Prisma.PasswordResetTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
          }
          upsert: {
            args: Prisma.PasswordResetTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordResetToken>
          }
          groupBy: {
            args: Prisma.PasswordResetTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetTokenCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetTokenCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      CorporateTenant: {
        payload: Prisma.$CorporateTenantPayload<ExtArgs>
        fields: Prisma.CorporateTenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CorporateTenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateTenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CorporateTenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateTenantPayload>
          }
          findFirst: {
            args: Prisma.CorporateTenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateTenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CorporateTenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateTenantPayload>
          }
          findMany: {
            args: Prisma.CorporateTenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateTenantPayload>[]
          }
          create: {
            args: Prisma.CorporateTenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateTenantPayload>
          }
          createMany: {
            args: Prisma.CorporateTenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CorporateTenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateTenantPayload>[]
          }
          delete: {
            args: Prisma.CorporateTenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateTenantPayload>
          }
          update: {
            args: Prisma.CorporateTenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateTenantPayload>
          }
          deleteMany: {
            args: Prisma.CorporateTenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CorporateTenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CorporateTenantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateTenantPayload>[]
          }
          upsert: {
            args: Prisma.CorporateTenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateTenantPayload>
          }
          aggregate: {
            args: Prisma.CorporateTenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCorporateTenant>
          }
          groupBy: {
            args: Prisma.CorporateTenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<CorporateTenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.CorporateTenantCountArgs<ExtArgs>
            result: $Utils.Optional<CorporateTenantCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      CorporateSnsLink: {
        payload: Prisma.$CorporateSnsLinkPayload<ExtArgs>
        fields: Prisma.CorporateSnsLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CorporateSnsLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateSnsLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CorporateSnsLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateSnsLinkPayload>
          }
          findFirst: {
            args: Prisma.CorporateSnsLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateSnsLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CorporateSnsLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateSnsLinkPayload>
          }
          findMany: {
            args: Prisma.CorporateSnsLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateSnsLinkPayload>[]
          }
          create: {
            args: Prisma.CorporateSnsLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateSnsLinkPayload>
          }
          createMany: {
            args: Prisma.CorporateSnsLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CorporateSnsLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateSnsLinkPayload>[]
          }
          delete: {
            args: Prisma.CorporateSnsLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateSnsLinkPayload>
          }
          update: {
            args: Prisma.CorporateSnsLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateSnsLinkPayload>
          }
          deleteMany: {
            args: Prisma.CorporateSnsLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CorporateSnsLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CorporateSnsLinkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateSnsLinkPayload>[]
          }
          upsert: {
            args: Prisma.CorporateSnsLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateSnsLinkPayload>
          }
          aggregate: {
            args: Prisma.CorporateSnsLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCorporateSnsLink>
          }
          groupBy: {
            args: Prisma.CorporateSnsLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<CorporateSnsLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.CorporateSnsLinkCountArgs<ExtArgs>
            result: $Utils.Optional<CorporateSnsLinkCountAggregateOutputType> | number
          }
        }
      }
      CorporateActivityLog: {
        payload: Prisma.$CorporateActivityLogPayload<ExtArgs>
        fields: Prisma.CorporateActivityLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CorporateActivityLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActivityLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CorporateActivityLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActivityLogPayload>
          }
          findFirst: {
            args: Prisma.CorporateActivityLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActivityLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CorporateActivityLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActivityLogPayload>
          }
          findMany: {
            args: Prisma.CorporateActivityLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActivityLogPayload>[]
          }
          create: {
            args: Prisma.CorporateActivityLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActivityLogPayload>
          }
          createMany: {
            args: Prisma.CorporateActivityLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CorporateActivityLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActivityLogPayload>[]
          }
          delete: {
            args: Prisma.CorporateActivityLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActivityLogPayload>
          }
          update: {
            args: Prisma.CorporateActivityLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActivityLogPayload>
          }
          deleteMany: {
            args: Prisma.CorporateActivityLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CorporateActivityLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CorporateActivityLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActivityLogPayload>[]
          }
          upsert: {
            args: Prisma.CorporateActivityLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActivityLogPayload>
          }
          aggregate: {
            args: Prisma.CorporateActivityLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCorporateActivityLog>
          }
          groupBy: {
            args: Prisma.CorporateActivityLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<CorporateActivityLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.CorporateActivityLogCountArgs<ExtArgs>
            result: $Utils.Optional<CorporateActivityLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    profile?: ProfileOmit
    snsLink?: SnsLinkOmit
    customLink?: CustomLinkOmit
    account?: AccountOmit
    subscription?: SubscriptionOmit
    billingRecord?: BillingRecordOmit
    passwordResetToken?: PasswordResetTokenOmit
    contact?: ContactOmit
    corporateTenant?: CorporateTenantOmit
    department?: DepartmentOmit
    corporateSnsLink?: CorporateSnsLinkOmit
    corporateActivityLog?: CorporateActivityLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    passwordResetTokens: number
    activityLogs: number
    accounts: number
    customLinks: number
    snsLinks: number
    billingHistory: number
    contacts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passwordResetTokens?: boolean | UserCountOutputTypeCountPasswordResetTokensArgs
    activityLogs?: boolean | UserCountOutputTypeCountActivityLogsArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    customLinks?: boolean | UserCountOutputTypeCountCustomLinksArgs
    snsLinks?: boolean | UserCountOutputTypeCountSnsLinksArgs
    billingHistory?: boolean | UserCountOutputTypeCountBillingHistoryArgs
    contacts?: boolean | UserCountOutputTypeCountContactsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPasswordResetTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorporateActivityLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCustomLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomLinkWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSnsLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SnsLinkWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBillingHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }


  /**
   * Count Type CorporateTenantCountOutputType
   */

  export type CorporateTenantCountOutputType = {
    activityLogs: number
    users: number
    departments: number
    corporateSnsLinks: number
  }

  export type CorporateTenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityLogs?: boolean | CorporateTenantCountOutputTypeCountActivityLogsArgs
    users?: boolean | CorporateTenantCountOutputTypeCountUsersArgs
    departments?: boolean | CorporateTenantCountOutputTypeCountDepartmentsArgs
    corporateSnsLinks?: boolean | CorporateTenantCountOutputTypeCountCorporateSnsLinksArgs
  }

  // Custom InputTypes
  /**
   * CorporateTenantCountOutputType without action
   */
  export type CorporateTenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenantCountOutputType
     */
    select?: CorporateTenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CorporateTenantCountOutputType without action
   */
  export type CorporateTenantCountOutputTypeCountActivityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorporateActivityLogWhereInput
  }

  /**
   * CorporateTenantCountOutputType without action
   */
  export type CorporateTenantCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * CorporateTenantCountOutputType without action
   */
  export type CorporateTenantCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * CorporateTenantCountOutputType without action
   */
  export type CorporateTenantCountOutputTypeCountCorporateSnsLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorporateSnsLinkWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    users: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DepartmentCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    nameEn: string | null
    password: string | null
    image: string | null
    bio: string | null
    mainColor: string | null
    snsIconColor: string | null
    bioBackgroundColor: string | null
    bioTextColor: string | null
    phone: string | null
    company: string | null
    companyUrl: string | null
    companyLabel: string | null
    emailVerified: Date | null
    stripeCustomerId: string | null
    trialEndsAt: Date | null
    subscriptionStatus: string | null
    corporateRole: string | null
    position: string | null
    departmentId: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    nameEn: string | null
    password: string | null
    image: string | null
    bio: string | null
    mainColor: string | null
    snsIconColor: string | null
    bioBackgroundColor: string | null
    bioTextColor: string | null
    phone: string | null
    company: string | null
    companyUrl: string | null
    companyLabel: string | null
    emailVerified: Date | null
    stripeCustomerId: string | null
    trialEndsAt: Date | null
    subscriptionStatus: string | null
    corporateRole: string | null
    position: string | null
    departmentId: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    nameEn: number
    password: number
    image: number
    bio: number
    mainColor: number
    snsIconColor: number
    bioBackgroundColor: number
    bioTextColor: number
    phone: number
    company: number
    companyUrl: number
    companyLabel: number
    emailVerified: number
    stripeCustomerId: number
    trialEndsAt: number
    subscriptionStatus: number
    corporateRole: number
    position: number
    departmentId: number
    tenantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    nameEn?: true
    password?: true
    image?: true
    bio?: true
    mainColor?: true
    snsIconColor?: true
    bioBackgroundColor?: true
    bioTextColor?: true
    phone?: true
    company?: true
    companyUrl?: true
    companyLabel?: true
    emailVerified?: true
    stripeCustomerId?: true
    trialEndsAt?: true
    subscriptionStatus?: true
    corporateRole?: true
    position?: true
    departmentId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    nameEn?: true
    password?: true
    image?: true
    bio?: true
    mainColor?: true
    snsIconColor?: true
    bioBackgroundColor?: true
    bioTextColor?: true
    phone?: true
    company?: true
    companyUrl?: true
    companyLabel?: true
    emailVerified?: true
    stripeCustomerId?: true
    trialEndsAt?: true
    subscriptionStatus?: true
    corporateRole?: true
    position?: true
    departmentId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    nameEn?: true
    password?: true
    image?: true
    bio?: true
    mainColor?: true
    snsIconColor?: true
    bioBackgroundColor?: true
    bioTextColor?: true
    phone?: true
    company?: true
    companyUrl?: true
    companyLabel?: true
    emailVerified?: true
    stripeCustomerId?: true
    trialEndsAt?: true
    subscriptionStatus?: true
    corporateRole?: true
    position?: true
    departmentId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    nameEn: string | null
    password: string | null
    image: string | null
    bio: string | null
    mainColor: string
    snsIconColor: string | null
    bioBackgroundColor: string | null
    bioTextColor: string | null
    phone: string | null
    company: string | null
    companyUrl: string | null
    companyLabel: string | null
    emailVerified: Date | null
    stripeCustomerId: string | null
    trialEndsAt: Date | null
    subscriptionStatus: string | null
    corporateRole: string | null
    position: string | null
    departmentId: string | null
    tenantId: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    nameEn?: boolean
    password?: boolean
    image?: boolean
    bio?: boolean
    mainColor?: boolean
    snsIconColor?: boolean
    bioBackgroundColor?: boolean
    bioTextColor?: boolean
    phone?: boolean
    company?: boolean
    companyUrl?: boolean
    companyLabel?: boolean
    emailVerified?: boolean
    stripeCustomerId?: boolean
    trialEndsAt?: boolean
    subscriptionStatus?: boolean
    corporateRole?: boolean
    position?: boolean
    departmentId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passwordResetTokens?: boolean | User$passwordResetTokensArgs<ExtArgs>
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    customLinks?: boolean | User$customLinksArgs<ExtArgs>
    snsLinks?: boolean | User$snsLinksArgs<ExtArgs>
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    billingHistory?: boolean | User$billingHistoryArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
    tenant?: boolean | User$tenantArgs<ExtArgs>
    adminOfTenant?: boolean | User$adminOfTenantArgs<ExtArgs>
    contacts?: boolean | User$contactsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    nameEn?: boolean
    password?: boolean
    image?: boolean
    bio?: boolean
    mainColor?: boolean
    snsIconColor?: boolean
    bioBackgroundColor?: boolean
    bioTextColor?: boolean
    phone?: boolean
    company?: boolean
    companyUrl?: boolean
    companyLabel?: boolean
    emailVerified?: boolean
    stripeCustomerId?: boolean
    trialEndsAt?: boolean
    subscriptionStatus?: boolean
    corporateRole?: boolean
    position?: boolean
    departmentId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | User$departmentArgs<ExtArgs>
    tenant?: boolean | User$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    nameEn?: boolean
    password?: boolean
    image?: boolean
    bio?: boolean
    mainColor?: boolean
    snsIconColor?: boolean
    bioBackgroundColor?: boolean
    bioTextColor?: boolean
    phone?: boolean
    company?: boolean
    companyUrl?: boolean
    companyLabel?: boolean
    emailVerified?: boolean
    stripeCustomerId?: boolean
    trialEndsAt?: boolean
    subscriptionStatus?: boolean
    corporateRole?: boolean
    position?: boolean
    departmentId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | User$departmentArgs<ExtArgs>
    tenant?: boolean | User$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    nameEn?: boolean
    password?: boolean
    image?: boolean
    bio?: boolean
    mainColor?: boolean
    snsIconColor?: boolean
    bioBackgroundColor?: boolean
    bioTextColor?: boolean
    phone?: boolean
    company?: boolean
    companyUrl?: boolean
    companyLabel?: boolean
    emailVerified?: boolean
    stripeCustomerId?: boolean
    trialEndsAt?: boolean
    subscriptionStatus?: boolean
    corporateRole?: boolean
    position?: boolean
    departmentId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "nameEn" | "password" | "image" | "bio" | "mainColor" | "snsIconColor" | "bioBackgroundColor" | "bioTextColor" | "phone" | "company" | "companyUrl" | "companyLabel" | "emailVerified" | "stripeCustomerId" | "trialEndsAt" | "subscriptionStatus" | "corporateRole" | "position" | "departmentId" | "tenantId" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    passwordResetTokens?: boolean | User$passwordResetTokensArgs<ExtArgs>
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    customLinks?: boolean | User$customLinksArgs<ExtArgs>
    snsLinks?: boolean | User$snsLinksArgs<ExtArgs>
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    billingHistory?: boolean | User$billingHistoryArgs<ExtArgs>
    department?: boolean | User$departmentArgs<ExtArgs>
    tenant?: boolean | User$tenantArgs<ExtArgs>
    adminOfTenant?: boolean | User$adminOfTenantArgs<ExtArgs>
    contacts?: boolean | User$contactsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | User$departmentArgs<ExtArgs>
    tenant?: boolean | User$tenantArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | User$departmentArgs<ExtArgs>
    tenant?: boolean | User$tenantArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      passwordResetTokens: Prisma.$PasswordResetTokenPayload<ExtArgs>[]
      activityLogs: Prisma.$CorporateActivityLogPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      customLinks: Prisma.$CustomLinkPayload<ExtArgs>[]
      snsLinks: Prisma.$SnsLinkPayload<ExtArgs>[]
      subscription: Prisma.$SubscriptionPayload<ExtArgs> | null
      billingHistory: Prisma.$BillingRecordPayload<ExtArgs>[]
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      tenant: Prisma.$CorporateTenantPayload<ExtArgs> | null
      adminOfTenant: Prisma.$CorporateTenantPayload<ExtArgs> | null
      contacts: Prisma.$ContactPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      nameEn: string | null
      password: string | null
      image: string | null
      bio: string | null
      mainColor: string
      snsIconColor: string | null
      bioBackgroundColor: string | null
      bioTextColor: string | null
      phone: string | null
      company: string | null
      companyUrl: string | null
      companyLabel: string | null
      emailVerified: Date | null
      stripeCustomerId: string | null
      trialEndsAt: Date | null
      subscriptionStatus: string | null
      corporateRole: string | null
      position: string | null
      departmentId: string | null
      tenantId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    passwordResetTokens<T extends User$passwordResetTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$passwordResetTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    activityLogs<T extends User$activityLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    customLinks<T extends User$customLinksArgs<ExtArgs> = {}>(args?: Subset<T, User$customLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    snsLinks<T extends User$snsLinksArgs<ExtArgs> = {}>(args?: Subset<T, User$snsLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    subscription<T extends User$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    billingHistory<T extends User$billingHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$billingHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    department<T extends User$departmentArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    tenant<T extends User$tenantArgs<ExtArgs> = {}>(args?: Subset<T, User$tenantArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    adminOfTenant<T extends User$adminOfTenantArgs<ExtArgs> = {}>(args?: Subset<T, User$adminOfTenantArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    contacts<T extends User$contactsArgs<ExtArgs> = {}>(args?: Subset<T, User$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly nameEn: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly mainColor: FieldRef<"User", 'String'>
    readonly snsIconColor: FieldRef<"User", 'String'>
    readonly bioBackgroundColor: FieldRef<"User", 'String'>
    readonly bioTextColor: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly company: FieldRef<"User", 'String'>
    readonly companyUrl: FieldRef<"User", 'String'>
    readonly companyLabel: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly stripeCustomerId: FieldRef<"User", 'String'>
    readonly trialEndsAt: FieldRef<"User", 'DateTime'>
    readonly subscriptionStatus: FieldRef<"User", 'String'>
    readonly corporateRole: FieldRef<"User", 'String'>
    readonly position: FieldRef<"User", 'String'>
    readonly departmentId: FieldRef<"User", 'String'>
    readonly tenantId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.passwordResetTokens
   */
  export type User$passwordResetTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    cursor?: PasswordResetTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * User.activityLogs
   */
  export type User$activityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
    where?: CorporateActivityLogWhereInput
    orderBy?: CorporateActivityLogOrderByWithRelationInput | CorporateActivityLogOrderByWithRelationInput[]
    cursor?: CorporateActivityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CorporateActivityLogScalarFieldEnum | CorporateActivityLogScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * User.customLinks
   */
  export type User$customLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkInclude<ExtArgs> | null
    where?: CustomLinkWhereInput
    orderBy?: CustomLinkOrderByWithRelationInput | CustomLinkOrderByWithRelationInput[]
    cursor?: CustomLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomLinkScalarFieldEnum | CustomLinkScalarFieldEnum[]
  }

  /**
   * User.snsLinks
   */
  export type User$snsLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkInclude<ExtArgs> | null
    where?: SnsLinkWhereInput
    orderBy?: SnsLinkOrderByWithRelationInput | SnsLinkOrderByWithRelationInput[]
    cursor?: SnsLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SnsLinkScalarFieldEnum | SnsLinkScalarFieldEnum[]
  }

  /**
   * User.subscription
   */
  export type User$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
  }

  /**
   * User.billingHistory
   */
  export type User$billingHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    where?: BillingRecordWhereInput
    orderBy?: BillingRecordOrderByWithRelationInput | BillingRecordOrderByWithRelationInput[]
    cursor?: BillingRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingRecordScalarFieldEnum | BillingRecordScalarFieldEnum[]
  }

  /**
   * User.department
   */
  export type User$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * User.tenant
   */
  export type User$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    where?: CorporateTenantWhereInput
  }

  /**
   * User.adminOfTenant
   */
  export type User$adminOfTenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    where?: CorporateTenantWhereInput
  }

  /**
   * User.contacts
   */
  export type User$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    views: number | null
  }

  export type ProfileSumAggregateOutputType = {
    views: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    slug: string | null
    views: number | null
    isPublic: boolean | null
    lastAccessed: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    slug: string | null
    views: number | null
    isPublic: boolean | null
    lastAccessed: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    userId: number
    slug: number
    views: number
    isPublic: number
    lastAccessed: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    views?: true
  }

  export type ProfileSumAggregateInputType = {
    views?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    userId?: true
    slug?: true
    views?: true
    isPublic?: true
    lastAccessed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    slug?: true
    views?: true
    isPublic?: true
    lastAccessed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    userId?: true
    slug?: true
    views?: true
    isPublic?: true
    lastAccessed?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    userId: string
    slug: string
    views: number
    isPublic: boolean
    lastAccessed: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    slug?: boolean
    views?: boolean
    isPublic?: boolean
    lastAccessed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    slug?: boolean
    views?: boolean
    isPublic?: boolean
    lastAccessed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    slug?: boolean
    views?: boolean
    isPublic?: boolean
    lastAccessed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    slug?: boolean
    views?: boolean
    isPublic?: boolean
    lastAccessed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "slug" | "views" | "isPublic" | "lastAccessed" | "createdAt" | "updatedAt", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      slug: string
      views: number
      isPublic: boolean
      lastAccessed: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly userId: FieldRef<"Profile", 'String'>
    readonly slug: FieldRef<"Profile", 'String'>
    readonly views: FieldRef<"Profile", 'Int'>
    readonly isPublic: FieldRef<"Profile", 'Boolean'>
    readonly lastAccessed: FieldRef<"Profile", 'DateTime'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model SnsLink
   */

  export type AggregateSnsLink = {
    _count: SnsLinkCountAggregateOutputType | null
    _avg: SnsLinkAvgAggregateOutputType | null
    _sum: SnsLinkSumAggregateOutputType | null
    _min: SnsLinkMinAggregateOutputType | null
    _max: SnsLinkMaxAggregateOutputType | null
  }

  export type SnsLinkAvgAggregateOutputType = {
    displayOrder: number | null
  }

  export type SnsLinkSumAggregateOutputType = {
    displayOrder: number | null
  }

  export type SnsLinkMinAggregateOutputType = {
    id: string | null
    userId: string | null
    platform: string | null
    username: string | null
    url: string | null
    displayOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SnsLinkMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    platform: string | null
    username: string | null
    url: string | null
    displayOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SnsLinkCountAggregateOutputType = {
    id: number
    userId: number
    platform: number
    username: number
    url: number
    displayOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SnsLinkAvgAggregateInputType = {
    displayOrder?: true
  }

  export type SnsLinkSumAggregateInputType = {
    displayOrder?: true
  }

  export type SnsLinkMinAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    username?: true
    url?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SnsLinkMaxAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    username?: true
    url?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SnsLinkCountAggregateInputType = {
    id?: true
    userId?: true
    platform?: true
    username?: true
    url?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SnsLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SnsLink to aggregate.
     */
    where?: SnsLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SnsLinks to fetch.
     */
    orderBy?: SnsLinkOrderByWithRelationInput | SnsLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SnsLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SnsLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SnsLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SnsLinks
    **/
    _count?: true | SnsLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SnsLinkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SnsLinkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SnsLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SnsLinkMaxAggregateInputType
  }

  export type GetSnsLinkAggregateType<T extends SnsLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateSnsLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSnsLink[P]>
      : GetScalarType<T[P], AggregateSnsLink[P]>
  }




  export type SnsLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SnsLinkWhereInput
    orderBy?: SnsLinkOrderByWithAggregationInput | SnsLinkOrderByWithAggregationInput[]
    by: SnsLinkScalarFieldEnum[] | SnsLinkScalarFieldEnum
    having?: SnsLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SnsLinkCountAggregateInputType | true
    _avg?: SnsLinkAvgAggregateInputType
    _sum?: SnsLinkSumAggregateInputType
    _min?: SnsLinkMinAggregateInputType
    _max?: SnsLinkMaxAggregateInputType
  }

  export type SnsLinkGroupByOutputType = {
    id: string
    userId: string
    platform: string
    username: string | null
    url: string
    displayOrder: number
    createdAt: Date
    updatedAt: Date
    _count: SnsLinkCountAggregateOutputType | null
    _avg: SnsLinkAvgAggregateOutputType | null
    _sum: SnsLinkSumAggregateOutputType | null
    _min: SnsLinkMinAggregateOutputType | null
    _max: SnsLinkMaxAggregateOutputType | null
  }

  type GetSnsLinkGroupByPayload<T extends SnsLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SnsLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SnsLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SnsLinkGroupByOutputType[P]>
            : GetScalarType<T[P], SnsLinkGroupByOutputType[P]>
        }
      >
    >


  export type SnsLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    platform?: boolean
    username?: boolean
    url?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["snsLink"]>

  export type SnsLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    platform?: boolean
    username?: boolean
    url?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["snsLink"]>

  export type SnsLinkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    platform?: boolean
    username?: boolean
    url?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["snsLink"]>

  export type SnsLinkSelectScalar = {
    id?: boolean
    userId?: boolean
    platform?: boolean
    username?: boolean
    url?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SnsLinkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "platform" | "username" | "url" | "displayOrder" | "createdAt" | "updatedAt", ExtArgs["result"]["snsLink"]>
  export type SnsLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SnsLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SnsLinkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SnsLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SnsLink"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      platform: string
      username: string | null
      url: string
      displayOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["snsLink"]>
    composites: {}
  }

  type SnsLinkGetPayload<S extends boolean | null | undefined | SnsLinkDefaultArgs> = $Result.GetResult<Prisma.$SnsLinkPayload, S>

  type SnsLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SnsLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SnsLinkCountAggregateInputType | true
    }

  export interface SnsLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SnsLink'], meta: { name: 'SnsLink' } }
    /**
     * Find zero or one SnsLink that matches the filter.
     * @param {SnsLinkFindUniqueArgs} args - Arguments to find a SnsLink
     * @example
     * // Get one SnsLink
     * const snsLink = await prisma.snsLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SnsLinkFindUniqueArgs>(args: SelectSubset<T, SnsLinkFindUniqueArgs<ExtArgs>>): Prisma__SnsLinkClient<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one SnsLink that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SnsLinkFindUniqueOrThrowArgs} args - Arguments to find a SnsLink
     * @example
     * // Get one SnsLink
     * const snsLink = await prisma.snsLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SnsLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, SnsLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SnsLinkClient<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first SnsLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SnsLinkFindFirstArgs} args - Arguments to find a SnsLink
     * @example
     * // Get one SnsLink
     * const snsLink = await prisma.snsLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SnsLinkFindFirstArgs>(args?: SelectSubset<T, SnsLinkFindFirstArgs<ExtArgs>>): Prisma__SnsLinkClient<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first SnsLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SnsLinkFindFirstOrThrowArgs} args - Arguments to find a SnsLink
     * @example
     * // Get one SnsLink
     * const snsLink = await prisma.snsLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SnsLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, SnsLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__SnsLinkClient<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more SnsLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SnsLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SnsLinks
     * const snsLinks = await prisma.snsLink.findMany()
     * 
     * // Get first 10 SnsLinks
     * const snsLinks = await prisma.snsLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const snsLinkWithIdOnly = await prisma.snsLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SnsLinkFindManyArgs>(args?: SelectSubset<T, SnsLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a SnsLink.
     * @param {SnsLinkCreateArgs} args - Arguments to create a SnsLink.
     * @example
     * // Create one SnsLink
     * const SnsLink = await prisma.snsLink.create({
     *   data: {
     *     // ... data to create a SnsLink
     *   }
     * })
     * 
     */
    create<T extends SnsLinkCreateArgs>(args: SelectSubset<T, SnsLinkCreateArgs<ExtArgs>>): Prisma__SnsLinkClient<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many SnsLinks.
     * @param {SnsLinkCreateManyArgs} args - Arguments to create many SnsLinks.
     * @example
     * // Create many SnsLinks
     * const snsLink = await prisma.snsLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SnsLinkCreateManyArgs>(args?: SelectSubset<T, SnsLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SnsLinks and returns the data saved in the database.
     * @param {SnsLinkCreateManyAndReturnArgs} args - Arguments to create many SnsLinks.
     * @example
     * // Create many SnsLinks
     * const snsLink = await prisma.snsLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SnsLinks and only return the `id`
     * const snsLinkWithIdOnly = await prisma.snsLink.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SnsLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, SnsLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a SnsLink.
     * @param {SnsLinkDeleteArgs} args - Arguments to delete one SnsLink.
     * @example
     * // Delete one SnsLink
     * const SnsLink = await prisma.snsLink.delete({
     *   where: {
     *     // ... filter to delete one SnsLink
     *   }
     * })
     * 
     */
    delete<T extends SnsLinkDeleteArgs>(args: SelectSubset<T, SnsLinkDeleteArgs<ExtArgs>>): Prisma__SnsLinkClient<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one SnsLink.
     * @param {SnsLinkUpdateArgs} args - Arguments to update one SnsLink.
     * @example
     * // Update one SnsLink
     * const snsLink = await prisma.snsLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SnsLinkUpdateArgs>(args: SelectSubset<T, SnsLinkUpdateArgs<ExtArgs>>): Prisma__SnsLinkClient<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more SnsLinks.
     * @param {SnsLinkDeleteManyArgs} args - Arguments to filter SnsLinks to delete.
     * @example
     * // Delete a few SnsLinks
     * const { count } = await prisma.snsLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SnsLinkDeleteManyArgs>(args?: SelectSubset<T, SnsLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SnsLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SnsLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SnsLinks
     * const snsLink = await prisma.snsLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SnsLinkUpdateManyArgs>(args: SelectSubset<T, SnsLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SnsLinks and returns the data updated in the database.
     * @param {SnsLinkUpdateManyAndReturnArgs} args - Arguments to update many SnsLinks.
     * @example
     * // Update many SnsLinks
     * const snsLink = await prisma.snsLink.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SnsLinks and only return the `id`
     * const snsLinkWithIdOnly = await prisma.snsLink.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SnsLinkUpdateManyAndReturnArgs>(args: SelectSubset<T, SnsLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one SnsLink.
     * @param {SnsLinkUpsertArgs} args - Arguments to update or create a SnsLink.
     * @example
     * // Update or create a SnsLink
     * const snsLink = await prisma.snsLink.upsert({
     *   create: {
     *     // ... data to create a SnsLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SnsLink we want to update
     *   }
     * })
     */
    upsert<T extends SnsLinkUpsertArgs>(args: SelectSubset<T, SnsLinkUpsertArgs<ExtArgs>>): Prisma__SnsLinkClient<$Result.GetResult<Prisma.$SnsLinkPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of SnsLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SnsLinkCountArgs} args - Arguments to filter SnsLinks to count.
     * @example
     * // Count the number of SnsLinks
     * const count = await prisma.snsLink.count({
     *   where: {
     *     // ... the filter for the SnsLinks we want to count
     *   }
     * })
    **/
    count<T extends SnsLinkCountArgs>(
      args?: Subset<T, SnsLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SnsLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SnsLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SnsLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SnsLinkAggregateArgs>(args: Subset<T, SnsLinkAggregateArgs>): Prisma.PrismaPromise<GetSnsLinkAggregateType<T>>

    /**
     * Group by SnsLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SnsLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SnsLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SnsLinkGroupByArgs['orderBy'] }
        : { orderBy?: SnsLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SnsLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSnsLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SnsLink model
   */
  readonly fields: SnsLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SnsLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SnsLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SnsLink model
   */ 
  interface SnsLinkFieldRefs {
    readonly id: FieldRef<"SnsLink", 'String'>
    readonly userId: FieldRef<"SnsLink", 'String'>
    readonly platform: FieldRef<"SnsLink", 'String'>
    readonly username: FieldRef<"SnsLink", 'String'>
    readonly url: FieldRef<"SnsLink", 'String'>
    readonly displayOrder: FieldRef<"SnsLink", 'Int'>
    readonly createdAt: FieldRef<"SnsLink", 'DateTime'>
    readonly updatedAt: FieldRef<"SnsLink", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SnsLink findUnique
   */
  export type SnsLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkInclude<ExtArgs> | null
    /**
     * Filter, which SnsLink to fetch.
     */
    where: SnsLinkWhereUniqueInput
  }

  /**
   * SnsLink findUniqueOrThrow
   */
  export type SnsLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkInclude<ExtArgs> | null
    /**
     * Filter, which SnsLink to fetch.
     */
    where: SnsLinkWhereUniqueInput
  }

  /**
   * SnsLink findFirst
   */
  export type SnsLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkInclude<ExtArgs> | null
    /**
     * Filter, which SnsLink to fetch.
     */
    where?: SnsLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SnsLinks to fetch.
     */
    orderBy?: SnsLinkOrderByWithRelationInput | SnsLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SnsLinks.
     */
    cursor?: SnsLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SnsLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SnsLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SnsLinks.
     */
    distinct?: SnsLinkScalarFieldEnum | SnsLinkScalarFieldEnum[]
  }

  /**
   * SnsLink findFirstOrThrow
   */
  export type SnsLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkInclude<ExtArgs> | null
    /**
     * Filter, which SnsLink to fetch.
     */
    where?: SnsLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SnsLinks to fetch.
     */
    orderBy?: SnsLinkOrderByWithRelationInput | SnsLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SnsLinks.
     */
    cursor?: SnsLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SnsLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SnsLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SnsLinks.
     */
    distinct?: SnsLinkScalarFieldEnum | SnsLinkScalarFieldEnum[]
  }

  /**
   * SnsLink findMany
   */
  export type SnsLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkInclude<ExtArgs> | null
    /**
     * Filter, which SnsLinks to fetch.
     */
    where?: SnsLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SnsLinks to fetch.
     */
    orderBy?: SnsLinkOrderByWithRelationInput | SnsLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SnsLinks.
     */
    cursor?: SnsLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SnsLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SnsLinks.
     */
    skip?: number
    distinct?: SnsLinkScalarFieldEnum | SnsLinkScalarFieldEnum[]
  }

  /**
   * SnsLink create
   */
  export type SnsLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a SnsLink.
     */
    data: XOR<SnsLinkCreateInput, SnsLinkUncheckedCreateInput>
  }

  /**
   * SnsLink createMany
   */
  export type SnsLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SnsLinks.
     */
    data: SnsLinkCreateManyInput | SnsLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SnsLink createManyAndReturn
   */
  export type SnsLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * The data used to create many SnsLinks.
     */
    data: SnsLinkCreateManyInput | SnsLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SnsLink update
   */
  export type SnsLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a SnsLink.
     */
    data: XOR<SnsLinkUpdateInput, SnsLinkUncheckedUpdateInput>
    /**
     * Choose, which SnsLink to update.
     */
    where: SnsLinkWhereUniqueInput
  }

  /**
   * SnsLink updateMany
   */
  export type SnsLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SnsLinks.
     */
    data: XOR<SnsLinkUpdateManyMutationInput, SnsLinkUncheckedUpdateManyInput>
    /**
     * Filter which SnsLinks to update
     */
    where?: SnsLinkWhereInput
    /**
     * Limit how many SnsLinks to update.
     */
    limit?: number
  }

  /**
   * SnsLink updateManyAndReturn
   */
  export type SnsLinkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * The data used to update SnsLinks.
     */
    data: XOR<SnsLinkUpdateManyMutationInput, SnsLinkUncheckedUpdateManyInput>
    /**
     * Filter which SnsLinks to update
     */
    where?: SnsLinkWhereInput
    /**
     * Limit how many SnsLinks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SnsLink upsert
   */
  export type SnsLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the SnsLink to update in case it exists.
     */
    where: SnsLinkWhereUniqueInput
    /**
     * In case the SnsLink found by the `where` argument doesn't exist, create a new SnsLink with this data.
     */
    create: XOR<SnsLinkCreateInput, SnsLinkUncheckedCreateInput>
    /**
     * In case the SnsLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SnsLinkUpdateInput, SnsLinkUncheckedUpdateInput>
  }

  /**
   * SnsLink delete
   */
  export type SnsLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkInclude<ExtArgs> | null
    /**
     * Filter which SnsLink to delete.
     */
    where: SnsLinkWhereUniqueInput
  }

  /**
   * SnsLink deleteMany
   */
  export type SnsLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SnsLinks to delete
     */
    where?: SnsLinkWhereInput
    /**
     * Limit how many SnsLinks to delete.
     */
    limit?: number
  }

  /**
   * SnsLink without action
   */
  export type SnsLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SnsLink
     */
    select?: SnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SnsLink
     */
    omit?: SnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SnsLinkInclude<ExtArgs> | null
  }


  /**
   * Model CustomLink
   */

  export type AggregateCustomLink = {
    _count: CustomLinkCountAggregateOutputType | null
    _avg: CustomLinkAvgAggregateOutputType | null
    _sum: CustomLinkSumAggregateOutputType | null
    _min: CustomLinkMinAggregateOutputType | null
    _max: CustomLinkMaxAggregateOutputType | null
  }

  export type CustomLinkAvgAggregateOutputType = {
    displayOrder: number | null
  }

  export type CustomLinkSumAggregateOutputType = {
    displayOrder: number | null
  }

  export type CustomLinkMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    url: string | null
    displayOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomLinkMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    url: string | null
    displayOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomLinkCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    url: number
    displayOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomLinkAvgAggregateInputType = {
    displayOrder?: true
  }

  export type CustomLinkSumAggregateInputType = {
    displayOrder?: true
  }

  export type CustomLinkMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    url?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomLinkMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    url?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomLinkCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    url?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomLink to aggregate.
     */
    where?: CustomLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomLinks to fetch.
     */
    orderBy?: CustomLinkOrderByWithRelationInput | CustomLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomLinks
    **/
    _count?: true | CustomLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomLinkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomLinkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomLinkMaxAggregateInputType
  }

  export type GetCustomLinkAggregateType<T extends CustomLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomLink[P]>
      : GetScalarType<T[P], AggregateCustomLink[P]>
  }




  export type CustomLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomLinkWhereInput
    orderBy?: CustomLinkOrderByWithAggregationInput | CustomLinkOrderByWithAggregationInput[]
    by: CustomLinkScalarFieldEnum[] | CustomLinkScalarFieldEnum
    having?: CustomLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomLinkCountAggregateInputType | true
    _avg?: CustomLinkAvgAggregateInputType
    _sum?: CustomLinkSumAggregateInputType
    _min?: CustomLinkMinAggregateInputType
    _max?: CustomLinkMaxAggregateInputType
  }

  export type CustomLinkGroupByOutputType = {
    id: string
    userId: string
    name: string
    url: string
    displayOrder: number
    createdAt: Date
    updatedAt: Date
    _count: CustomLinkCountAggregateOutputType | null
    _avg: CustomLinkAvgAggregateOutputType | null
    _sum: CustomLinkSumAggregateOutputType | null
    _min: CustomLinkMinAggregateOutputType | null
    _max: CustomLinkMaxAggregateOutputType | null
  }

  type GetCustomLinkGroupByPayload<T extends CustomLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomLinkGroupByOutputType[P]>
            : GetScalarType<T[P], CustomLinkGroupByOutputType[P]>
        }
      >
    >


  export type CustomLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    url?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customLink"]>

  export type CustomLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    url?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customLink"]>

  export type CustomLinkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    url?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customLink"]>

  export type CustomLinkSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    url?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomLinkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "url" | "displayOrder" | "createdAt" | "updatedAt", ExtArgs["result"]["customLink"]>
  export type CustomLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CustomLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CustomLinkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CustomLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomLink"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      url: string
      displayOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customLink"]>
    composites: {}
  }

  type CustomLinkGetPayload<S extends boolean | null | undefined | CustomLinkDefaultArgs> = $Result.GetResult<Prisma.$CustomLinkPayload, S>

  type CustomLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomLinkCountAggregateInputType | true
    }

  export interface CustomLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomLink'], meta: { name: 'CustomLink' } }
    /**
     * Find zero or one CustomLink that matches the filter.
     * @param {CustomLinkFindUniqueArgs} args - Arguments to find a CustomLink
     * @example
     * // Get one CustomLink
     * const customLink = await prisma.customLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomLinkFindUniqueArgs>(args: SelectSubset<T, CustomLinkFindUniqueArgs<ExtArgs>>): Prisma__CustomLinkClient<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CustomLink that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomLinkFindUniqueOrThrowArgs} args - Arguments to find a CustomLink
     * @example
     * // Get one CustomLink
     * const customLink = await prisma.customLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomLinkClient<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CustomLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomLinkFindFirstArgs} args - Arguments to find a CustomLink
     * @example
     * // Get one CustomLink
     * const customLink = await prisma.customLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomLinkFindFirstArgs>(args?: SelectSubset<T, CustomLinkFindFirstArgs<ExtArgs>>): Prisma__CustomLinkClient<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CustomLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomLinkFindFirstOrThrowArgs} args - Arguments to find a CustomLink
     * @example
     * // Get one CustomLink
     * const customLink = await prisma.customLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomLinkClient<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CustomLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomLinks
     * const customLinks = await prisma.customLink.findMany()
     * 
     * // Get first 10 CustomLinks
     * const customLinks = await prisma.customLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customLinkWithIdOnly = await prisma.customLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomLinkFindManyArgs>(args?: SelectSubset<T, CustomLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CustomLink.
     * @param {CustomLinkCreateArgs} args - Arguments to create a CustomLink.
     * @example
     * // Create one CustomLink
     * const CustomLink = await prisma.customLink.create({
     *   data: {
     *     // ... data to create a CustomLink
     *   }
     * })
     * 
     */
    create<T extends CustomLinkCreateArgs>(args: SelectSubset<T, CustomLinkCreateArgs<ExtArgs>>): Prisma__CustomLinkClient<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CustomLinks.
     * @param {CustomLinkCreateManyArgs} args - Arguments to create many CustomLinks.
     * @example
     * // Create many CustomLinks
     * const customLink = await prisma.customLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomLinkCreateManyArgs>(args?: SelectSubset<T, CustomLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomLinks and returns the data saved in the database.
     * @param {CustomLinkCreateManyAndReturnArgs} args - Arguments to create many CustomLinks.
     * @example
     * // Create many CustomLinks
     * const customLink = await prisma.customLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomLinks and only return the `id`
     * const customLinkWithIdOnly = await prisma.customLink.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CustomLink.
     * @param {CustomLinkDeleteArgs} args - Arguments to delete one CustomLink.
     * @example
     * // Delete one CustomLink
     * const CustomLink = await prisma.customLink.delete({
     *   where: {
     *     // ... filter to delete one CustomLink
     *   }
     * })
     * 
     */
    delete<T extends CustomLinkDeleteArgs>(args: SelectSubset<T, CustomLinkDeleteArgs<ExtArgs>>): Prisma__CustomLinkClient<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CustomLink.
     * @param {CustomLinkUpdateArgs} args - Arguments to update one CustomLink.
     * @example
     * // Update one CustomLink
     * const customLink = await prisma.customLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomLinkUpdateArgs>(args: SelectSubset<T, CustomLinkUpdateArgs<ExtArgs>>): Prisma__CustomLinkClient<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CustomLinks.
     * @param {CustomLinkDeleteManyArgs} args - Arguments to filter CustomLinks to delete.
     * @example
     * // Delete a few CustomLinks
     * const { count } = await prisma.customLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomLinkDeleteManyArgs>(args?: SelectSubset<T, CustomLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomLinks
     * const customLink = await prisma.customLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomLinkUpdateManyArgs>(args: SelectSubset<T, CustomLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomLinks and returns the data updated in the database.
     * @param {CustomLinkUpdateManyAndReturnArgs} args - Arguments to update many CustomLinks.
     * @example
     * // Update many CustomLinks
     * const customLink = await prisma.customLink.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomLinks and only return the `id`
     * const customLinkWithIdOnly = await prisma.customLink.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomLinkUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CustomLink.
     * @param {CustomLinkUpsertArgs} args - Arguments to update or create a CustomLink.
     * @example
     * // Update or create a CustomLink
     * const customLink = await prisma.customLink.upsert({
     *   create: {
     *     // ... data to create a CustomLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomLink we want to update
     *   }
     * })
     */
    upsert<T extends CustomLinkUpsertArgs>(args: SelectSubset<T, CustomLinkUpsertArgs<ExtArgs>>): Prisma__CustomLinkClient<$Result.GetResult<Prisma.$CustomLinkPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CustomLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomLinkCountArgs} args - Arguments to filter CustomLinks to count.
     * @example
     * // Count the number of CustomLinks
     * const count = await prisma.customLink.count({
     *   where: {
     *     // ... the filter for the CustomLinks we want to count
     *   }
     * })
    **/
    count<T extends CustomLinkCountArgs>(
      args?: Subset<T, CustomLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomLinkAggregateArgs>(args: Subset<T, CustomLinkAggregateArgs>): Prisma.PrismaPromise<GetCustomLinkAggregateType<T>>

    /**
     * Group by CustomLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomLinkGroupByArgs['orderBy'] }
        : { orderBy?: CustomLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomLink model
   */
  readonly fields: CustomLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomLink model
   */ 
  interface CustomLinkFieldRefs {
    readonly id: FieldRef<"CustomLink", 'String'>
    readonly userId: FieldRef<"CustomLink", 'String'>
    readonly name: FieldRef<"CustomLink", 'String'>
    readonly url: FieldRef<"CustomLink", 'String'>
    readonly displayOrder: FieldRef<"CustomLink", 'Int'>
    readonly createdAt: FieldRef<"CustomLink", 'DateTime'>
    readonly updatedAt: FieldRef<"CustomLink", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomLink findUnique
   */
  export type CustomLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkInclude<ExtArgs> | null
    /**
     * Filter, which CustomLink to fetch.
     */
    where: CustomLinkWhereUniqueInput
  }

  /**
   * CustomLink findUniqueOrThrow
   */
  export type CustomLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkInclude<ExtArgs> | null
    /**
     * Filter, which CustomLink to fetch.
     */
    where: CustomLinkWhereUniqueInput
  }

  /**
   * CustomLink findFirst
   */
  export type CustomLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkInclude<ExtArgs> | null
    /**
     * Filter, which CustomLink to fetch.
     */
    where?: CustomLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomLinks to fetch.
     */
    orderBy?: CustomLinkOrderByWithRelationInput | CustomLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomLinks.
     */
    cursor?: CustomLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomLinks.
     */
    distinct?: CustomLinkScalarFieldEnum | CustomLinkScalarFieldEnum[]
  }

  /**
   * CustomLink findFirstOrThrow
   */
  export type CustomLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkInclude<ExtArgs> | null
    /**
     * Filter, which CustomLink to fetch.
     */
    where?: CustomLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomLinks to fetch.
     */
    orderBy?: CustomLinkOrderByWithRelationInput | CustomLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomLinks.
     */
    cursor?: CustomLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomLinks.
     */
    distinct?: CustomLinkScalarFieldEnum | CustomLinkScalarFieldEnum[]
  }

  /**
   * CustomLink findMany
   */
  export type CustomLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkInclude<ExtArgs> | null
    /**
     * Filter, which CustomLinks to fetch.
     */
    where?: CustomLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomLinks to fetch.
     */
    orderBy?: CustomLinkOrderByWithRelationInput | CustomLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomLinks.
     */
    cursor?: CustomLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomLinks.
     */
    skip?: number
    distinct?: CustomLinkScalarFieldEnum | CustomLinkScalarFieldEnum[]
  }

  /**
   * CustomLink create
   */
  export type CustomLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomLink.
     */
    data: XOR<CustomLinkCreateInput, CustomLinkUncheckedCreateInput>
  }

  /**
   * CustomLink createMany
   */
  export type CustomLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomLinks.
     */
    data: CustomLinkCreateManyInput | CustomLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomLink createManyAndReturn
   */
  export type CustomLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * The data used to create many CustomLinks.
     */
    data: CustomLinkCreateManyInput | CustomLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomLink update
   */
  export type CustomLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomLink.
     */
    data: XOR<CustomLinkUpdateInput, CustomLinkUncheckedUpdateInput>
    /**
     * Choose, which CustomLink to update.
     */
    where: CustomLinkWhereUniqueInput
  }

  /**
   * CustomLink updateMany
   */
  export type CustomLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomLinks.
     */
    data: XOR<CustomLinkUpdateManyMutationInput, CustomLinkUncheckedUpdateManyInput>
    /**
     * Filter which CustomLinks to update
     */
    where?: CustomLinkWhereInput
    /**
     * Limit how many CustomLinks to update.
     */
    limit?: number
  }

  /**
   * CustomLink updateManyAndReturn
   */
  export type CustomLinkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * The data used to update CustomLinks.
     */
    data: XOR<CustomLinkUpdateManyMutationInput, CustomLinkUncheckedUpdateManyInput>
    /**
     * Filter which CustomLinks to update
     */
    where?: CustomLinkWhereInput
    /**
     * Limit how many CustomLinks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomLink upsert
   */
  export type CustomLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomLink to update in case it exists.
     */
    where: CustomLinkWhereUniqueInput
    /**
     * In case the CustomLink found by the `where` argument doesn't exist, create a new CustomLink with this data.
     */
    create: XOR<CustomLinkCreateInput, CustomLinkUncheckedCreateInput>
    /**
     * In case the CustomLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomLinkUpdateInput, CustomLinkUncheckedUpdateInput>
  }

  /**
   * CustomLink delete
   */
  export type CustomLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkInclude<ExtArgs> | null
    /**
     * Filter which CustomLink to delete.
     */
    where: CustomLinkWhereUniqueInput
  }

  /**
   * CustomLink deleteMany
   */
  export type CustomLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomLinks to delete
     */
    where?: CustomLinkWhereInput
    /**
     * Limit how many CustomLinks to delete.
     */
    limit?: number
  }

  /**
   * CustomLink without action
   */
  export type CustomLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomLink
     */
    select?: CustomLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomLink
     */
    omit?: CustomLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomLinkInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string | null
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    status: string | null
    plan: string | null
    priceId: string | null
    subscriptionId: string | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    cancelAtPeriodEnd: boolean | null
    trialStart: Date | null
    trialEnd: Date | null
    canceledAt: Date | null
    cancelReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    status: string | null
    plan: string | null
    priceId: string | null
    subscriptionId: string | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    cancelAtPeriodEnd: boolean | null
    trialStart: Date | null
    trialEnd: Date | null
    canceledAt: Date | null
    cancelReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    userId: number
    status: number
    plan: number
    priceId: number
    subscriptionId: number
    currentPeriodStart: number
    currentPeriodEnd: number
    cancelAtPeriodEnd: number
    trialStart: number
    trialEnd: number
    canceledAt: number
    cancelReason: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    id?: true
    userId?: true
    status?: true
    plan?: true
    priceId?: true
    subscriptionId?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    cancelAtPeriodEnd?: true
    trialStart?: true
    trialEnd?: true
    canceledAt?: true
    cancelReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    userId?: true
    status?: true
    plan?: true
    priceId?: true
    subscriptionId?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    cancelAtPeriodEnd?: true
    trialStart?: true
    trialEnd?: true
    canceledAt?: true
    cancelReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    userId?: true
    status?: true
    plan?: true
    priceId?: true
    subscriptionId?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    cancelAtPeriodEnd?: true
    trialStart?: true
    trialEnd?: true
    canceledAt?: true
    cancelReason?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    userId: string
    status: string
    plan: string
    priceId: string | null
    subscriptionId: string | null
    currentPeriodStart: Date
    currentPeriodEnd: Date
    cancelAtPeriodEnd: boolean
    trialStart: Date | null
    trialEnd: Date | null
    canceledAt: Date | null
    cancelReason: string | null
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    status?: boolean
    plan?: boolean
    priceId?: boolean
    subscriptionId?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    canceledAt?: boolean
    cancelReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    corporateTenant?: boolean | Subscription$corporateTenantArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    status?: boolean
    plan?: boolean
    priceId?: boolean
    subscriptionId?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    canceledAt?: boolean
    cancelReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    status?: boolean
    plan?: boolean
    priceId?: boolean
    subscriptionId?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    canceledAt?: boolean
    cancelReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    userId?: boolean
    status?: boolean
    plan?: boolean
    priceId?: boolean
    subscriptionId?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    canceledAt?: boolean
    cancelReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "status" | "plan" | "priceId" | "subscriptionId" | "currentPeriodStart" | "currentPeriodEnd" | "cancelAtPeriodEnd" | "trialStart" | "trialEnd" | "canceledAt" | "cancelReason" | "createdAt" | "updatedAt", ExtArgs["result"]["subscription"]>
  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    corporateTenant?: boolean | Subscription$corporateTenantArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      corporateTenant: Prisma.$CorporateTenantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      status: string
      plan: string
      priceId: string | null
      subscriptionId: string | null
      currentPeriodStart: Date
      currentPeriodEnd: Date
      cancelAtPeriodEnd: boolean
      trialStart: Date | null
      trialEnd: Date | null
      canceledAt: Date | null
      cancelReason: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions and returns the data updated in the database.
     * @param {SubscriptionUpdateManyAndReturnArgs} args - Arguments to update many Subscriptions.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    corporateTenant<T extends Subscription$corporateTenantArgs<ExtArgs> = {}>(args?: Subset<T, Subscription$corporateTenantArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */ 
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly userId: FieldRef<"Subscription", 'String'>
    readonly status: FieldRef<"Subscription", 'String'>
    readonly plan: FieldRef<"Subscription", 'String'>
    readonly priceId: FieldRef<"Subscription", 'String'>
    readonly subscriptionId: FieldRef<"Subscription", 'String'>
    readonly currentPeriodStart: FieldRef<"Subscription", 'DateTime'>
    readonly currentPeriodEnd: FieldRef<"Subscription", 'DateTime'>
    readonly cancelAtPeriodEnd: FieldRef<"Subscription", 'Boolean'>
    readonly trialStart: FieldRef<"Subscription", 'DateTime'>
    readonly trialEnd: FieldRef<"Subscription", 'DateTime'>
    readonly canceledAt: FieldRef<"Subscription", 'DateTime'>
    readonly cancelReason: FieldRef<"Subscription", 'String'>
    readonly createdAt: FieldRef<"Subscription", 'DateTime'>
    readonly updatedAt: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
  }

  /**
   * Subscription updateManyAndReturn
   */
  export type SubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to delete.
     */
    limit?: number
  }

  /**
   * Subscription.corporateTenant
   */
  export type Subscription$corporateTenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    where?: CorporateTenantWhereInput
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model BillingRecord
   */

  export type AggregateBillingRecord = {
    _count: BillingRecordCountAggregateOutputType | null
    _avg: BillingRecordAvgAggregateOutputType | null
    _sum: BillingRecordSumAggregateOutputType | null
    _min: BillingRecordMinAggregateOutputType | null
    _max: BillingRecordMaxAggregateOutputType | null
  }

  export type BillingRecordAvgAggregateOutputType = {
    amount: number | null
  }

  export type BillingRecordSumAggregateOutputType = {
    amount: number | null
  }

  export type BillingRecordMinAggregateOutputType = {
    id: string | null
    userId: string | null
    invoiceId: string | null
    amount: number | null
    status: string | null
    description: string | null
    paidAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillingRecordMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    invoiceId: string | null
    amount: number | null
    status: string | null
    description: string | null
    paidAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BillingRecordCountAggregateOutputType = {
    id: number
    userId: number
    invoiceId: number
    amount: number
    status: number
    description: number
    paidAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BillingRecordAvgAggregateInputType = {
    amount?: true
  }

  export type BillingRecordSumAggregateInputType = {
    amount?: true
  }

  export type BillingRecordMinAggregateInputType = {
    id?: true
    userId?: true
    invoiceId?: true
    amount?: true
    status?: true
    description?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillingRecordMaxAggregateInputType = {
    id?: true
    userId?: true
    invoiceId?: true
    amount?: true
    status?: true
    description?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BillingRecordCountAggregateInputType = {
    id?: true
    userId?: true
    invoiceId?: true
    amount?: true
    status?: true
    description?: true
    paidAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BillingRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingRecord to aggregate.
     */
    where?: BillingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingRecords to fetch.
     */
    orderBy?: BillingRecordOrderByWithRelationInput | BillingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BillingRecords
    **/
    _count?: true | BillingRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillingRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillingRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillingRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillingRecordMaxAggregateInputType
  }

  export type GetBillingRecordAggregateType<T extends BillingRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateBillingRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBillingRecord[P]>
      : GetScalarType<T[P], AggregateBillingRecord[P]>
  }




  export type BillingRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingRecordWhereInput
    orderBy?: BillingRecordOrderByWithAggregationInput | BillingRecordOrderByWithAggregationInput[]
    by: BillingRecordScalarFieldEnum[] | BillingRecordScalarFieldEnum
    having?: BillingRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillingRecordCountAggregateInputType | true
    _avg?: BillingRecordAvgAggregateInputType
    _sum?: BillingRecordSumAggregateInputType
    _min?: BillingRecordMinAggregateInputType
    _max?: BillingRecordMaxAggregateInputType
  }

  export type BillingRecordGroupByOutputType = {
    id: string
    userId: string
    invoiceId: string | null
    amount: number
    status: string
    description: string | null
    paidAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: BillingRecordCountAggregateOutputType | null
    _avg: BillingRecordAvgAggregateOutputType | null
    _sum: BillingRecordSumAggregateOutputType | null
    _min: BillingRecordMinAggregateOutputType | null
    _max: BillingRecordMaxAggregateOutputType | null
  }

  type GetBillingRecordGroupByPayload<T extends BillingRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillingRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillingRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillingRecordGroupByOutputType[P]>
            : GetScalarType<T[P], BillingRecordGroupByOutputType[P]>
        }
      >
    >


  export type BillingRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    invoiceId?: boolean
    amount?: boolean
    status?: boolean
    description?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingRecord"]>

  export type BillingRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    invoiceId?: boolean
    amount?: boolean
    status?: boolean
    description?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingRecord"]>

  export type BillingRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    invoiceId?: boolean
    amount?: boolean
    status?: boolean
    description?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingRecord"]>

  export type BillingRecordSelectScalar = {
    id?: boolean
    userId?: boolean
    invoiceId?: boolean
    amount?: boolean
    status?: boolean
    description?: boolean
    paidAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BillingRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "invoiceId" | "amount" | "status" | "description" | "paidAt" | "createdAt" | "updatedAt", ExtArgs["result"]["billingRecord"]>
  export type BillingRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BillingRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BillingRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BillingRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BillingRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      invoiceId: string | null
      amount: number
      status: string
      description: string | null
      paidAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["billingRecord"]>
    composites: {}
  }

  type BillingRecordGetPayload<S extends boolean | null | undefined | BillingRecordDefaultArgs> = $Result.GetResult<Prisma.$BillingRecordPayload, S>

  type BillingRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BillingRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BillingRecordCountAggregateInputType | true
    }

  export interface BillingRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BillingRecord'], meta: { name: 'BillingRecord' } }
    /**
     * Find zero or one BillingRecord that matches the filter.
     * @param {BillingRecordFindUniqueArgs} args - Arguments to find a BillingRecord
     * @example
     * // Get one BillingRecord
     * const billingRecord = await prisma.billingRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BillingRecordFindUniqueArgs>(args: SelectSubset<T, BillingRecordFindUniqueArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one BillingRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BillingRecordFindUniqueOrThrowArgs} args - Arguments to find a BillingRecord
     * @example
     * // Get one BillingRecord
     * const billingRecord = await prisma.billingRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BillingRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, BillingRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first BillingRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordFindFirstArgs} args - Arguments to find a BillingRecord
     * @example
     * // Get one BillingRecord
     * const billingRecord = await prisma.billingRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BillingRecordFindFirstArgs>(args?: SelectSubset<T, BillingRecordFindFirstArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first BillingRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordFindFirstOrThrowArgs} args - Arguments to find a BillingRecord
     * @example
     * // Get one BillingRecord
     * const billingRecord = await prisma.billingRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BillingRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, BillingRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more BillingRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BillingRecords
     * const billingRecords = await prisma.billingRecord.findMany()
     * 
     * // Get first 10 BillingRecords
     * const billingRecords = await prisma.billingRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billingRecordWithIdOnly = await prisma.billingRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BillingRecordFindManyArgs>(args?: SelectSubset<T, BillingRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a BillingRecord.
     * @param {BillingRecordCreateArgs} args - Arguments to create a BillingRecord.
     * @example
     * // Create one BillingRecord
     * const BillingRecord = await prisma.billingRecord.create({
     *   data: {
     *     // ... data to create a BillingRecord
     *   }
     * })
     * 
     */
    create<T extends BillingRecordCreateArgs>(args: SelectSubset<T, BillingRecordCreateArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many BillingRecords.
     * @param {BillingRecordCreateManyArgs} args - Arguments to create many BillingRecords.
     * @example
     * // Create many BillingRecords
     * const billingRecord = await prisma.billingRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BillingRecordCreateManyArgs>(args?: SelectSubset<T, BillingRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BillingRecords and returns the data saved in the database.
     * @param {BillingRecordCreateManyAndReturnArgs} args - Arguments to create many BillingRecords.
     * @example
     * // Create many BillingRecords
     * const billingRecord = await prisma.billingRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BillingRecords and only return the `id`
     * const billingRecordWithIdOnly = await prisma.billingRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BillingRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, BillingRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a BillingRecord.
     * @param {BillingRecordDeleteArgs} args - Arguments to delete one BillingRecord.
     * @example
     * // Delete one BillingRecord
     * const BillingRecord = await prisma.billingRecord.delete({
     *   where: {
     *     // ... filter to delete one BillingRecord
     *   }
     * })
     * 
     */
    delete<T extends BillingRecordDeleteArgs>(args: SelectSubset<T, BillingRecordDeleteArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one BillingRecord.
     * @param {BillingRecordUpdateArgs} args - Arguments to update one BillingRecord.
     * @example
     * // Update one BillingRecord
     * const billingRecord = await prisma.billingRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BillingRecordUpdateArgs>(args: SelectSubset<T, BillingRecordUpdateArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more BillingRecords.
     * @param {BillingRecordDeleteManyArgs} args - Arguments to filter BillingRecords to delete.
     * @example
     * // Delete a few BillingRecords
     * const { count } = await prisma.billingRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BillingRecordDeleteManyArgs>(args?: SelectSubset<T, BillingRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BillingRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BillingRecords
     * const billingRecord = await prisma.billingRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BillingRecordUpdateManyArgs>(args: SelectSubset<T, BillingRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BillingRecords and returns the data updated in the database.
     * @param {BillingRecordUpdateManyAndReturnArgs} args - Arguments to update many BillingRecords.
     * @example
     * // Update many BillingRecords
     * const billingRecord = await prisma.billingRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BillingRecords and only return the `id`
     * const billingRecordWithIdOnly = await prisma.billingRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BillingRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, BillingRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one BillingRecord.
     * @param {BillingRecordUpsertArgs} args - Arguments to update or create a BillingRecord.
     * @example
     * // Update or create a BillingRecord
     * const billingRecord = await prisma.billingRecord.upsert({
     *   create: {
     *     // ... data to create a BillingRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BillingRecord we want to update
     *   }
     * })
     */
    upsert<T extends BillingRecordUpsertArgs>(args: SelectSubset<T, BillingRecordUpsertArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of BillingRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordCountArgs} args - Arguments to filter BillingRecords to count.
     * @example
     * // Count the number of BillingRecords
     * const count = await prisma.billingRecord.count({
     *   where: {
     *     // ... the filter for the BillingRecords we want to count
     *   }
     * })
    **/
    count<T extends BillingRecordCountArgs>(
      args?: Subset<T, BillingRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillingRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BillingRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillingRecordAggregateArgs>(args: Subset<T, BillingRecordAggregateArgs>): Prisma.PrismaPromise<GetBillingRecordAggregateType<T>>

    /**
     * Group by BillingRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillingRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillingRecordGroupByArgs['orderBy'] }
        : { orderBy?: BillingRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillingRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillingRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BillingRecord model
   */
  readonly fields: BillingRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BillingRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillingRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BillingRecord model
   */ 
  interface BillingRecordFieldRefs {
    readonly id: FieldRef<"BillingRecord", 'String'>
    readonly userId: FieldRef<"BillingRecord", 'String'>
    readonly invoiceId: FieldRef<"BillingRecord", 'String'>
    readonly amount: FieldRef<"BillingRecord", 'Int'>
    readonly status: FieldRef<"BillingRecord", 'String'>
    readonly description: FieldRef<"BillingRecord", 'String'>
    readonly paidAt: FieldRef<"BillingRecord", 'DateTime'>
    readonly createdAt: FieldRef<"BillingRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"BillingRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BillingRecord findUnique
   */
  export type BillingRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter, which BillingRecord to fetch.
     */
    where: BillingRecordWhereUniqueInput
  }

  /**
   * BillingRecord findUniqueOrThrow
   */
  export type BillingRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter, which BillingRecord to fetch.
     */
    where: BillingRecordWhereUniqueInput
  }

  /**
   * BillingRecord findFirst
   */
  export type BillingRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter, which BillingRecord to fetch.
     */
    where?: BillingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingRecords to fetch.
     */
    orderBy?: BillingRecordOrderByWithRelationInput | BillingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingRecords.
     */
    cursor?: BillingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingRecords.
     */
    distinct?: BillingRecordScalarFieldEnum | BillingRecordScalarFieldEnum[]
  }

  /**
   * BillingRecord findFirstOrThrow
   */
  export type BillingRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter, which BillingRecord to fetch.
     */
    where?: BillingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingRecords to fetch.
     */
    orderBy?: BillingRecordOrderByWithRelationInput | BillingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingRecords.
     */
    cursor?: BillingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingRecords.
     */
    distinct?: BillingRecordScalarFieldEnum | BillingRecordScalarFieldEnum[]
  }

  /**
   * BillingRecord findMany
   */
  export type BillingRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter, which BillingRecords to fetch.
     */
    where?: BillingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingRecords to fetch.
     */
    orderBy?: BillingRecordOrderByWithRelationInput | BillingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BillingRecords.
     */
    cursor?: BillingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingRecords.
     */
    skip?: number
    distinct?: BillingRecordScalarFieldEnum | BillingRecordScalarFieldEnum[]
  }

  /**
   * BillingRecord create
   */
  export type BillingRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a BillingRecord.
     */
    data: XOR<BillingRecordCreateInput, BillingRecordUncheckedCreateInput>
  }

  /**
   * BillingRecord createMany
   */
  export type BillingRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BillingRecords.
     */
    data: BillingRecordCreateManyInput | BillingRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BillingRecord createManyAndReturn
   */
  export type BillingRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * The data used to create many BillingRecords.
     */
    data: BillingRecordCreateManyInput | BillingRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BillingRecord update
   */
  export type BillingRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a BillingRecord.
     */
    data: XOR<BillingRecordUpdateInput, BillingRecordUncheckedUpdateInput>
    /**
     * Choose, which BillingRecord to update.
     */
    where: BillingRecordWhereUniqueInput
  }

  /**
   * BillingRecord updateMany
   */
  export type BillingRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BillingRecords.
     */
    data: XOR<BillingRecordUpdateManyMutationInput, BillingRecordUncheckedUpdateManyInput>
    /**
     * Filter which BillingRecords to update
     */
    where?: BillingRecordWhereInput
    /**
     * Limit how many BillingRecords to update.
     */
    limit?: number
  }

  /**
   * BillingRecord updateManyAndReturn
   */
  export type BillingRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * The data used to update BillingRecords.
     */
    data: XOR<BillingRecordUpdateManyMutationInput, BillingRecordUncheckedUpdateManyInput>
    /**
     * Filter which BillingRecords to update
     */
    where?: BillingRecordWhereInput
    /**
     * Limit how many BillingRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BillingRecord upsert
   */
  export type BillingRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the BillingRecord to update in case it exists.
     */
    where: BillingRecordWhereUniqueInput
    /**
     * In case the BillingRecord found by the `where` argument doesn't exist, create a new BillingRecord with this data.
     */
    create: XOR<BillingRecordCreateInput, BillingRecordUncheckedCreateInput>
    /**
     * In case the BillingRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillingRecordUpdateInput, BillingRecordUncheckedUpdateInput>
  }

  /**
   * BillingRecord delete
   */
  export type BillingRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter which BillingRecord to delete.
     */
    where: BillingRecordWhereUniqueInput
  }

  /**
   * BillingRecord deleteMany
   */
  export type BillingRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingRecords to delete
     */
    where?: BillingRecordWhereInput
    /**
     * Limit how many BillingRecords to delete.
     */
    limit?: number
  }

  /**
   * BillingRecord without action
   */
  export type BillingRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
  }


  /**
   * Model PasswordResetToken
   */

  export type AggregatePasswordResetToken = {
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  export type PasswordResetTokenMinAggregateOutputType = {
    id: string | null
    token: string | null
    expires: Date | null
    userId: string | null
    createdAt: Date | null
  }

  export type PasswordResetTokenMaxAggregateOutputType = {
    id: string | null
    token: string | null
    expires: Date | null
    userId: string | null
    createdAt: Date | null
  }

  export type PasswordResetTokenCountAggregateOutputType = {
    id: number
    token: number
    expires: number
    userId: number
    createdAt: number
    _all: number
  }


  export type PasswordResetTokenMinAggregateInputType = {
    id?: true
    token?: true
    expires?: true
    userId?: true
    createdAt?: true
  }

  export type PasswordResetTokenMaxAggregateInputType = {
    id?: true
    token?: true
    expires?: true
    userId?: true
    createdAt?: true
  }

  export type PasswordResetTokenCountAggregateInputType = {
    id?: true
    token?: true
    expires?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type PasswordResetTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetToken to aggregate.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResetTokens
    **/
    _count?: true | PasswordResetTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type GetPasswordResetTokenAggregateType<T extends PasswordResetTokenAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordResetToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordResetToken[P]>
      : GetScalarType<T[P], AggregatePasswordResetToken[P]>
  }




  export type PasswordResetTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetTokenWhereInput
    orderBy?: PasswordResetTokenOrderByWithAggregationInput | PasswordResetTokenOrderByWithAggregationInput[]
    by: PasswordResetTokenScalarFieldEnum[] | PasswordResetTokenScalarFieldEnum
    having?: PasswordResetTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetTokenCountAggregateInputType | true
    _min?: PasswordResetTokenMinAggregateInputType
    _max?: PasswordResetTokenMaxAggregateInputType
  }

  export type PasswordResetTokenGroupByOutputType = {
    id: string
    token: string
    expires: Date
    userId: string
    createdAt: Date
    _count: PasswordResetTokenCountAggregateOutputType | null
    _min: PasswordResetTokenMinAggregateOutputType | null
    _max: PasswordResetTokenMaxAggregateOutputType | null
  }

  type GetPasswordResetTokenGroupByPayload<T extends PasswordResetTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetTokenGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    expires?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    expires?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    expires?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordResetToken"]>

  export type PasswordResetTokenSelectScalar = {
    id?: boolean
    token?: boolean
    expires?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type PasswordResetTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "expires" | "userId" | "createdAt", ExtArgs["result"]["passwordResetToken"]>
  export type PasswordResetTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PasswordResetTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PasswordResetTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PasswordResetTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordResetToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      expires: Date
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["passwordResetToken"]>
    composites: {}
  }

  type PasswordResetTokenGetPayload<S extends boolean | null | undefined | PasswordResetTokenDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetTokenPayload, S>

  type PasswordResetTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetTokenCountAggregateInputType | true
    }

  export interface PasswordResetTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordResetToken'], meta: { name: 'PasswordResetToken' } }
    /**
     * Find zero or one PasswordResetToken that matches the filter.
     * @param {PasswordResetTokenFindUniqueArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetTokenFindUniqueArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one PasswordResetToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetTokenFindUniqueOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first PasswordResetToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetTokenFindFirstArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first PasswordResetToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindFirstOrThrowArgs} args - Arguments to find a PasswordResetToken
     * @example
     * // Get one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more PasswordResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany()
     * 
     * // Get first 10 PasswordResetTokens
     * const passwordResetTokens = await prisma.passwordResetToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetTokenFindManyArgs>(args?: SelectSubset<T, PasswordResetTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a PasswordResetToken.
     * @param {PasswordResetTokenCreateArgs} args - Arguments to create a PasswordResetToken.
     * @example
     * // Create one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.create({
     *   data: {
     *     // ... data to create a PasswordResetToken
     *   }
     * })
     * 
     */
    create<T extends PasswordResetTokenCreateArgs>(args: SelectSubset<T, PasswordResetTokenCreateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many PasswordResetTokens.
     * @param {PasswordResetTokenCreateManyArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetTokenCreateManyArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResetTokens and returns the data saved in the database.
     * @param {PasswordResetTokenCreateManyAndReturnArgs} args - Arguments to create many PasswordResetTokens.
     * @example
     * // Create many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a PasswordResetToken.
     * @param {PasswordResetTokenDeleteArgs} args - Arguments to delete one PasswordResetToken.
     * @example
     * // Delete one PasswordResetToken
     * const PasswordResetToken = await prisma.passwordResetToken.delete({
     *   where: {
     *     // ... filter to delete one PasswordResetToken
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetTokenDeleteArgs>(args: SelectSubset<T, PasswordResetTokenDeleteArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one PasswordResetToken.
     * @param {PasswordResetTokenUpdateArgs} args - Arguments to update one PasswordResetToken.
     * @example
     * // Update one PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetTokenUpdateArgs>(args: SelectSubset<T, PasswordResetTokenUpdateArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more PasswordResetTokens.
     * @param {PasswordResetTokenDeleteManyArgs} args - Arguments to filter PasswordResetTokens to delete.
     * @example
     * // Delete a few PasswordResetTokens
     * const { count } = await prisma.passwordResetToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetTokenDeleteManyArgs>(args?: SelectSubset<T, PasswordResetTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetTokenUpdateManyArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResetTokens and returns the data updated in the database.
     * @param {PasswordResetTokenUpdateManyAndReturnArgs} args - Arguments to update many PasswordResetTokens.
     * @example
     * // Update many PasswordResetTokens
     * const passwordResetToken = await prisma.passwordResetToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResetTokens and only return the `id`
     * const passwordResetTokenWithIdOnly = await prisma.passwordResetToken.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PasswordResetTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one PasswordResetToken.
     * @param {PasswordResetTokenUpsertArgs} args - Arguments to update or create a PasswordResetToken.
     * @example
     * // Update or create a PasswordResetToken
     * const passwordResetToken = await prisma.passwordResetToken.upsert({
     *   create: {
     *     // ... data to create a PasswordResetToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordResetToken we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetTokenUpsertArgs>(args: SelectSubset<T, PasswordResetTokenUpsertArgs<ExtArgs>>): Prisma__PasswordResetTokenClient<$Result.GetResult<Prisma.$PasswordResetTokenPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of PasswordResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenCountArgs} args - Arguments to filter PasswordResetTokens to count.
     * @example
     * // Count the number of PasswordResetTokens
     * const count = await prisma.passwordResetToken.count({
     *   where: {
     *     // ... the filter for the PasswordResetTokens we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetTokenCountArgs>(
      args?: Subset<T, PasswordResetTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetTokenAggregateArgs>(args: Subset<T, PasswordResetTokenAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetTokenAggregateType<T>>

    /**
     * Group by PasswordResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetTokenGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordResetToken model
   */
  readonly fields: PasswordResetTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordResetToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordResetToken model
   */ 
  interface PasswordResetTokenFieldRefs {
    readonly id: FieldRef<"PasswordResetToken", 'String'>
    readonly token: FieldRef<"PasswordResetToken", 'String'>
    readonly expires: FieldRef<"PasswordResetToken", 'DateTime'>
    readonly userId: FieldRef<"PasswordResetToken", 'String'>
    readonly createdAt: FieldRef<"PasswordResetToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordResetToken findUnique
   */
  export type PasswordResetTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findUniqueOrThrow
   */
  export type PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken findFirst
   */
  export type PasswordResetTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findFirstOrThrow
   */
  export type PasswordResetTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetToken to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResetTokens.
     */
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken findMany
   */
  export type PasswordResetTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResetTokens to fetch.
     */
    where?: PasswordResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResetTokens to fetch.
     */
    orderBy?: PasswordResetTokenOrderByWithRelationInput | PasswordResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResetTokens.
     */
    cursor?: PasswordResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResetTokens.
     */
    skip?: number
    distinct?: PasswordResetTokenScalarFieldEnum | PasswordResetTokenScalarFieldEnum[]
  }

  /**
   * PasswordResetToken create
   */
  export type PasswordResetTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
  }

  /**
   * PasswordResetToken createMany
   */
  export type PasswordResetTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordResetToken createManyAndReturn
   */
  export type PasswordResetTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to create many PasswordResetTokens.
     */
    data: PasswordResetTokenCreateManyInput | PasswordResetTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetToken update
   */
  export type PasswordResetTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordResetToken.
     */
    data: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
    /**
     * Choose, which PasswordResetToken to update.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken updateMany
   */
  export type PasswordResetTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
  }

  /**
   * PasswordResetToken updateManyAndReturn
   */
  export type PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * The data used to update PasswordResetTokens.
     */
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResetTokens to update
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordResetToken upsert
   */
  export type PasswordResetTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordResetToken to update in case it exists.
     */
    where: PasswordResetTokenWhereUniqueInput
    /**
     * In case the PasswordResetToken found by the `where` argument doesn't exist, create a new PasswordResetToken with this data.
     */
    create: XOR<PasswordResetTokenCreateInput, PasswordResetTokenUncheckedCreateInput>
    /**
     * In case the PasswordResetToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetTokenUpdateInput, PasswordResetTokenUncheckedUpdateInput>
  }

  /**
   * PasswordResetToken delete
   */
  export type PasswordResetTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
    /**
     * Filter which PasswordResetToken to delete.
     */
    where: PasswordResetTokenWhereUniqueInput
  }

  /**
   * PasswordResetToken deleteMany
   */
  export type PasswordResetTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResetTokens to delete
     */
    where?: PasswordResetTokenWhereInput
    /**
     * Limit how many PasswordResetTokens to delete.
     */
    limit?: number
  }

  /**
   * PasswordResetToken without action
   */
  export type PasswordResetTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordResetToken
     */
    select?: PasswordResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordResetToken
     */
    omit?: PasswordResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetTokenInclude<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    email: string | null
    companyName: string | null
    type: string | null
    subject: string | null
    message: string | null
    status: string | null
    notes: string | null
    assignedTo: string | null
    userId: string | null
  }

  export type ContactMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    email: string | null
    companyName: string | null
    type: string | null
    subject: string | null
    message: string | null
    status: string | null
    notes: string | null
    assignedTo: string | null
    userId: string | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    email: number
    companyName: number
    type: number
    subject: number
    message: number
    status: number
    notes: number
    assignedTo: number
    userId: number
    _all: number
  }


  export type ContactMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    companyName?: true
    type?: true
    subject?: true
    message?: true
    status?: true
    notes?: true
    assignedTo?: true
    userId?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    companyName?: true
    type?: true
    subject?: true
    message?: true
    status?: true
    notes?: true
    assignedTo?: true
    userId?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    email?: true
    companyName?: true
    type?: true
    subject?: true
    message?: true
    status?: true
    notes?: true
    assignedTo?: true
    userId?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    email: string
    companyName: string | null
    type: string
    subject: string
    message: string
    status: string
    notes: string | null
    assignedTo: string | null
    userId: string | null
    _count: ContactCountAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    email?: boolean
    companyName?: boolean
    type?: boolean
    subject?: boolean
    message?: boolean
    status?: boolean
    notes?: boolean
    assignedTo?: boolean
    userId?: boolean
    user?: boolean | Contact$userArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    email?: boolean
    companyName?: boolean
    type?: boolean
    subject?: boolean
    message?: boolean
    status?: boolean
    notes?: boolean
    assignedTo?: boolean
    userId?: boolean
    user?: boolean | Contact$userArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    email?: boolean
    companyName?: boolean
    type?: boolean
    subject?: boolean
    message?: boolean
    status?: boolean
    notes?: boolean
    assignedTo?: boolean
    userId?: boolean
    user?: boolean | Contact$userArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    email?: boolean
    companyName?: boolean
    type?: boolean
    subject?: boolean
    message?: boolean
    status?: boolean
    notes?: boolean
    assignedTo?: boolean
    userId?: boolean
  }

  export type ContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "name" | "email" | "companyName" | "type" | "subject" | "message" | "status" | "notes" | "assignedTo" | "userId", ExtArgs["result"]["contact"]>
  export type ContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Contact$userArgs<ExtArgs>
  }
  export type ContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Contact$userArgs<ExtArgs>
  }
  export type ContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Contact$userArgs<ExtArgs>
  }

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      name: string
      email: string
      companyName: string | null
      type: string
      subject: string
      message: string
      status: string
      notes: string | null
      assignedTo: string | null
      userId: string | null
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts and returns the data updated in the database.
     * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Contact$userArgs<ExtArgs> = {}>(args?: Subset<T, Contact$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */ 
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'String'>
    readonly createdAt: FieldRef<"Contact", 'DateTime'>
    readonly updatedAt: FieldRef<"Contact", 'DateTime'>
    readonly name: FieldRef<"Contact", 'String'>
    readonly email: FieldRef<"Contact", 'String'>
    readonly companyName: FieldRef<"Contact", 'String'>
    readonly type: FieldRef<"Contact", 'String'>
    readonly subject: FieldRef<"Contact", 'String'>
    readonly message: FieldRef<"Contact", 'String'>
    readonly status: FieldRef<"Contact", 'String'>
    readonly notes: FieldRef<"Contact", 'String'>
    readonly assignedTo: FieldRef<"Contact", 'String'>
    readonly userId: FieldRef<"Contact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact updateManyAndReturn
   */
  export type ContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to delete.
     */
    limit?: number
  }

  /**
   * Contact.user
   */
  export type Contact$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
  }


  /**
   * Model CorporateTenant
   */

  export type AggregateCorporateTenant = {
    _count: CorporateTenantCountAggregateOutputType | null
    _avg: CorporateTenantAvgAggregateOutputType | null
    _sum: CorporateTenantSumAggregateOutputType | null
    _min: CorporateTenantMinAggregateOutputType | null
    _max: CorporateTenantMaxAggregateOutputType | null
  }

  export type CorporateTenantAvgAggregateOutputType = {
    logoWidth: number | null
    logoHeight: number | null
    maxUsers: number | null
    dataRetentionDays: number | null
  }

  export type CorporateTenantSumAggregateOutputType = {
    logoWidth: number | null
    logoHeight: number | null
    maxUsers: number | null
    dataRetentionDays: number | null
  }

  export type CorporateTenantMinAggregateOutputType = {
    id: string | null
    name: string | null
    logoUrl: string | null
    logoWidth: number | null
    logoHeight: number | null
    primaryColor: string | null
    secondaryColor: string | null
    headerText: string | null
    textColor: string | null
    customDomain: string | null
    maxUsers: number | null
    createdAt: Date | null
    updatedAt: Date | null
    billingEmail: string | null
    billingContact: string | null
    accountStatus: string | null
    dataRetentionDays: number | null
    subscriptionId: string | null
    adminId: string | null
  }

  export type CorporateTenantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    logoUrl: string | null
    logoWidth: number | null
    logoHeight: number | null
    primaryColor: string | null
    secondaryColor: string | null
    headerText: string | null
    textColor: string | null
    customDomain: string | null
    maxUsers: number | null
    createdAt: Date | null
    updatedAt: Date | null
    billingEmail: string | null
    billingContact: string | null
    accountStatus: string | null
    dataRetentionDays: number | null
    subscriptionId: string | null
    adminId: string | null
  }

  export type CorporateTenantCountAggregateOutputType = {
    id: number
    name: number
    logoUrl: number
    logoWidth: number
    logoHeight: number
    primaryColor: number
    secondaryColor: number
    headerText: number
    textColor: number
    customDomain: number
    maxUsers: number
    createdAt: number
    updatedAt: number
    securitySettings: number
    notificationSettings: number
    billingAddress: number
    billingEmail: number
    billingContact: number
    accountStatus: number
    dataRetentionDays: number
    subscriptionId: number
    adminId: number
    _all: number
  }


  export type CorporateTenantAvgAggregateInputType = {
    logoWidth?: true
    logoHeight?: true
    maxUsers?: true
    dataRetentionDays?: true
  }

  export type CorporateTenantSumAggregateInputType = {
    logoWidth?: true
    logoHeight?: true
    maxUsers?: true
    dataRetentionDays?: true
  }

  export type CorporateTenantMinAggregateInputType = {
    id?: true
    name?: true
    logoUrl?: true
    logoWidth?: true
    logoHeight?: true
    primaryColor?: true
    secondaryColor?: true
    headerText?: true
    textColor?: true
    customDomain?: true
    maxUsers?: true
    createdAt?: true
    updatedAt?: true
    billingEmail?: true
    billingContact?: true
    accountStatus?: true
    dataRetentionDays?: true
    subscriptionId?: true
    adminId?: true
  }

  export type CorporateTenantMaxAggregateInputType = {
    id?: true
    name?: true
    logoUrl?: true
    logoWidth?: true
    logoHeight?: true
    primaryColor?: true
    secondaryColor?: true
    headerText?: true
    textColor?: true
    customDomain?: true
    maxUsers?: true
    createdAt?: true
    updatedAt?: true
    billingEmail?: true
    billingContact?: true
    accountStatus?: true
    dataRetentionDays?: true
    subscriptionId?: true
    adminId?: true
  }

  export type CorporateTenantCountAggregateInputType = {
    id?: true
    name?: true
    logoUrl?: true
    logoWidth?: true
    logoHeight?: true
    primaryColor?: true
    secondaryColor?: true
    headerText?: true
    textColor?: true
    customDomain?: true
    maxUsers?: true
    createdAt?: true
    updatedAt?: true
    securitySettings?: true
    notificationSettings?: true
    billingAddress?: true
    billingEmail?: true
    billingContact?: true
    accountStatus?: true
    dataRetentionDays?: true
    subscriptionId?: true
    adminId?: true
    _all?: true
  }

  export type CorporateTenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CorporateTenant to aggregate.
     */
    where?: CorporateTenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateTenants to fetch.
     */
    orderBy?: CorporateTenantOrderByWithRelationInput | CorporateTenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CorporateTenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateTenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateTenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CorporateTenants
    **/
    _count?: true | CorporateTenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CorporateTenantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CorporateTenantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CorporateTenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CorporateTenantMaxAggregateInputType
  }

  export type GetCorporateTenantAggregateType<T extends CorporateTenantAggregateArgs> = {
        [P in keyof T & keyof AggregateCorporateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCorporateTenant[P]>
      : GetScalarType<T[P], AggregateCorporateTenant[P]>
  }




  export type CorporateTenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorporateTenantWhereInput
    orderBy?: CorporateTenantOrderByWithAggregationInput | CorporateTenantOrderByWithAggregationInput[]
    by: CorporateTenantScalarFieldEnum[] | CorporateTenantScalarFieldEnum
    having?: CorporateTenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CorporateTenantCountAggregateInputType | true
    _avg?: CorporateTenantAvgAggregateInputType
    _sum?: CorporateTenantSumAggregateInputType
    _min?: CorporateTenantMinAggregateInputType
    _max?: CorporateTenantMaxAggregateInputType
  }

  export type CorporateTenantGroupByOutputType = {
    id: string
    name: string
    logoUrl: string | null
    logoWidth: number | null
    logoHeight: number | null
    primaryColor: string | null
    secondaryColor: string | null
    headerText: string | null
    textColor: string | null
    customDomain: string | null
    maxUsers: number
    createdAt: Date
    updatedAt: Date
    securitySettings: JsonValue | null
    notificationSettings: JsonValue | null
    billingAddress: JsonValue | null
    billingEmail: string | null
    billingContact: string | null
    accountStatus: string
    dataRetentionDays: number
    subscriptionId: string | null
    adminId: string
    _count: CorporateTenantCountAggregateOutputType | null
    _avg: CorporateTenantAvgAggregateOutputType | null
    _sum: CorporateTenantSumAggregateOutputType | null
    _min: CorporateTenantMinAggregateOutputType | null
    _max: CorporateTenantMaxAggregateOutputType | null
  }

  type GetCorporateTenantGroupByPayload<T extends CorporateTenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CorporateTenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CorporateTenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CorporateTenantGroupByOutputType[P]>
            : GetScalarType<T[P], CorporateTenantGroupByOutputType[P]>
        }
      >
    >


  export type CorporateTenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logoUrl?: boolean
    logoWidth?: boolean
    logoHeight?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    headerText?: boolean
    textColor?: boolean
    customDomain?: boolean
    maxUsers?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    securitySettings?: boolean
    notificationSettings?: boolean
    billingAddress?: boolean
    billingEmail?: boolean
    billingContact?: boolean
    accountStatus?: boolean
    dataRetentionDays?: boolean
    subscriptionId?: boolean
    adminId?: boolean
    activityLogs?: boolean | CorporateTenant$activityLogsArgs<ExtArgs>
    subscription?: boolean | CorporateTenant$subscriptionArgs<ExtArgs>
    admin?: boolean | UserDefaultArgs<ExtArgs>
    users?: boolean | CorporateTenant$usersArgs<ExtArgs>
    departments?: boolean | CorporateTenant$departmentsArgs<ExtArgs>
    corporateSnsLinks?: boolean | CorporateTenant$corporateSnsLinksArgs<ExtArgs>
    _count?: boolean | CorporateTenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["corporateTenant"]>

  export type CorporateTenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logoUrl?: boolean
    logoWidth?: boolean
    logoHeight?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    headerText?: boolean
    textColor?: boolean
    customDomain?: boolean
    maxUsers?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    securitySettings?: boolean
    notificationSettings?: boolean
    billingAddress?: boolean
    billingEmail?: boolean
    billingContact?: boolean
    accountStatus?: boolean
    dataRetentionDays?: boolean
    subscriptionId?: boolean
    adminId?: boolean
    subscription?: boolean | CorporateTenant$subscriptionArgs<ExtArgs>
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["corporateTenant"]>

  export type CorporateTenantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logoUrl?: boolean
    logoWidth?: boolean
    logoHeight?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    headerText?: boolean
    textColor?: boolean
    customDomain?: boolean
    maxUsers?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    securitySettings?: boolean
    notificationSettings?: boolean
    billingAddress?: boolean
    billingEmail?: boolean
    billingContact?: boolean
    accountStatus?: boolean
    dataRetentionDays?: boolean
    subscriptionId?: boolean
    adminId?: boolean
    subscription?: boolean | CorporateTenant$subscriptionArgs<ExtArgs>
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["corporateTenant"]>

  export type CorporateTenantSelectScalar = {
    id?: boolean
    name?: boolean
    logoUrl?: boolean
    logoWidth?: boolean
    logoHeight?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    headerText?: boolean
    textColor?: boolean
    customDomain?: boolean
    maxUsers?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    securitySettings?: boolean
    notificationSettings?: boolean
    billingAddress?: boolean
    billingEmail?: boolean
    billingContact?: boolean
    accountStatus?: boolean
    dataRetentionDays?: boolean
    subscriptionId?: boolean
    adminId?: boolean
  }

  export type CorporateTenantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "logoUrl" | "logoWidth" | "logoHeight" | "primaryColor" | "secondaryColor" | "headerText" | "textColor" | "customDomain" | "maxUsers" | "createdAt" | "updatedAt" | "securitySettings" | "notificationSettings" | "billingAddress" | "billingEmail" | "billingContact" | "accountStatus" | "dataRetentionDays" | "subscriptionId" | "adminId", ExtArgs["result"]["corporateTenant"]>
  export type CorporateTenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityLogs?: boolean | CorporateTenant$activityLogsArgs<ExtArgs>
    subscription?: boolean | CorporateTenant$subscriptionArgs<ExtArgs>
    admin?: boolean | UserDefaultArgs<ExtArgs>
    users?: boolean | CorporateTenant$usersArgs<ExtArgs>
    departments?: boolean | CorporateTenant$departmentsArgs<ExtArgs>
    corporateSnsLinks?: boolean | CorporateTenant$corporateSnsLinksArgs<ExtArgs>
    _count?: boolean | CorporateTenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CorporateTenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscription?: boolean | CorporateTenant$subscriptionArgs<ExtArgs>
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CorporateTenantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscription?: boolean | CorporateTenant$subscriptionArgs<ExtArgs>
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CorporateTenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CorporateTenant"
    objects: {
      activityLogs: Prisma.$CorporateActivityLogPayload<ExtArgs>[]
      subscription: Prisma.$SubscriptionPayload<ExtArgs> | null
      admin: Prisma.$UserPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
      corporateSnsLinks: Prisma.$CorporateSnsLinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      logoUrl: string | null
      logoWidth: number | null
      logoHeight: number | null
      primaryColor: string | null
      secondaryColor: string | null
      headerText: string | null
      textColor: string | null
      customDomain: string | null
      maxUsers: number
      createdAt: Date
      updatedAt: Date
      securitySettings: Prisma.JsonValue | null
      notificationSettings: Prisma.JsonValue | null
      billingAddress: Prisma.JsonValue | null
      billingEmail: string | null
      billingContact: string | null
      accountStatus: string
      dataRetentionDays: number
      subscriptionId: string | null
      adminId: string
    }, ExtArgs["result"]["corporateTenant"]>
    composites: {}
  }

  type CorporateTenantGetPayload<S extends boolean | null | undefined | CorporateTenantDefaultArgs> = $Result.GetResult<Prisma.$CorporateTenantPayload, S>

  type CorporateTenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CorporateTenantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CorporateTenantCountAggregateInputType | true
    }

  export interface CorporateTenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CorporateTenant'], meta: { name: 'CorporateTenant' } }
    /**
     * Find zero or one CorporateTenant that matches the filter.
     * @param {CorporateTenantFindUniqueArgs} args - Arguments to find a CorporateTenant
     * @example
     * // Get one CorporateTenant
     * const corporateTenant = await prisma.corporateTenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CorporateTenantFindUniqueArgs>(args: SelectSubset<T, CorporateTenantFindUniqueArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CorporateTenant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CorporateTenantFindUniqueOrThrowArgs} args - Arguments to find a CorporateTenant
     * @example
     * // Get one CorporateTenant
     * const corporateTenant = await prisma.corporateTenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CorporateTenantFindUniqueOrThrowArgs>(args: SelectSubset<T, CorporateTenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CorporateTenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateTenantFindFirstArgs} args - Arguments to find a CorporateTenant
     * @example
     * // Get one CorporateTenant
     * const corporateTenant = await prisma.corporateTenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CorporateTenantFindFirstArgs>(args?: SelectSubset<T, CorporateTenantFindFirstArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CorporateTenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateTenantFindFirstOrThrowArgs} args - Arguments to find a CorporateTenant
     * @example
     * // Get one CorporateTenant
     * const corporateTenant = await prisma.corporateTenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CorporateTenantFindFirstOrThrowArgs>(args?: SelectSubset<T, CorporateTenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CorporateTenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateTenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CorporateTenants
     * const corporateTenants = await prisma.corporateTenant.findMany()
     * 
     * // Get first 10 CorporateTenants
     * const corporateTenants = await prisma.corporateTenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const corporateTenantWithIdOnly = await prisma.corporateTenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CorporateTenantFindManyArgs>(args?: SelectSubset<T, CorporateTenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CorporateTenant.
     * @param {CorporateTenantCreateArgs} args - Arguments to create a CorporateTenant.
     * @example
     * // Create one CorporateTenant
     * const CorporateTenant = await prisma.corporateTenant.create({
     *   data: {
     *     // ... data to create a CorporateTenant
     *   }
     * })
     * 
     */
    create<T extends CorporateTenantCreateArgs>(args: SelectSubset<T, CorporateTenantCreateArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CorporateTenants.
     * @param {CorporateTenantCreateManyArgs} args - Arguments to create many CorporateTenants.
     * @example
     * // Create many CorporateTenants
     * const corporateTenant = await prisma.corporateTenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CorporateTenantCreateManyArgs>(args?: SelectSubset<T, CorporateTenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CorporateTenants and returns the data saved in the database.
     * @param {CorporateTenantCreateManyAndReturnArgs} args - Arguments to create many CorporateTenants.
     * @example
     * // Create many CorporateTenants
     * const corporateTenant = await prisma.corporateTenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CorporateTenants and only return the `id`
     * const corporateTenantWithIdOnly = await prisma.corporateTenant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CorporateTenantCreateManyAndReturnArgs>(args?: SelectSubset<T, CorporateTenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CorporateTenant.
     * @param {CorporateTenantDeleteArgs} args - Arguments to delete one CorporateTenant.
     * @example
     * // Delete one CorporateTenant
     * const CorporateTenant = await prisma.corporateTenant.delete({
     *   where: {
     *     // ... filter to delete one CorporateTenant
     *   }
     * })
     * 
     */
    delete<T extends CorporateTenantDeleteArgs>(args: SelectSubset<T, CorporateTenantDeleteArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CorporateTenant.
     * @param {CorporateTenantUpdateArgs} args - Arguments to update one CorporateTenant.
     * @example
     * // Update one CorporateTenant
     * const corporateTenant = await prisma.corporateTenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CorporateTenantUpdateArgs>(args: SelectSubset<T, CorporateTenantUpdateArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CorporateTenants.
     * @param {CorporateTenantDeleteManyArgs} args - Arguments to filter CorporateTenants to delete.
     * @example
     * // Delete a few CorporateTenants
     * const { count } = await prisma.corporateTenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CorporateTenantDeleteManyArgs>(args?: SelectSubset<T, CorporateTenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CorporateTenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateTenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CorporateTenants
     * const corporateTenant = await prisma.corporateTenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CorporateTenantUpdateManyArgs>(args: SelectSubset<T, CorporateTenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CorporateTenants and returns the data updated in the database.
     * @param {CorporateTenantUpdateManyAndReturnArgs} args - Arguments to update many CorporateTenants.
     * @example
     * // Update many CorporateTenants
     * const corporateTenant = await prisma.corporateTenant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CorporateTenants and only return the `id`
     * const corporateTenantWithIdOnly = await prisma.corporateTenant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CorporateTenantUpdateManyAndReturnArgs>(args: SelectSubset<T, CorporateTenantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CorporateTenant.
     * @param {CorporateTenantUpsertArgs} args - Arguments to update or create a CorporateTenant.
     * @example
     * // Update or create a CorporateTenant
     * const corporateTenant = await prisma.corporateTenant.upsert({
     *   create: {
     *     // ... data to create a CorporateTenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CorporateTenant we want to update
     *   }
     * })
     */
    upsert<T extends CorporateTenantUpsertArgs>(args: SelectSubset<T, CorporateTenantUpsertArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CorporateTenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateTenantCountArgs} args - Arguments to filter CorporateTenants to count.
     * @example
     * // Count the number of CorporateTenants
     * const count = await prisma.corporateTenant.count({
     *   where: {
     *     // ... the filter for the CorporateTenants we want to count
     *   }
     * })
    **/
    count<T extends CorporateTenantCountArgs>(
      args?: Subset<T, CorporateTenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CorporateTenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CorporateTenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateTenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CorporateTenantAggregateArgs>(args: Subset<T, CorporateTenantAggregateArgs>): Prisma.PrismaPromise<GetCorporateTenantAggregateType<T>>

    /**
     * Group by CorporateTenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateTenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CorporateTenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CorporateTenantGroupByArgs['orderBy'] }
        : { orderBy?: CorporateTenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CorporateTenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCorporateTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CorporateTenant model
   */
  readonly fields: CorporateTenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CorporateTenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CorporateTenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activityLogs<T extends CorporateTenant$activityLogsArgs<ExtArgs> = {}>(args?: Subset<T, CorporateTenant$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    subscription<T extends CorporateTenant$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, CorporateTenant$subscriptionArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    admin<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    users<T extends CorporateTenant$usersArgs<ExtArgs> = {}>(args?: Subset<T, CorporateTenant$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    departments<T extends CorporateTenant$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, CorporateTenant$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    corporateSnsLinks<T extends CorporateTenant$corporateSnsLinksArgs<ExtArgs> = {}>(args?: Subset<T, CorporateTenant$corporateSnsLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CorporateTenant model
   */ 
  interface CorporateTenantFieldRefs {
    readonly id: FieldRef<"CorporateTenant", 'String'>
    readonly name: FieldRef<"CorporateTenant", 'String'>
    readonly logoUrl: FieldRef<"CorporateTenant", 'String'>
    readonly logoWidth: FieldRef<"CorporateTenant", 'Int'>
    readonly logoHeight: FieldRef<"CorporateTenant", 'Int'>
    readonly primaryColor: FieldRef<"CorporateTenant", 'String'>
    readonly secondaryColor: FieldRef<"CorporateTenant", 'String'>
    readonly headerText: FieldRef<"CorporateTenant", 'String'>
    readonly textColor: FieldRef<"CorporateTenant", 'String'>
    readonly customDomain: FieldRef<"CorporateTenant", 'String'>
    readonly maxUsers: FieldRef<"CorporateTenant", 'Int'>
    readonly createdAt: FieldRef<"CorporateTenant", 'DateTime'>
    readonly updatedAt: FieldRef<"CorporateTenant", 'DateTime'>
    readonly securitySettings: FieldRef<"CorporateTenant", 'Json'>
    readonly notificationSettings: FieldRef<"CorporateTenant", 'Json'>
    readonly billingAddress: FieldRef<"CorporateTenant", 'Json'>
    readonly billingEmail: FieldRef<"CorporateTenant", 'String'>
    readonly billingContact: FieldRef<"CorporateTenant", 'String'>
    readonly accountStatus: FieldRef<"CorporateTenant", 'String'>
    readonly dataRetentionDays: FieldRef<"CorporateTenant", 'Int'>
    readonly subscriptionId: FieldRef<"CorporateTenant", 'String'>
    readonly adminId: FieldRef<"CorporateTenant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CorporateTenant findUnique
   */
  export type CorporateTenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    /**
     * Filter, which CorporateTenant to fetch.
     */
    where: CorporateTenantWhereUniqueInput
  }

  /**
   * CorporateTenant findUniqueOrThrow
   */
  export type CorporateTenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    /**
     * Filter, which CorporateTenant to fetch.
     */
    where: CorporateTenantWhereUniqueInput
  }

  /**
   * CorporateTenant findFirst
   */
  export type CorporateTenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    /**
     * Filter, which CorporateTenant to fetch.
     */
    where?: CorporateTenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateTenants to fetch.
     */
    orderBy?: CorporateTenantOrderByWithRelationInput | CorporateTenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CorporateTenants.
     */
    cursor?: CorporateTenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateTenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateTenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CorporateTenants.
     */
    distinct?: CorporateTenantScalarFieldEnum | CorporateTenantScalarFieldEnum[]
  }

  /**
   * CorporateTenant findFirstOrThrow
   */
  export type CorporateTenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    /**
     * Filter, which CorporateTenant to fetch.
     */
    where?: CorporateTenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateTenants to fetch.
     */
    orderBy?: CorporateTenantOrderByWithRelationInput | CorporateTenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CorporateTenants.
     */
    cursor?: CorporateTenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateTenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateTenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CorporateTenants.
     */
    distinct?: CorporateTenantScalarFieldEnum | CorporateTenantScalarFieldEnum[]
  }

  /**
   * CorporateTenant findMany
   */
  export type CorporateTenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    /**
     * Filter, which CorporateTenants to fetch.
     */
    where?: CorporateTenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateTenants to fetch.
     */
    orderBy?: CorporateTenantOrderByWithRelationInput | CorporateTenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CorporateTenants.
     */
    cursor?: CorporateTenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateTenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateTenants.
     */
    skip?: number
    distinct?: CorporateTenantScalarFieldEnum | CorporateTenantScalarFieldEnum[]
  }

  /**
   * CorporateTenant create
   */
  export type CorporateTenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    /**
     * The data needed to create a CorporateTenant.
     */
    data: XOR<CorporateTenantCreateInput, CorporateTenantUncheckedCreateInput>
  }

  /**
   * CorporateTenant createMany
   */
  export type CorporateTenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CorporateTenants.
     */
    data: CorporateTenantCreateManyInput | CorporateTenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CorporateTenant createManyAndReturn
   */
  export type CorporateTenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * The data used to create many CorporateTenants.
     */
    data: CorporateTenantCreateManyInput | CorporateTenantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CorporateTenant update
   */
  export type CorporateTenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    /**
     * The data needed to update a CorporateTenant.
     */
    data: XOR<CorporateTenantUpdateInput, CorporateTenantUncheckedUpdateInput>
    /**
     * Choose, which CorporateTenant to update.
     */
    where: CorporateTenantWhereUniqueInput
  }

  /**
   * CorporateTenant updateMany
   */
  export type CorporateTenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CorporateTenants.
     */
    data: XOR<CorporateTenantUpdateManyMutationInput, CorporateTenantUncheckedUpdateManyInput>
    /**
     * Filter which CorporateTenants to update
     */
    where?: CorporateTenantWhereInput
    /**
     * Limit how many CorporateTenants to update.
     */
    limit?: number
  }

  /**
   * CorporateTenant updateManyAndReturn
   */
  export type CorporateTenantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * The data used to update CorporateTenants.
     */
    data: XOR<CorporateTenantUpdateManyMutationInput, CorporateTenantUncheckedUpdateManyInput>
    /**
     * Filter which CorporateTenants to update
     */
    where?: CorporateTenantWhereInput
    /**
     * Limit how many CorporateTenants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CorporateTenant upsert
   */
  export type CorporateTenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    /**
     * The filter to search for the CorporateTenant to update in case it exists.
     */
    where: CorporateTenantWhereUniqueInput
    /**
     * In case the CorporateTenant found by the `where` argument doesn't exist, create a new CorporateTenant with this data.
     */
    create: XOR<CorporateTenantCreateInput, CorporateTenantUncheckedCreateInput>
    /**
     * In case the CorporateTenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CorporateTenantUpdateInput, CorporateTenantUncheckedUpdateInput>
  }

  /**
   * CorporateTenant delete
   */
  export type CorporateTenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
    /**
     * Filter which CorporateTenant to delete.
     */
    where: CorporateTenantWhereUniqueInput
  }

  /**
   * CorporateTenant deleteMany
   */
  export type CorporateTenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CorporateTenants to delete
     */
    where?: CorporateTenantWhereInput
    /**
     * Limit how many CorporateTenants to delete.
     */
    limit?: number
  }

  /**
   * CorporateTenant.activityLogs
   */
  export type CorporateTenant$activityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
    where?: CorporateActivityLogWhereInput
    orderBy?: CorporateActivityLogOrderByWithRelationInput | CorporateActivityLogOrderByWithRelationInput[]
    cursor?: CorporateActivityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CorporateActivityLogScalarFieldEnum | CorporateActivityLogScalarFieldEnum[]
  }

  /**
   * CorporateTenant.subscription
   */
  export type CorporateTenant$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
  }

  /**
   * CorporateTenant.users
   */
  export type CorporateTenant$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * CorporateTenant.departments
   */
  export type CorporateTenant$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * CorporateTenant.corporateSnsLinks
   */
  export type CorporateTenant$corporateSnsLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkInclude<ExtArgs> | null
    where?: CorporateSnsLinkWhereInput
    orderBy?: CorporateSnsLinkOrderByWithRelationInput | CorporateSnsLinkOrderByWithRelationInput[]
    cursor?: CorporateSnsLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CorporateSnsLinkScalarFieldEnum | CorporateSnsLinkScalarFieldEnum[]
  }

  /**
   * CorporateTenant without action
   */
  export type CorporateTenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateTenant
     */
    select?: CorporateTenantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateTenant
     */
    omit?: CorporateTenantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateTenantInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    tenantId: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    tenantId: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    tenantId?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    tenantId: string
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenantId?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt" | "tenantId", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      tenant: Prisma.$CorporateTenantPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
      tenantId: string
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends CorporateTenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CorporateTenantDefaultArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    users<T extends Department$usersArgs<ExtArgs> = {}>(args?: Subset<T, Department$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
    readonly tenantId: FieldRef<"Department", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.users
   */
  export type Department$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model CorporateSnsLink
   */

  export type AggregateCorporateSnsLink = {
    _count: CorporateSnsLinkCountAggregateOutputType | null
    _avg: CorporateSnsLinkAvgAggregateOutputType | null
    _sum: CorporateSnsLinkSumAggregateOutputType | null
    _min: CorporateSnsLinkMinAggregateOutputType | null
    _max: CorporateSnsLinkMaxAggregateOutputType | null
  }

  export type CorporateSnsLinkAvgAggregateOutputType = {
    displayOrder: number | null
  }

  export type CorporateSnsLinkSumAggregateOutputType = {
    displayOrder: number | null
  }

  export type CorporateSnsLinkMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    platform: string | null
    username: string | null
    url: string | null
    displayOrder: number | null
    isRequired: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CorporateSnsLinkMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    platform: string | null
    username: string | null
    url: string | null
    displayOrder: number | null
    isRequired: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CorporateSnsLinkCountAggregateOutputType = {
    id: number
    tenantId: number
    platform: number
    username: number
    url: number
    displayOrder: number
    isRequired: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CorporateSnsLinkAvgAggregateInputType = {
    displayOrder?: true
  }

  export type CorporateSnsLinkSumAggregateInputType = {
    displayOrder?: true
  }

  export type CorporateSnsLinkMinAggregateInputType = {
    id?: true
    tenantId?: true
    platform?: true
    username?: true
    url?: true
    displayOrder?: true
    isRequired?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CorporateSnsLinkMaxAggregateInputType = {
    id?: true
    tenantId?: true
    platform?: true
    username?: true
    url?: true
    displayOrder?: true
    isRequired?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CorporateSnsLinkCountAggregateInputType = {
    id?: true
    tenantId?: true
    platform?: true
    username?: true
    url?: true
    displayOrder?: true
    isRequired?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CorporateSnsLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CorporateSnsLink to aggregate.
     */
    where?: CorporateSnsLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateSnsLinks to fetch.
     */
    orderBy?: CorporateSnsLinkOrderByWithRelationInput | CorporateSnsLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CorporateSnsLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateSnsLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateSnsLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CorporateSnsLinks
    **/
    _count?: true | CorporateSnsLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CorporateSnsLinkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CorporateSnsLinkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CorporateSnsLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CorporateSnsLinkMaxAggregateInputType
  }

  export type GetCorporateSnsLinkAggregateType<T extends CorporateSnsLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateCorporateSnsLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCorporateSnsLink[P]>
      : GetScalarType<T[P], AggregateCorporateSnsLink[P]>
  }




  export type CorporateSnsLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorporateSnsLinkWhereInput
    orderBy?: CorporateSnsLinkOrderByWithAggregationInput | CorporateSnsLinkOrderByWithAggregationInput[]
    by: CorporateSnsLinkScalarFieldEnum[] | CorporateSnsLinkScalarFieldEnum
    having?: CorporateSnsLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CorporateSnsLinkCountAggregateInputType | true
    _avg?: CorporateSnsLinkAvgAggregateInputType
    _sum?: CorporateSnsLinkSumAggregateInputType
    _min?: CorporateSnsLinkMinAggregateInputType
    _max?: CorporateSnsLinkMaxAggregateInputType
  }

  export type CorporateSnsLinkGroupByOutputType = {
    id: string
    tenantId: string
    platform: string
    username: string | null
    url: string
    displayOrder: number
    isRequired: boolean
    createdAt: Date
    updatedAt: Date
    _count: CorporateSnsLinkCountAggregateOutputType | null
    _avg: CorporateSnsLinkAvgAggregateOutputType | null
    _sum: CorporateSnsLinkSumAggregateOutputType | null
    _min: CorporateSnsLinkMinAggregateOutputType | null
    _max: CorporateSnsLinkMaxAggregateOutputType | null
  }

  type GetCorporateSnsLinkGroupByPayload<T extends CorporateSnsLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CorporateSnsLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CorporateSnsLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CorporateSnsLinkGroupByOutputType[P]>
            : GetScalarType<T[P], CorporateSnsLinkGroupByOutputType[P]>
        }
      >
    >


  export type CorporateSnsLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    platform?: boolean
    username?: boolean
    url?: boolean
    displayOrder?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["corporateSnsLink"]>

  export type CorporateSnsLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    platform?: boolean
    username?: boolean
    url?: boolean
    displayOrder?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["corporateSnsLink"]>

  export type CorporateSnsLinkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    platform?: boolean
    username?: boolean
    url?: boolean
    displayOrder?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["corporateSnsLink"]>

  export type CorporateSnsLinkSelectScalar = {
    id?: boolean
    tenantId?: boolean
    platform?: boolean
    username?: boolean
    url?: boolean
    displayOrder?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CorporateSnsLinkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "platform" | "username" | "url" | "displayOrder" | "isRequired" | "createdAt" | "updatedAt", ExtArgs["result"]["corporateSnsLink"]>
  export type CorporateSnsLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
  }
  export type CorporateSnsLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
  }
  export type CorporateSnsLinkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
  }

  export type $CorporateSnsLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CorporateSnsLink"
    objects: {
      tenant: Prisma.$CorporateTenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      platform: string
      username: string | null
      url: string
      displayOrder: number
      isRequired: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["corporateSnsLink"]>
    composites: {}
  }

  type CorporateSnsLinkGetPayload<S extends boolean | null | undefined | CorporateSnsLinkDefaultArgs> = $Result.GetResult<Prisma.$CorporateSnsLinkPayload, S>

  type CorporateSnsLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CorporateSnsLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CorporateSnsLinkCountAggregateInputType | true
    }

  export interface CorporateSnsLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CorporateSnsLink'], meta: { name: 'CorporateSnsLink' } }
    /**
     * Find zero or one CorporateSnsLink that matches the filter.
     * @param {CorporateSnsLinkFindUniqueArgs} args - Arguments to find a CorporateSnsLink
     * @example
     * // Get one CorporateSnsLink
     * const corporateSnsLink = await prisma.corporateSnsLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CorporateSnsLinkFindUniqueArgs>(args: SelectSubset<T, CorporateSnsLinkFindUniqueArgs<ExtArgs>>): Prisma__CorporateSnsLinkClient<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CorporateSnsLink that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CorporateSnsLinkFindUniqueOrThrowArgs} args - Arguments to find a CorporateSnsLink
     * @example
     * // Get one CorporateSnsLink
     * const corporateSnsLink = await prisma.corporateSnsLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CorporateSnsLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, CorporateSnsLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CorporateSnsLinkClient<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CorporateSnsLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateSnsLinkFindFirstArgs} args - Arguments to find a CorporateSnsLink
     * @example
     * // Get one CorporateSnsLink
     * const corporateSnsLink = await prisma.corporateSnsLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CorporateSnsLinkFindFirstArgs>(args?: SelectSubset<T, CorporateSnsLinkFindFirstArgs<ExtArgs>>): Prisma__CorporateSnsLinkClient<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CorporateSnsLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateSnsLinkFindFirstOrThrowArgs} args - Arguments to find a CorporateSnsLink
     * @example
     * // Get one CorporateSnsLink
     * const corporateSnsLink = await prisma.corporateSnsLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CorporateSnsLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, CorporateSnsLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__CorporateSnsLinkClient<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CorporateSnsLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateSnsLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CorporateSnsLinks
     * const corporateSnsLinks = await prisma.corporateSnsLink.findMany()
     * 
     * // Get first 10 CorporateSnsLinks
     * const corporateSnsLinks = await prisma.corporateSnsLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const corporateSnsLinkWithIdOnly = await prisma.corporateSnsLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CorporateSnsLinkFindManyArgs>(args?: SelectSubset<T, CorporateSnsLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CorporateSnsLink.
     * @param {CorporateSnsLinkCreateArgs} args - Arguments to create a CorporateSnsLink.
     * @example
     * // Create one CorporateSnsLink
     * const CorporateSnsLink = await prisma.corporateSnsLink.create({
     *   data: {
     *     // ... data to create a CorporateSnsLink
     *   }
     * })
     * 
     */
    create<T extends CorporateSnsLinkCreateArgs>(args: SelectSubset<T, CorporateSnsLinkCreateArgs<ExtArgs>>): Prisma__CorporateSnsLinkClient<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CorporateSnsLinks.
     * @param {CorporateSnsLinkCreateManyArgs} args - Arguments to create many CorporateSnsLinks.
     * @example
     * // Create many CorporateSnsLinks
     * const corporateSnsLink = await prisma.corporateSnsLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CorporateSnsLinkCreateManyArgs>(args?: SelectSubset<T, CorporateSnsLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CorporateSnsLinks and returns the data saved in the database.
     * @param {CorporateSnsLinkCreateManyAndReturnArgs} args - Arguments to create many CorporateSnsLinks.
     * @example
     * // Create many CorporateSnsLinks
     * const corporateSnsLink = await prisma.corporateSnsLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CorporateSnsLinks and only return the `id`
     * const corporateSnsLinkWithIdOnly = await prisma.corporateSnsLink.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CorporateSnsLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, CorporateSnsLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CorporateSnsLink.
     * @param {CorporateSnsLinkDeleteArgs} args - Arguments to delete one CorporateSnsLink.
     * @example
     * // Delete one CorporateSnsLink
     * const CorporateSnsLink = await prisma.corporateSnsLink.delete({
     *   where: {
     *     // ... filter to delete one CorporateSnsLink
     *   }
     * })
     * 
     */
    delete<T extends CorporateSnsLinkDeleteArgs>(args: SelectSubset<T, CorporateSnsLinkDeleteArgs<ExtArgs>>): Prisma__CorporateSnsLinkClient<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CorporateSnsLink.
     * @param {CorporateSnsLinkUpdateArgs} args - Arguments to update one CorporateSnsLink.
     * @example
     * // Update one CorporateSnsLink
     * const corporateSnsLink = await prisma.corporateSnsLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CorporateSnsLinkUpdateArgs>(args: SelectSubset<T, CorporateSnsLinkUpdateArgs<ExtArgs>>): Prisma__CorporateSnsLinkClient<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CorporateSnsLinks.
     * @param {CorporateSnsLinkDeleteManyArgs} args - Arguments to filter CorporateSnsLinks to delete.
     * @example
     * // Delete a few CorporateSnsLinks
     * const { count } = await prisma.corporateSnsLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CorporateSnsLinkDeleteManyArgs>(args?: SelectSubset<T, CorporateSnsLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CorporateSnsLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateSnsLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CorporateSnsLinks
     * const corporateSnsLink = await prisma.corporateSnsLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CorporateSnsLinkUpdateManyArgs>(args: SelectSubset<T, CorporateSnsLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CorporateSnsLinks and returns the data updated in the database.
     * @param {CorporateSnsLinkUpdateManyAndReturnArgs} args - Arguments to update many CorporateSnsLinks.
     * @example
     * // Update many CorporateSnsLinks
     * const corporateSnsLink = await prisma.corporateSnsLink.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CorporateSnsLinks and only return the `id`
     * const corporateSnsLinkWithIdOnly = await prisma.corporateSnsLink.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CorporateSnsLinkUpdateManyAndReturnArgs>(args: SelectSubset<T, CorporateSnsLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CorporateSnsLink.
     * @param {CorporateSnsLinkUpsertArgs} args - Arguments to update or create a CorporateSnsLink.
     * @example
     * // Update or create a CorporateSnsLink
     * const corporateSnsLink = await prisma.corporateSnsLink.upsert({
     *   create: {
     *     // ... data to create a CorporateSnsLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CorporateSnsLink we want to update
     *   }
     * })
     */
    upsert<T extends CorporateSnsLinkUpsertArgs>(args: SelectSubset<T, CorporateSnsLinkUpsertArgs<ExtArgs>>): Prisma__CorporateSnsLinkClient<$Result.GetResult<Prisma.$CorporateSnsLinkPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CorporateSnsLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateSnsLinkCountArgs} args - Arguments to filter CorporateSnsLinks to count.
     * @example
     * // Count the number of CorporateSnsLinks
     * const count = await prisma.corporateSnsLink.count({
     *   where: {
     *     // ... the filter for the CorporateSnsLinks we want to count
     *   }
     * })
    **/
    count<T extends CorporateSnsLinkCountArgs>(
      args?: Subset<T, CorporateSnsLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CorporateSnsLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CorporateSnsLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateSnsLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CorporateSnsLinkAggregateArgs>(args: Subset<T, CorporateSnsLinkAggregateArgs>): Prisma.PrismaPromise<GetCorporateSnsLinkAggregateType<T>>

    /**
     * Group by CorporateSnsLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateSnsLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CorporateSnsLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CorporateSnsLinkGroupByArgs['orderBy'] }
        : { orderBy?: CorporateSnsLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CorporateSnsLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCorporateSnsLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CorporateSnsLink model
   */
  readonly fields: CorporateSnsLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CorporateSnsLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CorporateSnsLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends CorporateTenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CorporateTenantDefaultArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CorporateSnsLink model
   */ 
  interface CorporateSnsLinkFieldRefs {
    readonly id: FieldRef<"CorporateSnsLink", 'String'>
    readonly tenantId: FieldRef<"CorporateSnsLink", 'String'>
    readonly platform: FieldRef<"CorporateSnsLink", 'String'>
    readonly username: FieldRef<"CorporateSnsLink", 'String'>
    readonly url: FieldRef<"CorporateSnsLink", 'String'>
    readonly displayOrder: FieldRef<"CorporateSnsLink", 'Int'>
    readonly isRequired: FieldRef<"CorporateSnsLink", 'Boolean'>
    readonly createdAt: FieldRef<"CorporateSnsLink", 'DateTime'>
    readonly updatedAt: FieldRef<"CorporateSnsLink", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CorporateSnsLink findUnique
   */
  export type CorporateSnsLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkInclude<ExtArgs> | null
    /**
     * Filter, which CorporateSnsLink to fetch.
     */
    where: CorporateSnsLinkWhereUniqueInput
  }

  /**
   * CorporateSnsLink findUniqueOrThrow
   */
  export type CorporateSnsLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkInclude<ExtArgs> | null
    /**
     * Filter, which CorporateSnsLink to fetch.
     */
    where: CorporateSnsLinkWhereUniqueInput
  }

  /**
   * CorporateSnsLink findFirst
   */
  export type CorporateSnsLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkInclude<ExtArgs> | null
    /**
     * Filter, which CorporateSnsLink to fetch.
     */
    where?: CorporateSnsLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateSnsLinks to fetch.
     */
    orderBy?: CorporateSnsLinkOrderByWithRelationInput | CorporateSnsLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CorporateSnsLinks.
     */
    cursor?: CorporateSnsLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateSnsLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateSnsLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CorporateSnsLinks.
     */
    distinct?: CorporateSnsLinkScalarFieldEnum | CorporateSnsLinkScalarFieldEnum[]
  }

  /**
   * CorporateSnsLink findFirstOrThrow
   */
  export type CorporateSnsLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkInclude<ExtArgs> | null
    /**
     * Filter, which CorporateSnsLink to fetch.
     */
    where?: CorporateSnsLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateSnsLinks to fetch.
     */
    orderBy?: CorporateSnsLinkOrderByWithRelationInput | CorporateSnsLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CorporateSnsLinks.
     */
    cursor?: CorporateSnsLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateSnsLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateSnsLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CorporateSnsLinks.
     */
    distinct?: CorporateSnsLinkScalarFieldEnum | CorporateSnsLinkScalarFieldEnum[]
  }

  /**
   * CorporateSnsLink findMany
   */
  export type CorporateSnsLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkInclude<ExtArgs> | null
    /**
     * Filter, which CorporateSnsLinks to fetch.
     */
    where?: CorporateSnsLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateSnsLinks to fetch.
     */
    orderBy?: CorporateSnsLinkOrderByWithRelationInput | CorporateSnsLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CorporateSnsLinks.
     */
    cursor?: CorporateSnsLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateSnsLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateSnsLinks.
     */
    skip?: number
    distinct?: CorporateSnsLinkScalarFieldEnum | CorporateSnsLinkScalarFieldEnum[]
  }

  /**
   * CorporateSnsLink create
   */
  export type CorporateSnsLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a CorporateSnsLink.
     */
    data: XOR<CorporateSnsLinkCreateInput, CorporateSnsLinkUncheckedCreateInput>
  }

  /**
   * CorporateSnsLink createMany
   */
  export type CorporateSnsLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CorporateSnsLinks.
     */
    data: CorporateSnsLinkCreateManyInput | CorporateSnsLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CorporateSnsLink createManyAndReturn
   */
  export type CorporateSnsLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * The data used to create many CorporateSnsLinks.
     */
    data: CorporateSnsLinkCreateManyInput | CorporateSnsLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CorporateSnsLink update
   */
  export type CorporateSnsLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a CorporateSnsLink.
     */
    data: XOR<CorporateSnsLinkUpdateInput, CorporateSnsLinkUncheckedUpdateInput>
    /**
     * Choose, which CorporateSnsLink to update.
     */
    where: CorporateSnsLinkWhereUniqueInput
  }

  /**
   * CorporateSnsLink updateMany
   */
  export type CorporateSnsLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CorporateSnsLinks.
     */
    data: XOR<CorporateSnsLinkUpdateManyMutationInput, CorporateSnsLinkUncheckedUpdateManyInput>
    /**
     * Filter which CorporateSnsLinks to update
     */
    where?: CorporateSnsLinkWhereInput
    /**
     * Limit how many CorporateSnsLinks to update.
     */
    limit?: number
  }

  /**
   * CorporateSnsLink updateManyAndReturn
   */
  export type CorporateSnsLinkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * The data used to update CorporateSnsLinks.
     */
    data: XOR<CorporateSnsLinkUpdateManyMutationInput, CorporateSnsLinkUncheckedUpdateManyInput>
    /**
     * Filter which CorporateSnsLinks to update
     */
    where?: CorporateSnsLinkWhereInput
    /**
     * Limit how many CorporateSnsLinks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CorporateSnsLink upsert
   */
  export type CorporateSnsLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the CorporateSnsLink to update in case it exists.
     */
    where: CorporateSnsLinkWhereUniqueInput
    /**
     * In case the CorporateSnsLink found by the `where` argument doesn't exist, create a new CorporateSnsLink with this data.
     */
    create: XOR<CorporateSnsLinkCreateInput, CorporateSnsLinkUncheckedCreateInput>
    /**
     * In case the CorporateSnsLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CorporateSnsLinkUpdateInput, CorporateSnsLinkUncheckedUpdateInput>
  }

  /**
   * CorporateSnsLink delete
   */
  export type CorporateSnsLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkInclude<ExtArgs> | null
    /**
     * Filter which CorporateSnsLink to delete.
     */
    where: CorporateSnsLinkWhereUniqueInput
  }

  /**
   * CorporateSnsLink deleteMany
   */
  export type CorporateSnsLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CorporateSnsLinks to delete
     */
    where?: CorporateSnsLinkWhereInput
    /**
     * Limit how many CorporateSnsLinks to delete.
     */
    limit?: number
  }

  /**
   * CorporateSnsLink without action
   */
  export type CorporateSnsLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateSnsLink
     */
    select?: CorporateSnsLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateSnsLink
     */
    omit?: CorporateSnsLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateSnsLinkInclude<ExtArgs> | null
  }


  /**
   * Model CorporateActivityLog
   */

  export type AggregateCorporateActivityLog = {
    _count: CorporateActivityLogCountAggregateOutputType | null
    _min: CorporateActivityLogMinAggregateOutputType | null
    _max: CorporateActivityLogMaxAggregateOutputType | null
  }

  export type CorporateActivityLogMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    userId: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    description: string | null
    createdAt: Date | null
  }

  export type CorporateActivityLogMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    userId: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    description: string | null
    createdAt: Date | null
  }

  export type CorporateActivityLogCountAggregateOutputType = {
    id: number
    tenantId: number
    userId: number
    action: number
    entityType: number
    entityId: number
    description: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type CorporateActivityLogMinAggregateInputType = {
    id?: true
    tenantId?: true
    userId?: true
    action?: true
    entityType?: true
    entityId?: true
    description?: true
    createdAt?: true
  }

  export type CorporateActivityLogMaxAggregateInputType = {
    id?: true
    tenantId?: true
    userId?: true
    action?: true
    entityType?: true
    entityId?: true
    description?: true
    createdAt?: true
  }

  export type CorporateActivityLogCountAggregateInputType = {
    id?: true
    tenantId?: true
    userId?: true
    action?: true
    entityType?: true
    entityId?: true
    description?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type CorporateActivityLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CorporateActivityLog to aggregate.
     */
    where?: CorporateActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateActivityLogs to fetch.
     */
    orderBy?: CorporateActivityLogOrderByWithRelationInput | CorporateActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CorporateActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CorporateActivityLogs
    **/
    _count?: true | CorporateActivityLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CorporateActivityLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CorporateActivityLogMaxAggregateInputType
  }

  export type GetCorporateActivityLogAggregateType<T extends CorporateActivityLogAggregateArgs> = {
        [P in keyof T & keyof AggregateCorporateActivityLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCorporateActivityLog[P]>
      : GetScalarType<T[P], AggregateCorporateActivityLog[P]>
  }




  export type CorporateActivityLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorporateActivityLogWhereInput
    orderBy?: CorporateActivityLogOrderByWithAggregationInput | CorporateActivityLogOrderByWithAggregationInput[]
    by: CorporateActivityLogScalarFieldEnum[] | CorporateActivityLogScalarFieldEnum
    having?: CorporateActivityLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CorporateActivityLogCountAggregateInputType | true
    _min?: CorporateActivityLogMinAggregateInputType
    _max?: CorporateActivityLogMaxAggregateInputType
  }

  export type CorporateActivityLogGroupByOutputType = {
    id: string
    tenantId: string
    userId: string | null
    action: string
    entityType: string
    entityId: string | null
    description: string
    metadata: JsonValue | null
    createdAt: Date
    _count: CorporateActivityLogCountAggregateOutputType | null
    _min: CorporateActivityLogMinAggregateOutputType | null
    _max: CorporateActivityLogMaxAggregateOutputType | null
  }

  type GetCorporateActivityLogGroupByPayload<T extends CorporateActivityLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CorporateActivityLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CorporateActivityLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CorporateActivityLogGroupByOutputType[P]>
            : GetScalarType<T[P], CorporateActivityLogGroupByOutputType[P]>
        }
      >
    >


  export type CorporateActivityLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    userId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
    user?: boolean | CorporateActivityLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["corporateActivityLog"]>

  export type CorporateActivityLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    userId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
    user?: boolean | CorporateActivityLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["corporateActivityLog"]>

  export type CorporateActivityLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    userId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
    user?: boolean | CorporateActivityLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["corporateActivityLog"]>

  export type CorporateActivityLogSelectScalar = {
    id?: boolean
    tenantId?: boolean
    userId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type CorporateActivityLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tenantId" | "userId" | "action" | "entityType" | "entityId" | "description" | "metadata" | "createdAt", ExtArgs["result"]["corporateActivityLog"]>
  export type CorporateActivityLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
    user?: boolean | CorporateActivityLog$userArgs<ExtArgs>
  }
  export type CorporateActivityLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
    user?: boolean | CorporateActivityLog$userArgs<ExtArgs>
  }
  export type CorporateActivityLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | CorporateTenantDefaultArgs<ExtArgs>
    user?: boolean | CorporateActivityLog$userArgs<ExtArgs>
  }

  export type $CorporateActivityLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CorporateActivityLog"
    objects: {
      tenant: Prisma.$CorporateTenantPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      userId: string | null
      action: string
      entityType: string
      entityId: string | null
      description: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["corporateActivityLog"]>
    composites: {}
  }

  type CorporateActivityLogGetPayload<S extends boolean | null | undefined | CorporateActivityLogDefaultArgs> = $Result.GetResult<Prisma.$CorporateActivityLogPayload, S>

  type CorporateActivityLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CorporateActivityLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CorporateActivityLogCountAggregateInputType | true
    }

  export interface CorporateActivityLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CorporateActivityLog'], meta: { name: 'CorporateActivityLog' } }
    /**
     * Find zero or one CorporateActivityLog that matches the filter.
     * @param {CorporateActivityLogFindUniqueArgs} args - Arguments to find a CorporateActivityLog
     * @example
     * // Get one CorporateActivityLog
     * const corporateActivityLog = await prisma.corporateActivityLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CorporateActivityLogFindUniqueArgs>(args: SelectSubset<T, CorporateActivityLogFindUniqueArgs<ExtArgs>>): Prisma__CorporateActivityLogClient<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CorporateActivityLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CorporateActivityLogFindUniqueOrThrowArgs} args - Arguments to find a CorporateActivityLog
     * @example
     * // Get one CorporateActivityLog
     * const corporateActivityLog = await prisma.corporateActivityLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CorporateActivityLogFindUniqueOrThrowArgs>(args: SelectSubset<T, CorporateActivityLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CorporateActivityLogClient<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CorporateActivityLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActivityLogFindFirstArgs} args - Arguments to find a CorporateActivityLog
     * @example
     * // Get one CorporateActivityLog
     * const corporateActivityLog = await prisma.corporateActivityLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CorporateActivityLogFindFirstArgs>(args?: SelectSubset<T, CorporateActivityLogFindFirstArgs<ExtArgs>>): Prisma__CorporateActivityLogClient<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CorporateActivityLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActivityLogFindFirstOrThrowArgs} args - Arguments to find a CorporateActivityLog
     * @example
     * // Get one CorporateActivityLog
     * const corporateActivityLog = await prisma.corporateActivityLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CorporateActivityLogFindFirstOrThrowArgs>(args?: SelectSubset<T, CorporateActivityLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__CorporateActivityLogClient<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CorporateActivityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActivityLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CorporateActivityLogs
     * const corporateActivityLogs = await prisma.corporateActivityLog.findMany()
     * 
     * // Get first 10 CorporateActivityLogs
     * const corporateActivityLogs = await prisma.corporateActivityLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const corporateActivityLogWithIdOnly = await prisma.corporateActivityLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CorporateActivityLogFindManyArgs>(args?: SelectSubset<T, CorporateActivityLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CorporateActivityLog.
     * @param {CorporateActivityLogCreateArgs} args - Arguments to create a CorporateActivityLog.
     * @example
     * // Create one CorporateActivityLog
     * const CorporateActivityLog = await prisma.corporateActivityLog.create({
     *   data: {
     *     // ... data to create a CorporateActivityLog
     *   }
     * })
     * 
     */
    create<T extends CorporateActivityLogCreateArgs>(args: SelectSubset<T, CorporateActivityLogCreateArgs<ExtArgs>>): Prisma__CorporateActivityLogClient<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CorporateActivityLogs.
     * @param {CorporateActivityLogCreateManyArgs} args - Arguments to create many CorporateActivityLogs.
     * @example
     * // Create many CorporateActivityLogs
     * const corporateActivityLog = await prisma.corporateActivityLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CorporateActivityLogCreateManyArgs>(args?: SelectSubset<T, CorporateActivityLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CorporateActivityLogs and returns the data saved in the database.
     * @param {CorporateActivityLogCreateManyAndReturnArgs} args - Arguments to create many CorporateActivityLogs.
     * @example
     * // Create many CorporateActivityLogs
     * const corporateActivityLog = await prisma.corporateActivityLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CorporateActivityLogs and only return the `id`
     * const corporateActivityLogWithIdOnly = await prisma.corporateActivityLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CorporateActivityLogCreateManyAndReturnArgs>(args?: SelectSubset<T, CorporateActivityLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CorporateActivityLog.
     * @param {CorporateActivityLogDeleteArgs} args - Arguments to delete one CorporateActivityLog.
     * @example
     * // Delete one CorporateActivityLog
     * const CorporateActivityLog = await prisma.corporateActivityLog.delete({
     *   where: {
     *     // ... filter to delete one CorporateActivityLog
     *   }
     * })
     * 
     */
    delete<T extends CorporateActivityLogDeleteArgs>(args: SelectSubset<T, CorporateActivityLogDeleteArgs<ExtArgs>>): Prisma__CorporateActivityLogClient<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CorporateActivityLog.
     * @param {CorporateActivityLogUpdateArgs} args - Arguments to update one CorporateActivityLog.
     * @example
     * // Update one CorporateActivityLog
     * const corporateActivityLog = await prisma.corporateActivityLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CorporateActivityLogUpdateArgs>(args: SelectSubset<T, CorporateActivityLogUpdateArgs<ExtArgs>>): Prisma__CorporateActivityLogClient<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CorporateActivityLogs.
     * @param {CorporateActivityLogDeleteManyArgs} args - Arguments to filter CorporateActivityLogs to delete.
     * @example
     * // Delete a few CorporateActivityLogs
     * const { count } = await prisma.corporateActivityLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CorporateActivityLogDeleteManyArgs>(args?: SelectSubset<T, CorporateActivityLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CorporateActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActivityLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CorporateActivityLogs
     * const corporateActivityLog = await prisma.corporateActivityLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CorporateActivityLogUpdateManyArgs>(args: SelectSubset<T, CorporateActivityLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CorporateActivityLogs and returns the data updated in the database.
     * @param {CorporateActivityLogUpdateManyAndReturnArgs} args - Arguments to update many CorporateActivityLogs.
     * @example
     * // Update many CorporateActivityLogs
     * const corporateActivityLog = await prisma.corporateActivityLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CorporateActivityLogs and only return the `id`
     * const corporateActivityLogWithIdOnly = await prisma.corporateActivityLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CorporateActivityLogUpdateManyAndReturnArgs>(args: SelectSubset<T, CorporateActivityLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CorporateActivityLog.
     * @param {CorporateActivityLogUpsertArgs} args - Arguments to update or create a CorporateActivityLog.
     * @example
     * // Update or create a CorporateActivityLog
     * const corporateActivityLog = await prisma.corporateActivityLog.upsert({
     *   create: {
     *     // ... data to create a CorporateActivityLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CorporateActivityLog we want to update
     *   }
     * })
     */
    upsert<T extends CorporateActivityLogUpsertArgs>(args: SelectSubset<T, CorporateActivityLogUpsertArgs<ExtArgs>>): Prisma__CorporateActivityLogClient<$Result.GetResult<Prisma.$CorporateActivityLogPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CorporateActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActivityLogCountArgs} args - Arguments to filter CorporateActivityLogs to count.
     * @example
     * // Count the number of CorporateActivityLogs
     * const count = await prisma.corporateActivityLog.count({
     *   where: {
     *     // ... the filter for the CorporateActivityLogs we want to count
     *   }
     * })
    **/
    count<T extends CorporateActivityLogCountArgs>(
      args?: Subset<T, CorporateActivityLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CorporateActivityLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CorporateActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActivityLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CorporateActivityLogAggregateArgs>(args: Subset<T, CorporateActivityLogAggregateArgs>): Prisma.PrismaPromise<GetCorporateActivityLogAggregateType<T>>

    /**
     * Group by CorporateActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActivityLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CorporateActivityLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CorporateActivityLogGroupByArgs['orderBy'] }
        : { orderBy?: CorporateActivityLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CorporateActivityLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCorporateActivityLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CorporateActivityLog model
   */
  readonly fields: CorporateActivityLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CorporateActivityLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CorporateActivityLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends CorporateTenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CorporateTenantDefaultArgs<ExtArgs>>): Prisma__CorporateTenantClient<$Result.GetResult<Prisma.$CorporateTenantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    user<T extends CorporateActivityLog$userArgs<ExtArgs> = {}>(args?: Subset<T, CorporateActivityLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CorporateActivityLog model
   */ 
  interface CorporateActivityLogFieldRefs {
    readonly id: FieldRef<"CorporateActivityLog", 'String'>
    readonly tenantId: FieldRef<"CorporateActivityLog", 'String'>
    readonly userId: FieldRef<"CorporateActivityLog", 'String'>
    readonly action: FieldRef<"CorporateActivityLog", 'String'>
    readonly entityType: FieldRef<"CorporateActivityLog", 'String'>
    readonly entityId: FieldRef<"CorporateActivityLog", 'String'>
    readonly description: FieldRef<"CorporateActivityLog", 'String'>
    readonly metadata: FieldRef<"CorporateActivityLog", 'Json'>
    readonly createdAt: FieldRef<"CorporateActivityLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CorporateActivityLog findUnique
   */
  export type CorporateActivityLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which CorporateActivityLog to fetch.
     */
    where: CorporateActivityLogWhereUniqueInput
  }

  /**
   * CorporateActivityLog findUniqueOrThrow
   */
  export type CorporateActivityLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which CorporateActivityLog to fetch.
     */
    where: CorporateActivityLogWhereUniqueInput
  }

  /**
   * CorporateActivityLog findFirst
   */
  export type CorporateActivityLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which CorporateActivityLog to fetch.
     */
    where?: CorporateActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateActivityLogs to fetch.
     */
    orderBy?: CorporateActivityLogOrderByWithRelationInput | CorporateActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CorporateActivityLogs.
     */
    cursor?: CorporateActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CorporateActivityLogs.
     */
    distinct?: CorporateActivityLogScalarFieldEnum | CorporateActivityLogScalarFieldEnum[]
  }

  /**
   * CorporateActivityLog findFirstOrThrow
   */
  export type CorporateActivityLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which CorporateActivityLog to fetch.
     */
    where?: CorporateActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateActivityLogs to fetch.
     */
    orderBy?: CorporateActivityLogOrderByWithRelationInput | CorporateActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CorporateActivityLogs.
     */
    cursor?: CorporateActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CorporateActivityLogs.
     */
    distinct?: CorporateActivityLogScalarFieldEnum | CorporateActivityLogScalarFieldEnum[]
  }

  /**
   * CorporateActivityLog findMany
   */
  export type CorporateActivityLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which CorporateActivityLogs to fetch.
     */
    where?: CorporateActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateActivityLogs to fetch.
     */
    orderBy?: CorporateActivityLogOrderByWithRelationInput | CorporateActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CorporateActivityLogs.
     */
    cursor?: CorporateActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateActivityLogs.
     */
    skip?: number
    distinct?: CorporateActivityLogScalarFieldEnum | CorporateActivityLogScalarFieldEnum[]
  }

  /**
   * CorporateActivityLog create
   */
  export type CorporateActivityLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to create a CorporateActivityLog.
     */
    data: XOR<CorporateActivityLogCreateInput, CorporateActivityLogUncheckedCreateInput>
  }

  /**
   * CorporateActivityLog createMany
   */
  export type CorporateActivityLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CorporateActivityLogs.
     */
    data: CorporateActivityLogCreateManyInput | CorporateActivityLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CorporateActivityLog createManyAndReturn
   */
  export type CorporateActivityLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * The data used to create many CorporateActivityLogs.
     */
    data: CorporateActivityLogCreateManyInput | CorporateActivityLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CorporateActivityLog update
   */
  export type CorporateActivityLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to update a CorporateActivityLog.
     */
    data: XOR<CorporateActivityLogUpdateInput, CorporateActivityLogUncheckedUpdateInput>
    /**
     * Choose, which CorporateActivityLog to update.
     */
    where: CorporateActivityLogWhereUniqueInput
  }

  /**
   * CorporateActivityLog updateMany
   */
  export type CorporateActivityLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CorporateActivityLogs.
     */
    data: XOR<CorporateActivityLogUpdateManyMutationInput, CorporateActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which CorporateActivityLogs to update
     */
    where?: CorporateActivityLogWhereInput
    /**
     * Limit how many CorporateActivityLogs to update.
     */
    limit?: number
  }

  /**
   * CorporateActivityLog updateManyAndReturn
   */
  export type CorporateActivityLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * The data used to update CorporateActivityLogs.
     */
    data: XOR<CorporateActivityLogUpdateManyMutationInput, CorporateActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which CorporateActivityLogs to update
     */
    where?: CorporateActivityLogWhereInput
    /**
     * Limit how many CorporateActivityLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CorporateActivityLog upsert
   */
  export type CorporateActivityLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
    /**
     * The filter to search for the CorporateActivityLog to update in case it exists.
     */
    where: CorporateActivityLogWhereUniqueInput
    /**
     * In case the CorporateActivityLog found by the `where` argument doesn't exist, create a new CorporateActivityLog with this data.
     */
    create: XOR<CorporateActivityLogCreateInput, CorporateActivityLogUncheckedCreateInput>
    /**
     * In case the CorporateActivityLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CorporateActivityLogUpdateInput, CorporateActivityLogUncheckedUpdateInput>
  }

  /**
   * CorporateActivityLog delete
   */
  export type CorporateActivityLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
    /**
     * Filter which CorporateActivityLog to delete.
     */
    where: CorporateActivityLogWhereUniqueInput
  }

  /**
   * CorporateActivityLog deleteMany
   */
  export type CorporateActivityLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CorporateActivityLogs to delete
     */
    where?: CorporateActivityLogWhereInput
    /**
     * Limit how many CorporateActivityLogs to delete.
     */
    limit?: number
  }

  /**
   * CorporateActivityLog.user
   */
  export type CorporateActivityLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CorporateActivityLog without action
   */
  export type CorporateActivityLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateActivityLog
     */
    select?: CorporateActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateActivityLog
     */
    omit?: CorporateActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorporateActivityLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    nameEn: 'nameEn',
    password: 'password',
    image: 'image',
    bio: 'bio',
    mainColor: 'mainColor',
    snsIconColor: 'snsIconColor',
    bioBackgroundColor: 'bioBackgroundColor',
    bioTextColor: 'bioTextColor',
    phone: 'phone',
    company: 'company',
    companyUrl: 'companyUrl',
    companyLabel: 'companyLabel',
    emailVerified: 'emailVerified',
    stripeCustomerId: 'stripeCustomerId',
    trialEndsAt: 'trialEndsAt',
    subscriptionStatus: 'subscriptionStatus',
    corporateRole: 'corporateRole',
    position: 'position',
    departmentId: 'departmentId',
    tenantId: 'tenantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    slug: 'slug',
    views: 'views',
    isPublic: 'isPublic',
    lastAccessed: 'lastAccessed',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const SnsLinkScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    platform: 'platform',
    username: 'username',
    url: 'url',
    displayOrder: 'displayOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SnsLinkScalarFieldEnum = (typeof SnsLinkScalarFieldEnum)[keyof typeof SnsLinkScalarFieldEnum]


  export const CustomLinkScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    url: 'url',
    displayOrder: 'displayOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomLinkScalarFieldEnum = (typeof CustomLinkScalarFieldEnum)[keyof typeof CustomLinkScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    status: 'status',
    plan: 'plan',
    priceId: 'priceId',
    subscriptionId: 'subscriptionId',
    currentPeriodStart: 'currentPeriodStart',
    currentPeriodEnd: 'currentPeriodEnd',
    cancelAtPeriodEnd: 'cancelAtPeriodEnd',
    trialStart: 'trialStart',
    trialEnd: 'trialEnd',
    canceledAt: 'canceledAt',
    cancelReason: 'cancelReason',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const BillingRecordScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    invoiceId: 'invoiceId',
    amount: 'amount',
    status: 'status',
    description: 'description',
    paidAt: 'paidAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BillingRecordScalarFieldEnum = (typeof BillingRecordScalarFieldEnum)[keyof typeof BillingRecordScalarFieldEnum]


  export const PasswordResetTokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    expires: 'expires',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type PasswordResetTokenScalarFieldEnum = (typeof PasswordResetTokenScalarFieldEnum)[keyof typeof PasswordResetTokenScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    email: 'email',
    companyName: 'companyName',
    type: 'type',
    subject: 'subject',
    message: 'message',
    status: 'status',
    notes: 'notes',
    assignedTo: 'assignedTo',
    userId: 'userId'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const CorporateTenantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logoUrl: 'logoUrl',
    logoWidth: 'logoWidth',
    logoHeight: 'logoHeight',
    primaryColor: 'primaryColor',
    secondaryColor: 'secondaryColor',
    headerText: 'headerText',
    textColor: 'textColor',
    customDomain: 'customDomain',
    maxUsers: 'maxUsers',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    securitySettings: 'securitySettings',
    notificationSettings: 'notificationSettings',
    billingAddress: 'billingAddress',
    billingEmail: 'billingEmail',
    billingContact: 'billingContact',
    accountStatus: 'accountStatus',
    dataRetentionDays: 'dataRetentionDays',
    subscriptionId: 'subscriptionId',
    adminId: 'adminId'
  };

  export type CorporateTenantScalarFieldEnum = (typeof CorporateTenantScalarFieldEnum)[keyof typeof CorporateTenantScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tenantId: 'tenantId'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const CorporateSnsLinkScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    platform: 'platform',
    username: 'username',
    url: 'url',
    displayOrder: 'displayOrder',
    isRequired: 'isRequired',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CorporateSnsLinkScalarFieldEnum = (typeof CorporateSnsLinkScalarFieldEnum)[keyof typeof CorporateSnsLinkScalarFieldEnum]


  export const CorporateActivityLogScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    userId: 'userId',
    action: 'action',
    entityType: 'entityType',
    entityId: 'entityId',
    description: 'description',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type CorporateActivityLogScalarFieldEnum = (typeof CorporateActivityLogScalarFieldEnum)[keyof typeof CorporateActivityLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    nameEn?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    mainColor?: StringFilter<"User"> | string
    snsIconColor?: StringNullableFilter<"User"> | string | null
    bioBackgroundColor?: StringNullableFilter<"User"> | string | null
    bioTextColor?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    company?: StringNullableFilter<"User"> | string | null
    companyUrl?: StringNullableFilter<"User"> | string | null
    companyLabel?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    stripeCustomerId?: StringNullableFilter<"User"> | string | null
    trialEndsAt?: DateTimeNullableFilter<"User"> | Date | string | null
    subscriptionStatus?: StringNullableFilter<"User"> | string | null
    corporateRole?: StringNullableFilter<"User"> | string | null
    position?: StringNullableFilter<"User"> | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
    tenantId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    passwordResetTokens?: PasswordResetTokenListRelationFilter
    activityLogs?: CorporateActivityLogListRelationFilter
    accounts?: AccountListRelationFilter
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    customLinks?: CustomLinkListRelationFilter
    snsLinks?: SnsLinkListRelationFilter
    subscription?: XOR<SubscriptionNullableScalarRelationFilter, SubscriptionWhereInput> | null
    billingHistory?: BillingRecordListRelationFilter
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    tenant?: XOR<CorporateTenantNullableScalarRelationFilter, CorporateTenantWhereInput> | null
    adminOfTenant?: XOR<CorporateTenantNullableScalarRelationFilter, CorporateTenantWhereInput> | null
    contacts?: ContactListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    mainColor?: SortOrder
    snsIconColor?: SortOrderInput | SortOrder
    bioBackgroundColor?: SortOrderInput | SortOrder
    bioTextColor?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    companyUrl?: SortOrderInput | SortOrder
    companyLabel?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    subscriptionStatus?: SortOrderInput | SortOrder
    corporateRole?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordResetTokens?: PasswordResetTokenOrderByRelationAggregateInput
    activityLogs?: CorporateActivityLogOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    profile?: ProfileOrderByWithRelationInput
    customLinks?: CustomLinkOrderByRelationAggregateInput
    snsLinks?: SnsLinkOrderByRelationAggregateInput
    subscription?: SubscriptionOrderByWithRelationInput
    billingHistory?: BillingRecordOrderByRelationAggregateInput
    department?: DepartmentOrderByWithRelationInput
    tenant?: CorporateTenantOrderByWithRelationInput
    adminOfTenant?: CorporateTenantOrderByWithRelationInput
    contacts?: ContactOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    nameEn?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    mainColor?: StringFilter<"User"> | string
    snsIconColor?: StringNullableFilter<"User"> | string | null
    bioBackgroundColor?: StringNullableFilter<"User"> | string | null
    bioTextColor?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    company?: StringNullableFilter<"User"> | string | null
    companyUrl?: StringNullableFilter<"User"> | string | null
    companyLabel?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    stripeCustomerId?: StringNullableFilter<"User"> | string | null
    trialEndsAt?: DateTimeNullableFilter<"User"> | Date | string | null
    subscriptionStatus?: StringNullableFilter<"User"> | string | null
    corporateRole?: StringNullableFilter<"User"> | string | null
    position?: StringNullableFilter<"User"> | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
    tenantId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    passwordResetTokens?: PasswordResetTokenListRelationFilter
    activityLogs?: CorporateActivityLogListRelationFilter
    accounts?: AccountListRelationFilter
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    customLinks?: CustomLinkListRelationFilter
    snsLinks?: SnsLinkListRelationFilter
    subscription?: XOR<SubscriptionNullableScalarRelationFilter, SubscriptionWhereInput> | null
    billingHistory?: BillingRecordListRelationFilter
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    tenant?: XOR<CorporateTenantNullableScalarRelationFilter, CorporateTenantWhereInput> | null
    adminOfTenant?: XOR<CorporateTenantNullableScalarRelationFilter, CorporateTenantWhereInput> | null
    contacts?: ContactListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    nameEn?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    mainColor?: SortOrder
    snsIconColor?: SortOrderInput | SortOrder
    bioBackgroundColor?: SortOrderInput | SortOrder
    bioTextColor?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    companyUrl?: SortOrderInput | SortOrder
    companyLabel?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    subscriptionStatus?: SortOrderInput | SortOrder
    corporateRole?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    tenantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    nameEn?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    mainColor?: StringWithAggregatesFilter<"User"> | string
    snsIconColor?: StringNullableWithAggregatesFilter<"User"> | string | null
    bioBackgroundColor?: StringNullableWithAggregatesFilter<"User"> | string | null
    bioTextColor?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    company?: StringNullableWithAggregatesFilter<"User"> | string | null
    companyUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    companyLabel?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    stripeCustomerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    trialEndsAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    subscriptionStatus?: StringNullableWithAggregatesFilter<"User"> | string | null
    corporateRole?: StringNullableWithAggregatesFilter<"User"> | string | null
    position?: StringNullableWithAggregatesFilter<"User"> | string | null
    departmentId?: StringNullableWithAggregatesFilter<"User"> | string | null
    tenantId?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    userId?: StringFilter<"Profile"> | string
    slug?: StringFilter<"Profile"> | string
    views?: IntFilter<"Profile"> | number
    isPublic?: BoolFilter<"Profile"> | boolean
    lastAccessed?: DateTimeNullableFilter<"Profile"> | Date | string | null
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    slug?: SortOrder
    views?: SortOrder
    isPublic?: SortOrder
    lastAccessed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    slug?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    views?: IntFilter<"Profile"> | number
    isPublic?: BoolFilter<"Profile"> | boolean
    lastAccessed?: DateTimeNullableFilter<"Profile"> | Date | string | null
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId" | "slug">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    slug?: SortOrder
    views?: SortOrder
    isPublic?: SortOrder
    lastAccessed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    userId?: StringWithAggregatesFilter<"Profile"> | string
    slug?: StringWithAggregatesFilter<"Profile"> | string
    views?: IntWithAggregatesFilter<"Profile"> | number
    isPublic?: BoolWithAggregatesFilter<"Profile"> | boolean
    lastAccessed?: DateTimeNullableWithAggregatesFilter<"Profile"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
  }

  export type SnsLinkWhereInput = {
    AND?: SnsLinkWhereInput | SnsLinkWhereInput[]
    OR?: SnsLinkWhereInput[]
    NOT?: SnsLinkWhereInput | SnsLinkWhereInput[]
    id?: StringFilter<"SnsLink"> | string
    userId?: StringFilter<"SnsLink"> | string
    platform?: StringFilter<"SnsLink"> | string
    username?: StringNullableFilter<"SnsLink"> | string | null
    url?: StringFilter<"SnsLink"> | string
    displayOrder?: IntFilter<"SnsLink"> | number
    createdAt?: DateTimeFilter<"SnsLink"> | Date | string
    updatedAt?: DateTimeFilter<"SnsLink"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SnsLinkOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    username?: SortOrderInput | SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SnsLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_platform?: SnsLinkUserIdPlatformCompoundUniqueInput
    AND?: SnsLinkWhereInput | SnsLinkWhereInput[]
    OR?: SnsLinkWhereInput[]
    NOT?: SnsLinkWhereInput | SnsLinkWhereInput[]
    userId?: StringFilter<"SnsLink"> | string
    platform?: StringFilter<"SnsLink"> | string
    username?: StringNullableFilter<"SnsLink"> | string | null
    url?: StringFilter<"SnsLink"> | string
    displayOrder?: IntFilter<"SnsLink"> | number
    createdAt?: DateTimeFilter<"SnsLink"> | Date | string
    updatedAt?: DateTimeFilter<"SnsLink"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_platform">

  export type SnsLinkOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    username?: SortOrderInput | SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SnsLinkCountOrderByAggregateInput
    _avg?: SnsLinkAvgOrderByAggregateInput
    _max?: SnsLinkMaxOrderByAggregateInput
    _min?: SnsLinkMinOrderByAggregateInput
    _sum?: SnsLinkSumOrderByAggregateInput
  }

  export type SnsLinkScalarWhereWithAggregatesInput = {
    AND?: SnsLinkScalarWhereWithAggregatesInput | SnsLinkScalarWhereWithAggregatesInput[]
    OR?: SnsLinkScalarWhereWithAggregatesInput[]
    NOT?: SnsLinkScalarWhereWithAggregatesInput | SnsLinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SnsLink"> | string
    userId?: StringWithAggregatesFilter<"SnsLink"> | string
    platform?: StringWithAggregatesFilter<"SnsLink"> | string
    username?: StringNullableWithAggregatesFilter<"SnsLink"> | string | null
    url?: StringWithAggregatesFilter<"SnsLink"> | string
    displayOrder?: IntWithAggregatesFilter<"SnsLink"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SnsLink"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SnsLink"> | Date | string
  }

  export type CustomLinkWhereInput = {
    AND?: CustomLinkWhereInput | CustomLinkWhereInput[]
    OR?: CustomLinkWhereInput[]
    NOT?: CustomLinkWhereInput | CustomLinkWhereInput[]
    id?: StringFilter<"CustomLink"> | string
    userId?: StringFilter<"CustomLink"> | string
    name?: StringFilter<"CustomLink"> | string
    url?: StringFilter<"CustomLink"> | string
    displayOrder?: IntFilter<"CustomLink"> | number
    createdAt?: DateTimeFilter<"CustomLink"> | Date | string
    updatedAt?: DateTimeFilter<"CustomLink"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CustomLinkOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CustomLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomLinkWhereInput | CustomLinkWhereInput[]
    OR?: CustomLinkWhereInput[]
    NOT?: CustomLinkWhereInput | CustomLinkWhereInput[]
    userId?: StringFilter<"CustomLink"> | string
    name?: StringFilter<"CustomLink"> | string
    url?: StringFilter<"CustomLink"> | string
    displayOrder?: IntFilter<"CustomLink"> | number
    createdAt?: DateTimeFilter<"CustomLink"> | Date | string
    updatedAt?: DateTimeFilter<"CustomLink"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CustomLinkOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomLinkCountOrderByAggregateInput
    _avg?: CustomLinkAvgOrderByAggregateInput
    _max?: CustomLinkMaxOrderByAggregateInput
    _min?: CustomLinkMinOrderByAggregateInput
    _sum?: CustomLinkSumOrderByAggregateInput
  }

  export type CustomLinkScalarWhereWithAggregatesInput = {
    AND?: CustomLinkScalarWhereWithAggregatesInput | CustomLinkScalarWhereWithAggregatesInput[]
    OR?: CustomLinkScalarWhereWithAggregatesInput[]
    NOT?: CustomLinkScalarWhereWithAggregatesInput | CustomLinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomLink"> | string
    userId?: StringWithAggregatesFilter<"CustomLink"> | string
    name?: StringWithAggregatesFilter<"CustomLink"> | string
    url?: StringWithAggregatesFilter<"CustomLink"> | string
    displayOrder?: IntWithAggregatesFilter<"CustomLink"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CustomLink"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CustomLink"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringNullableFilter<"Account"> | string | null
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrderInput | SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringNullableFilter<"Account"> | string | null
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrderInput | SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: StringFilter<"Subscription"> | string
    userId?: StringFilter<"Subscription"> | string
    status?: StringFilter<"Subscription"> | string
    plan?: StringFilter<"Subscription"> | string
    priceId?: StringNullableFilter<"Subscription"> | string | null
    subscriptionId?: StringNullableFilter<"Subscription"> | string | null
    currentPeriodStart?: DateTimeFilter<"Subscription"> | Date | string
    currentPeriodEnd?: DateTimeFilter<"Subscription"> | Date | string
    cancelAtPeriodEnd?: BoolFilter<"Subscription"> | boolean
    trialStart?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    trialEnd?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    canceledAt?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    cancelReason?: StringNullableFilter<"Subscription"> | string | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    corporateTenant?: XOR<CorporateTenantNullableScalarRelationFilter, CorporateTenantWhereInput> | null
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    plan?: SortOrder
    priceId?: SortOrderInput | SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    trialStart?: SortOrderInput | SortOrder
    trialEnd?: SortOrderInput | SortOrder
    canceledAt?: SortOrderInput | SortOrder
    cancelReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    corporateTenant?: CorporateTenantOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    status?: StringFilter<"Subscription"> | string
    plan?: StringFilter<"Subscription"> | string
    priceId?: StringNullableFilter<"Subscription"> | string | null
    subscriptionId?: StringNullableFilter<"Subscription"> | string | null
    currentPeriodStart?: DateTimeFilter<"Subscription"> | Date | string
    currentPeriodEnd?: DateTimeFilter<"Subscription"> | Date | string
    cancelAtPeriodEnd?: BoolFilter<"Subscription"> | boolean
    trialStart?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    trialEnd?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    canceledAt?: DateTimeNullableFilter<"Subscription"> | Date | string | null
    cancelReason?: StringNullableFilter<"Subscription"> | string | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    corporateTenant?: XOR<CorporateTenantNullableScalarRelationFilter, CorporateTenantWhereInput> | null
  }, "id" | "userId">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    plan?: SortOrder
    priceId?: SortOrderInput | SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    trialStart?: SortOrderInput | SortOrder
    trialEnd?: SortOrderInput | SortOrder
    canceledAt?: SortOrderInput | SortOrder
    cancelReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subscription"> | string
    userId?: StringWithAggregatesFilter<"Subscription"> | string
    status?: StringWithAggregatesFilter<"Subscription"> | string
    plan?: StringWithAggregatesFilter<"Subscription"> | string
    priceId?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    subscriptionId?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    currentPeriodStart?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    currentPeriodEnd?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    cancelAtPeriodEnd?: BoolWithAggregatesFilter<"Subscription"> | boolean
    trialStart?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    trialEnd?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    canceledAt?: DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
    cancelReason?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  }

  export type BillingRecordWhereInput = {
    AND?: BillingRecordWhereInput | BillingRecordWhereInput[]
    OR?: BillingRecordWhereInput[]
    NOT?: BillingRecordWhereInput | BillingRecordWhereInput[]
    id?: StringFilter<"BillingRecord"> | string
    userId?: StringFilter<"BillingRecord"> | string
    invoiceId?: StringNullableFilter<"BillingRecord"> | string | null
    amount?: IntFilter<"BillingRecord"> | number
    status?: StringFilter<"BillingRecord"> | string
    description?: StringNullableFilter<"BillingRecord"> | string | null
    paidAt?: DateTimeNullableFilter<"BillingRecord"> | Date | string | null
    createdAt?: DateTimeFilter<"BillingRecord"> | Date | string
    updatedAt?: DateTimeFilter<"BillingRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BillingRecordOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrderInput | SortOrder
    amount?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    paidAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type BillingRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BillingRecordWhereInput | BillingRecordWhereInput[]
    OR?: BillingRecordWhereInput[]
    NOT?: BillingRecordWhereInput | BillingRecordWhereInput[]
    userId?: StringFilter<"BillingRecord"> | string
    invoiceId?: StringNullableFilter<"BillingRecord"> | string | null
    amount?: IntFilter<"BillingRecord"> | number
    status?: StringFilter<"BillingRecord"> | string
    description?: StringNullableFilter<"BillingRecord"> | string | null
    paidAt?: DateTimeNullableFilter<"BillingRecord"> | Date | string | null
    createdAt?: DateTimeFilter<"BillingRecord"> | Date | string
    updatedAt?: DateTimeFilter<"BillingRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type BillingRecordOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrderInput | SortOrder
    amount?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    paidAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BillingRecordCountOrderByAggregateInput
    _avg?: BillingRecordAvgOrderByAggregateInput
    _max?: BillingRecordMaxOrderByAggregateInput
    _min?: BillingRecordMinOrderByAggregateInput
    _sum?: BillingRecordSumOrderByAggregateInput
  }

  export type BillingRecordScalarWhereWithAggregatesInput = {
    AND?: BillingRecordScalarWhereWithAggregatesInput | BillingRecordScalarWhereWithAggregatesInput[]
    OR?: BillingRecordScalarWhereWithAggregatesInput[]
    NOT?: BillingRecordScalarWhereWithAggregatesInput | BillingRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BillingRecord"> | string
    userId?: StringWithAggregatesFilter<"BillingRecord"> | string
    invoiceId?: StringNullableWithAggregatesFilter<"BillingRecord"> | string | null
    amount?: IntWithAggregatesFilter<"BillingRecord"> | number
    status?: StringWithAggregatesFilter<"BillingRecord"> | string
    description?: StringNullableWithAggregatesFilter<"BillingRecord"> | string | null
    paidAt?: DateTimeNullableWithAggregatesFilter<"BillingRecord"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BillingRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BillingRecord"> | Date | string
  }

  export type PasswordResetTokenWhereInput = {
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    id?: StringFilter<"PasswordResetToken"> | string
    token?: StringFilter<"PasswordResetToken"> | string
    expires?: DateTimeFilter<"PasswordResetToken"> | Date | string
    userId?: StringFilter<"PasswordResetToken"> | string
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PasswordResetTokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PasswordResetTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    OR?: PasswordResetTokenWhereInput[]
    NOT?: PasswordResetTokenWhereInput | PasswordResetTokenWhereInput[]
    expires?: DateTimeFilter<"PasswordResetToken"> | Date | string
    userId?: StringFilter<"PasswordResetToken"> | string
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type PasswordResetTokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: PasswordResetTokenCountOrderByAggregateInput
    _max?: PasswordResetTokenMaxOrderByAggregateInput
    _min?: PasswordResetTokenMinOrderByAggregateInput
  }

  export type PasswordResetTokenScalarWhereWithAggregatesInput = {
    AND?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    OR?: PasswordResetTokenScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetTokenScalarWhereWithAggregatesInput | PasswordResetTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    token?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    expires?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
    userId?: StringWithAggregatesFilter<"PasswordResetToken"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PasswordResetToken"> | Date | string
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: StringFilter<"Contact"> | string
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    name?: StringFilter<"Contact"> | string
    email?: StringFilter<"Contact"> | string
    companyName?: StringNullableFilter<"Contact"> | string | null
    type?: StringFilter<"Contact"> | string
    subject?: StringFilter<"Contact"> | string
    message?: StringFilter<"Contact"> | string
    status?: StringFilter<"Contact"> | string
    notes?: StringNullableFilter<"Contact"> | string | null
    assignedTo?: StringNullableFilter<"Contact"> | string | null
    userId?: StringNullableFilter<"Contact"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    companyName?: SortOrderInput | SortOrder
    type?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    assignedTo?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    name?: StringFilter<"Contact"> | string
    email?: StringFilter<"Contact"> | string
    companyName?: StringNullableFilter<"Contact"> | string | null
    type?: StringFilter<"Contact"> | string
    subject?: StringFilter<"Contact"> | string
    message?: StringFilter<"Contact"> | string
    status?: StringFilter<"Contact"> | string
    notes?: StringNullableFilter<"Contact"> | string | null
    assignedTo?: StringNullableFilter<"Contact"> | string | null
    userId?: StringNullableFilter<"Contact"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    companyName?: SortOrderInput | SortOrder
    type?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    assignedTo?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: ContactCountOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contact"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
    name?: StringWithAggregatesFilter<"Contact"> | string
    email?: StringWithAggregatesFilter<"Contact"> | string
    companyName?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    type?: StringWithAggregatesFilter<"Contact"> | string
    subject?: StringWithAggregatesFilter<"Contact"> | string
    message?: StringWithAggregatesFilter<"Contact"> | string
    status?: StringWithAggregatesFilter<"Contact"> | string
    notes?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    assignedTo?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    userId?: StringNullableWithAggregatesFilter<"Contact"> | string | null
  }

  export type CorporateTenantWhereInput = {
    AND?: CorporateTenantWhereInput | CorporateTenantWhereInput[]
    OR?: CorporateTenantWhereInput[]
    NOT?: CorporateTenantWhereInput | CorporateTenantWhereInput[]
    id?: StringFilter<"CorporateTenant"> | string
    name?: StringFilter<"CorporateTenant"> | string
    logoUrl?: StringNullableFilter<"CorporateTenant"> | string | null
    logoWidth?: IntNullableFilter<"CorporateTenant"> | number | null
    logoHeight?: IntNullableFilter<"CorporateTenant"> | number | null
    primaryColor?: StringNullableFilter<"CorporateTenant"> | string | null
    secondaryColor?: StringNullableFilter<"CorporateTenant"> | string | null
    headerText?: StringNullableFilter<"CorporateTenant"> | string | null
    textColor?: StringNullableFilter<"CorporateTenant"> | string | null
    customDomain?: StringNullableFilter<"CorporateTenant"> | string | null
    maxUsers?: IntFilter<"CorporateTenant"> | number
    createdAt?: DateTimeFilter<"CorporateTenant"> | Date | string
    updatedAt?: DateTimeFilter<"CorporateTenant"> | Date | string
    securitySettings?: JsonNullableFilter<"CorporateTenant">
    notificationSettings?: JsonNullableFilter<"CorporateTenant">
    billingAddress?: JsonNullableFilter<"CorporateTenant">
    billingEmail?: StringNullableFilter<"CorporateTenant"> | string | null
    billingContact?: StringNullableFilter<"CorporateTenant"> | string | null
    accountStatus?: StringFilter<"CorporateTenant"> | string
    dataRetentionDays?: IntFilter<"CorporateTenant"> | number
    subscriptionId?: StringNullableFilter<"CorporateTenant"> | string | null
    adminId?: StringFilter<"CorporateTenant"> | string
    activityLogs?: CorporateActivityLogListRelationFilter
    subscription?: XOR<SubscriptionNullableScalarRelationFilter, SubscriptionWhereInput> | null
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
    users?: UserListRelationFilter
    departments?: DepartmentListRelationFilter
    corporateSnsLinks?: CorporateSnsLinkListRelationFilter
  }

  export type CorporateTenantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    logoWidth?: SortOrderInput | SortOrder
    logoHeight?: SortOrderInput | SortOrder
    primaryColor?: SortOrderInput | SortOrder
    secondaryColor?: SortOrderInput | SortOrder
    headerText?: SortOrderInput | SortOrder
    textColor?: SortOrderInput | SortOrder
    customDomain?: SortOrderInput | SortOrder
    maxUsers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    securitySettings?: SortOrderInput | SortOrder
    notificationSettings?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    billingEmail?: SortOrderInput | SortOrder
    billingContact?: SortOrderInput | SortOrder
    accountStatus?: SortOrder
    dataRetentionDays?: SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    adminId?: SortOrder
    activityLogs?: CorporateActivityLogOrderByRelationAggregateInput
    subscription?: SubscriptionOrderByWithRelationInput
    admin?: UserOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    departments?: DepartmentOrderByRelationAggregateInput
    corporateSnsLinks?: CorporateSnsLinkOrderByRelationAggregateInput
  }

  export type CorporateTenantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    customDomain?: string
    subscriptionId?: string
    adminId?: string
    AND?: CorporateTenantWhereInput | CorporateTenantWhereInput[]
    OR?: CorporateTenantWhereInput[]
    NOT?: CorporateTenantWhereInput | CorporateTenantWhereInput[]
    name?: StringFilter<"CorporateTenant"> | string
    logoUrl?: StringNullableFilter<"CorporateTenant"> | string | null
    logoWidth?: IntNullableFilter<"CorporateTenant"> | number | null
    logoHeight?: IntNullableFilter<"CorporateTenant"> | number | null
    primaryColor?: StringNullableFilter<"CorporateTenant"> | string | null
    secondaryColor?: StringNullableFilter<"CorporateTenant"> | string | null
    headerText?: StringNullableFilter<"CorporateTenant"> | string | null
    textColor?: StringNullableFilter<"CorporateTenant"> | string | null
    maxUsers?: IntFilter<"CorporateTenant"> | number
    createdAt?: DateTimeFilter<"CorporateTenant"> | Date | string
    updatedAt?: DateTimeFilter<"CorporateTenant"> | Date | string
    securitySettings?: JsonNullableFilter<"CorporateTenant">
    notificationSettings?: JsonNullableFilter<"CorporateTenant">
    billingAddress?: JsonNullableFilter<"CorporateTenant">
    billingEmail?: StringNullableFilter<"CorporateTenant"> | string | null
    billingContact?: StringNullableFilter<"CorporateTenant"> | string | null
    accountStatus?: StringFilter<"CorporateTenant"> | string
    dataRetentionDays?: IntFilter<"CorporateTenant"> | number
    activityLogs?: CorporateActivityLogListRelationFilter
    subscription?: XOR<SubscriptionNullableScalarRelationFilter, SubscriptionWhereInput> | null
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
    users?: UserListRelationFilter
    departments?: DepartmentListRelationFilter
    corporateSnsLinks?: CorporateSnsLinkListRelationFilter
  }, "id" | "customDomain" | "subscriptionId" | "adminId">

  export type CorporateTenantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    logoWidth?: SortOrderInput | SortOrder
    logoHeight?: SortOrderInput | SortOrder
    primaryColor?: SortOrderInput | SortOrder
    secondaryColor?: SortOrderInput | SortOrder
    headerText?: SortOrderInput | SortOrder
    textColor?: SortOrderInput | SortOrder
    customDomain?: SortOrderInput | SortOrder
    maxUsers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    securitySettings?: SortOrderInput | SortOrder
    notificationSettings?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    billingEmail?: SortOrderInput | SortOrder
    billingContact?: SortOrderInput | SortOrder
    accountStatus?: SortOrder
    dataRetentionDays?: SortOrder
    subscriptionId?: SortOrderInput | SortOrder
    adminId?: SortOrder
    _count?: CorporateTenantCountOrderByAggregateInput
    _avg?: CorporateTenantAvgOrderByAggregateInput
    _max?: CorporateTenantMaxOrderByAggregateInput
    _min?: CorporateTenantMinOrderByAggregateInput
    _sum?: CorporateTenantSumOrderByAggregateInput
  }

  export type CorporateTenantScalarWhereWithAggregatesInput = {
    AND?: CorporateTenantScalarWhereWithAggregatesInput | CorporateTenantScalarWhereWithAggregatesInput[]
    OR?: CorporateTenantScalarWhereWithAggregatesInput[]
    NOT?: CorporateTenantScalarWhereWithAggregatesInput | CorporateTenantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CorporateTenant"> | string
    name?: StringWithAggregatesFilter<"CorporateTenant"> | string
    logoUrl?: StringNullableWithAggregatesFilter<"CorporateTenant"> | string | null
    logoWidth?: IntNullableWithAggregatesFilter<"CorporateTenant"> | number | null
    logoHeight?: IntNullableWithAggregatesFilter<"CorporateTenant"> | number | null
    primaryColor?: StringNullableWithAggregatesFilter<"CorporateTenant"> | string | null
    secondaryColor?: StringNullableWithAggregatesFilter<"CorporateTenant"> | string | null
    headerText?: StringNullableWithAggregatesFilter<"CorporateTenant"> | string | null
    textColor?: StringNullableWithAggregatesFilter<"CorporateTenant"> | string | null
    customDomain?: StringNullableWithAggregatesFilter<"CorporateTenant"> | string | null
    maxUsers?: IntWithAggregatesFilter<"CorporateTenant"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CorporateTenant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CorporateTenant"> | Date | string
    securitySettings?: JsonNullableWithAggregatesFilter<"CorporateTenant">
    notificationSettings?: JsonNullableWithAggregatesFilter<"CorporateTenant">
    billingAddress?: JsonNullableWithAggregatesFilter<"CorporateTenant">
    billingEmail?: StringNullableWithAggregatesFilter<"CorporateTenant"> | string | null
    billingContact?: StringNullableWithAggregatesFilter<"CorporateTenant"> | string | null
    accountStatus?: StringWithAggregatesFilter<"CorporateTenant"> | string
    dataRetentionDays?: IntWithAggregatesFilter<"CorporateTenant"> | number
    subscriptionId?: StringNullableWithAggregatesFilter<"CorporateTenant"> | string | null
    adminId?: StringWithAggregatesFilter<"CorporateTenant"> | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    tenantId?: StringFilter<"Department"> | string
    tenant?: XOR<CorporateTenantScalarRelationFilter, CorporateTenantWhereInput>
    users?: UserListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    tenant?: CorporateTenantOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    tenantId?: StringFilter<"Department"> | string
    tenant?: XOR<CorporateTenantScalarRelationFilter, CorporateTenantWhereInput>
    users?: UserListRelationFilter
  }, "id">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    tenantId?: StringWithAggregatesFilter<"Department"> | string
  }

  export type CorporateSnsLinkWhereInput = {
    AND?: CorporateSnsLinkWhereInput | CorporateSnsLinkWhereInput[]
    OR?: CorporateSnsLinkWhereInput[]
    NOT?: CorporateSnsLinkWhereInput | CorporateSnsLinkWhereInput[]
    id?: StringFilter<"CorporateSnsLink"> | string
    tenantId?: StringFilter<"CorporateSnsLink"> | string
    platform?: StringFilter<"CorporateSnsLink"> | string
    username?: StringNullableFilter<"CorporateSnsLink"> | string | null
    url?: StringFilter<"CorporateSnsLink"> | string
    displayOrder?: IntFilter<"CorporateSnsLink"> | number
    isRequired?: BoolFilter<"CorporateSnsLink"> | boolean
    createdAt?: DateTimeFilter<"CorporateSnsLink"> | Date | string
    updatedAt?: DateTimeFilter<"CorporateSnsLink"> | Date | string
    tenant?: XOR<CorporateTenantScalarRelationFilter, CorporateTenantWhereInput>
  }

  export type CorporateSnsLinkOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    platform?: SortOrder
    username?: SortOrderInput | SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: CorporateTenantOrderByWithRelationInput
  }

  export type CorporateSnsLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId_platform?: CorporateSnsLinkTenantIdPlatformCompoundUniqueInput
    AND?: CorporateSnsLinkWhereInput | CorporateSnsLinkWhereInput[]
    OR?: CorporateSnsLinkWhereInput[]
    NOT?: CorporateSnsLinkWhereInput | CorporateSnsLinkWhereInput[]
    tenantId?: StringFilter<"CorporateSnsLink"> | string
    platform?: StringFilter<"CorporateSnsLink"> | string
    username?: StringNullableFilter<"CorporateSnsLink"> | string | null
    url?: StringFilter<"CorporateSnsLink"> | string
    displayOrder?: IntFilter<"CorporateSnsLink"> | number
    isRequired?: BoolFilter<"CorporateSnsLink"> | boolean
    createdAt?: DateTimeFilter<"CorporateSnsLink"> | Date | string
    updatedAt?: DateTimeFilter<"CorporateSnsLink"> | Date | string
    tenant?: XOR<CorporateTenantScalarRelationFilter, CorporateTenantWhereInput>
  }, "id" | "tenantId_platform">

  export type CorporateSnsLinkOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    platform?: SortOrder
    username?: SortOrderInput | SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CorporateSnsLinkCountOrderByAggregateInput
    _avg?: CorporateSnsLinkAvgOrderByAggregateInput
    _max?: CorporateSnsLinkMaxOrderByAggregateInput
    _min?: CorporateSnsLinkMinOrderByAggregateInput
    _sum?: CorporateSnsLinkSumOrderByAggregateInput
  }

  export type CorporateSnsLinkScalarWhereWithAggregatesInput = {
    AND?: CorporateSnsLinkScalarWhereWithAggregatesInput | CorporateSnsLinkScalarWhereWithAggregatesInput[]
    OR?: CorporateSnsLinkScalarWhereWithAggregatesInput[]
    NOT?: CorporateSnsLinkScalarWhereWithAggregatesInput | CorporateSnsLinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CorporateSnsLink"> | string
    tenantId?: StringWithAggregatesFilter<"CorporateSnsLink"> | string
    platform?: StringWithAggregatesFilter<"CorporateSnsLink"> | string
    username?: StringNullableWithAggregatesFilter<"CorporateSnsLink"> | string | null
    url?: StringWithAggregatesFilter<"CorporateSnsLink"> | string
    displayOrder?: IntWithAggregatesFilter<"CorporateSnsLink"> | number
    isRequired?: BoolWithAggregatesFilter<"CorporateSnsLink"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CorporateSnsLink"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CorporateSnsLink"> | Date | string
  }

  export type CorporateActivityLogWhereInput = {
    AND?: CorporateActivityLogWhereInput | CorporateActivityLogWhereInput[]
    OR?: CorporateActivityLogWhereInput[]
    NOT?: CorporateActivityLogWhereInput | CorporateActivityLogWhereInput[]
    id?: StringFilter<"CorporateActivityLog"> | string
    tenantId?: StringFilter<"CorporateActivityLog"> | string
    userId?: StringNullableFilter<"CorporateActivityLog"> | string | null
    action?: StringFilter<"CorporateActivityLog"> | string
    entityType?: StringFilter<"CorporateActivityLog"> | string
    entityId?: StringNullableFilter<"CorporateActivityLog"> | string | null
    description?: StringFilter<"CorporateActivityLog"> | string
    metadata?: JsonNullableFilter<"CorporateActivityLog">
    createdAt?: DateTimeFilter<"CorporateActivityLog"> | Date | string
    tenant?: XOR<CorporateTenantScalarRelationFilter, CorporateTenantWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type CorporateActivityLogOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrderInput | SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    tenant?: CorporateTenantOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CorporateActivityLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CorporateActivityLogWhereInput | CorporateActivityLogWhereInput[]
    OR?: CorporateActivityLogWhereInput[]
    NOT?: CorporateActivityLogWhereInput | CorporateActivityLogWhereInput[]
    tenantId?: StringFilter<"CorporateActivityLog"> | string
    userId?: StringNullableFilter<"CorporateActivityLog"> | string | null
    action?: StringFilter<"CorporateActivityLog"> | string
    entityType?: StringFilter<"CorporateActivityLog"> | string
    entityId?: StringNullableFilter<"CorporateActivityLog"> | string | null
    description?: StringFilter<"CorporateActivityLog"> | string
    metadata?: JsonNullableFilter<"CorporateActivityLog">
    createdAt?: DateTimeFilter<"CorporateActivityLog"> | Date | string
    tenant?: XOR<CorporateTenantScalarRelationFilter, CorporateTenantWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type CorporateActivityLogOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrderInput | SortOrder
    description?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CorporateActivityLogCountOrderByAggregateInput
    _max?: CorporateActivityLogMaxOrderByAggregateInput
    _min?: CorporateActivityLogMinOrderByAggregateInput
  }

  export type CorporateActivityLogScalarWhereWithAggregatesInput = {
    AND?: CorporateActivityLogScalarWhereWithAggregatesInput | CorporateActivityLogScalarWhereWithAggregatesInput[]
    OR?: CorporateActivityLogScalarWhereWithAggregatesInput[]
    NOT?: CorporateActivityLogScalarWhereWithAggregatesInput | CorporateActivityLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CorporateActivityLog"> | string
    tenantId?: StringWithAggregatesFilter<"CorporateActivityLog"> | string
    userId?: StringNullableWithAggregatesFilter<"CorporateActivityLog"> | string | null
    action?: StringWithAggregatesFilter<"CorporateActivityLog"> | string
    entityType?: StringWithAggregatesFilter<"CorporateActivityLog"> | string
    entityId?: StringNullableWithAggregatesFilter<"CorporateActivityLog"> | string | null
    description?: StringWithAggregatesFilter<"CorporateActivityLog"> | string
    metadata?: JsonNullableWithAggregatesFilter<"CorporateActivityLog">
    createdAt?: DateTimeWithAggregatesFilter<"CorporateActivityLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateInput = {
    id?: string
    slug: string
    views?: number
    isPublic?: boolean
    lastAccessed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    userId: string
    slug: string
    views?: number
    isPublic?: boolean
    lastAccessed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    lastAccessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    lastAccessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateManyInput = {
    id?: string
    userId: string
    slug: string
    views?: number
    isPublic?: boolean
    lastAccessed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    lastAccessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    lastAccessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SnsLinkCreateInput = {
    id?: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSnsLinksInput
  }

  export type SnsLinkUncheckedCreateInput = {
    id?: string
    userId: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SnsLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSnsLinksNestedInput
  }

  export type SnsLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SnsLinkCreateManyInput = {
    id?: string
    userId: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SnsLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SnsLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomLinkCreateInput = {
    id?: string
    name: string
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCustomLinksInput
  }

  export type CustomLinkUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCustomLinksNestedInput
  }

  export type CustomLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomLinkCreateManyInput = {
    id?: string
    userId: string
    name: string
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId?: string | null
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId?: string | null
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId?: string | null
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateInput = {
    id?: string
    status: string
    plan: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    canceledAt?: Date | string | null
    cancelReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionInput
    corporateTenant?: CorporateTenantCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: string
    userId: string
    status: string
    plan: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    canceledAt?: Date | string | null
    cancelReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    corporateTenant?: CorporateTenantUncheckedCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionNestedInput
    corporateTenant?: CorporateTenantUpdateOneWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corporateTenant?: CorporateTenantUncheckedUpdateOneWithoutSubscriptionNestedInput
  }

  export type SubscriptionCreateManyInput = {
    id?: string
    userId: string
    status: string
    plan: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    canceledAt?: Date | string | null
    cancelReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordCreateInput = {
    id?: string
    invoiceId?: string | null
    amount: number
    status: string
    description?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBillingHistoryInput
  }

  export type BillingRecordUncheckedCreateInput = {
    id?: string
    userId: string
    invoiceId?: string | null
    amount: number
    status: string
    description?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBillingHistoryNestedInput
  }

  export type BillingRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    invoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordCreateManyInput = {
    id?: string
    userId: string
    invoiceId?: string | null
    amount: number
    status: string
    description?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    invoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPasswordResetTokensInput
  }

  export type PasswordResetTokenUncheckedCreateInput = {
    id?: string
    token: string
    expires: Date | string
    userId: string
    createdAt?: Date | string
  }

  export type PasswordResetTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPasswordResetTokensNestedInput
  }

  export type PasswordResetTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenCreateManyInput = {
    id?: string
    token: string
    expires: Date | string
    userId: string
    createdAt?: Date | string
  }

  export type PasswordResetTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    companyName?: string | null
    type: string
    subject: string
    message: string
    status?: string
    notes?: string | null
    assignedTo?: string | null
    user?: UserCreateNestedOneWithoutContactsInput
  }

  export type ContactUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    companyName?: string | null
    type: string
    subject: string
    message: string
    status?: string
    notes?: string | null
    assignedTo?: string | null
    userId?: string | null
  }

  export type ContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutContactsNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    companyName?: string | null
    type: string
    subject: string
    message: string
    status?: string
    notes?: string | null
    assignedTo?: string | null
    userId?: string | null
  }

  export type ContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CorporateTenantCreateInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutTenantInput
    subscription?: SubscriptionCreateNestedOneWithoutCorporateTenantInput
    admin: UserCreateNestedOneWithoutAdminOfTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantUncheckedCreateInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    subscriptionId?: string | null
    adminId: string
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    activityLogs?: CorporateActivityLogUpdateManyWithoutTenantNestedInput
    subscription?: SubscriptionUpdateOneWithoutCorporateTenantNestedInput
    admin?: UserUpdateOneRequiredWithoutAdminOfTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUpdateManyWithoutTenantNestedInput
  }

  export type CorporateTenantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: StringFieldUpdateOperationsInput | string
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CorporateTenantCreateManyInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    subscriptionId?: string | null
    adminId: string
  }

  export type CorporateTenantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
  }

  export type CorporateTenantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: CorporateTenantCreateNestedOneWithoutDepartmentsInput
    users?: UserCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: CorporateTenantUpdateOneRequiredWithoutDepartmentsNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type CorporateSnsLinkCreateInput = {
    id?: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: CorporateTenantCreateNestedOneWithoutCorporateSnsLinksInput
  }

  export type CorporateSnsLinkUncheckedCreateInput = {
    id?: string
    tenantId: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CorporateSnsLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: CorporateTenantUpdateOneRequiredWithoutCorporateSnsLinksNestedInput
  }

  export type CorporateSnsLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateSnsLinkCreateManyInput = {
    id?: string
    tenantId: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CorporateSnsLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateSnsLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateActivityLogCreateInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenant: CorporateTenantCreateNestedOneWithoutActivityLogsInput
    user?: UserCreateNestedOneWithoutActivityLogsInput
  }

  export type CorporateActivityLogUncheckedCreateInput = {
    id?: string
    tenantId: string
    userId?: string | null
    action: string
    entityType: string
    entityId?: string | null
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CorporateActivityLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: CorporateTenantUpdateOneRequiredWithoutActivityLogsNestedInput
    user?: UserUpdateOneWithoutActivityLogsNestedInput
  }

  export type CorporateActivityLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateActivityLogCreateManyInput = {
    id?: string
    tenantId: string
    userId?: string | null
    action: string
    entityType: string
    entityId?: string | null
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CorporateActivityLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateActivityLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PasswordResetTokenListRelationFilter = {
    every?: PasswordResetTokenWhereInput
    some?: PasswordResetTokenWhereInput
    none?: PasswordResetTokenWhereInput
  }

  export type CorporateActivityLogListRelationFilter = {
    every?: CorporateActivityLogWhereInput
    some?: CorporateActivityLogWhereInput
    none?: CorporateActivityLogWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type ProfileNullableScalarRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type CustomLinkListRelationFilter = {
    every?: CustomLinkWhereInput
    some?: CustomLinkWhereInput
    none?: CustomLinkWhereInput
  }

  export type SnsLinkListRelationFilter = {
    every?: SnsLinkWhereInput
    some?: SnsLinkWhereInput
    none?: SnsLinkWhereInput
  }

  export type SubscriptionNullableScalarRelationFilter = {
    is?: SubscriptionWhereInput | null
    isNot?: SubscriptionWhereInput | null
  }

  export type BillingRecordListRelationFilter = {
    every?: BillingRecordWhereInput
    some?: BillingRecordWhereInput
    none?: BillingRecordWhereInput
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type CorporateTenantNullableScalarRelationFilter = {
    is?: CorporateTenantWhereInput | null
    isNot?: CorporateTenantWhereInput | null
  }

  export type ContactListRelationFilter = {
    every?: ContactWhereInput
    some?: ContactWhereInput
    none?: ContactWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PasswordResetTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CorporateActivityLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SnsLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BillingRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    nameEn?: SortOrder
    password?: SortOrder
    image?: SortOrder
    bio?: SortOrder
    mainColor?: SortOrder
    snsIconColor?: SortOrder
    bioBackgroundColor?: SortOrder
    bioTextColor?: SortOrder
    phone?: SortOrder
    company?: SortOrder
    companyUrl?: SortOrder
    companyLabel?: SortOrder
    emailVerified?: SortOrder
    stripeCustomerId?: SortOrder
    trialEndsAt?: SortOrder
    subscriptionStatus?: SortOrder
    corporateRole?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    nameEn?: SortOrder
    password?: SortOrder
    image?: SortOrder
    bio?: SortOrder
    mainColor?: SortOrder
    snsIconColor?: SortOrder
    bioBackgroundColor?: SortOrder
    bioTextColor?: SortOrder
    phone?: SortOrder
    company?: SortOrder
    companyUrl?: SortOrder
    companyLabel?: SortOrder
    emailVerified?: SortOrder
    stripeCustomerId?: SortOrder
    trialEndsAt?: SortOrder
    subscriptionStatus?: SortOrder
    corporateRole?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    nameEn?: SortOrder
    password?: SortOrder
    image?: SortOrder
    bio?: SortOrder
    mainColor?: SortOrder
    snsIconColor?: SortOrder
    bioBackgroundColor?: SortOrder
    bioTextColor?: SortOrder
    phone?: SortOrder
    company?: SortOrder
    companyUrl?: SortOrder
    companyLabel?: SortOrder
    emailVerified?: SortOrder
    stripeCustomerId?: SortOrder
    trialEndsAt?: SortOrder
    subscriptionStatus?: SortOrder
    corporateRole?: SortOrder
    position?: SortOrder
    departmentId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    slug?: SortOrder
    views?: SortOrder
    isPublic?: SortOrder
    lastAccessed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    views?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    slug?: SortOrder
    views?: SortOrder
    isPublic?: SortOrder
    lastAccessed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    slug?: SortOrder
    views?: SortOrder
    isPublic?: SortOrder
    lastAccessed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    views?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type SnsLinkUserIdPlatformCompoundUniqueInput = {
    userId: string
    platform: string
  }

  export type SnsLinkCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    username?: SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SnsLinkAvgOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type SnsLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    username?: SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SnsLinkMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platform?: SortOrder
    username?: SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SnsLinkSumOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type CustomLinkCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomLinkAvgOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type CustomLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomLinkMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomLinkSumOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    plan?: SortOrder
    priceId?: SortOrder
    subscriptionId?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    canceledAt?: SortOrder
    cancelReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    plan?: SortOrder
    priceId?: SortOrder
    subscriptionId?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    canceledAt?: SortOrder
    cancelReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    plan?: SortOrder
    priceId?: SortOrder
    subscriptionId?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    canceledAt?: SortOrder
    cancelReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingRecordCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    description?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingRecordAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BillingRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    description?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingRecordMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    description?: SortOrder
    paidAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BillingRecordSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PasswordResetTokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    companyName?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    assignedTo?: SortOrder
    userId?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    companyName?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    assignedTo?: SortOrder
    userId?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    companyName?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    assignedTo?: SortOrder
    userId?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type CorporateSnsLinkListRelationFilter = {
    every?: CorporateSnsLinkWhereInput
    some?: CorporateSnsLinkWhereInput
    none?: CorporateSnsLinkWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CorporateSnsLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CorporateTenantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrder
    logoWidth?: SortOrder
    logoHeight?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    headerText?: SortOrder
    textColor?: SortOrder
    customDomain?: SortOrder
    maxUsers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    securitySettings?: SortOrder
    notificationSettings?: SortOrder
    billingAddress?: SortOrder
    billingEmail?: SortOrder
    billingContact?: SortOrder
    accountStatus?: SortOrder
    dataRetentionDays?: SortOrder
    subscriptionId?: SortOrder
    adminId?: SortOrder
  }

  export type CorporateTenantAvgOrderByAggregateInput = {
    logoWidth?: SortOrder
    logoHeight?: SortOrder
    maxUsers?: SortOrder
    dataRetentionDays?: SortOrder
  }

  export type CorporateTenantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrder
    logoWidth?: SortOrder
    logoHeight?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    headerText?: SortOrder
    textColor?: SortOrder
    customDomain?: SortOrder
    maxUsers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    billingEmail?: SortOrder
    billingContact?: SortOrder
    accountStatus?: SortOrder
    dataRetentionDays?: SortOrder
    subscriptionId?: SortOrder
    adminId?: SortOrder
  }

  export type CorporateTenantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrder
    logoWidth?: SortOrder
    logoHeight?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    headerText?: SortOrder
    textColor?: SortOrder
    customDomain?: SortOrder
    maxUsers?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    billingEmail?: SortOrder
    billingContact?: SortOrder
    accountStatus?: SortOrder
    dataRetentionDays?: SortOrder
    subscriptionId?: SortOrder
    adminId?: SortOrder
  }

  export type CorporateTenantSumOrderByAggregateInput = {
    logoWidth?: SortOrder
    logoHeight?: SortOrder
    maxUsers?: SortOrder
    dataRetentionDays?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type CorporateTenantScalarRelationFilter = {
    is?: CorporateTenantWhereInput
    isNot?: CorporateTenantWhereInput
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenantId?: SortOrder
  }

  export type CorporateSnsLinkTenantIdPlatformCompoundUniqueInput = {
    tenantId: string
    platform: string
  }

  export type CorporateSnsLinkCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    platform?: SortOrder
    username?: SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CorporateSnsLinkAvgOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type CorporateSnsLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    platform?: SortOrder
    username?: SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CorporateSnsLinkMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    platform?: SortOrder
    username?: SortOrder
    url?: SortOrder
    displayOrder?: SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CorporateSnsLinkSumOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type CorporateActivityLogCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type CorporateActivityLogMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type CorporateActivityLogMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
  }

  export type CorporateActivityLogCreateNestedManyWithoutUserInput = {
    create?: XOR<CorporateActivityLogCreateWithoutUserInput, CorporateActivityLogUncheckedCreateWithoutUserInput> | CorporateActivityLogCreateWithoutUserInput[] | CorporateActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CorporateActivityLogCreateOrConnectWithoutUserInput | CorporateActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: CorporateActivityLogCreateManyUserInputEnvelope
    connect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type CustomLinkCreateNestedManyWithoutUserInput = {
    create?: XOR<CustomLinkCreateWithoutUserInput, CustomLinkUncheckedCreateWithoutUserInput> | CustomLinkCreateWithoutUserInput[] | CustomLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomLinkCreateOrConnectWithoutUserInput | CustomLinkCreateOrConnectWithoutUserInput[]
    createMany?: CustomLinkCreateManyUserInputEnvelope
    connect?: CustomLinkWhereUniqueInput | CustomLinkWhereUniqueInput[]
  }

  export type SnsLinkCreateNestedManyWithoutUserInput = {
    create?: XOR<SnsLinkCreateWithoutUserInput, SnsLinkUncheckedCreateWithoutUserInput> | SnsLinkCreateWithoutUserInput[] | SnsLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SnsLinkCreateOrConnectWithoutUserInput | SnsLinkCreateOrConnectWithoutUserInput[]
    createMany?: SnsLinkCreateManyUserInputEnvelope
    connect?: SnsLinkWhereUniqueInput | SnsLinkWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedOneWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type BillingRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput> | BillingRecordCreateWithoutUserInput[] | BillingRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutUserInput | BillingRecordCreateOrConnectWithoutUserInput[]
    createMany?: BillingRecordCreateManyUserInputEnvelope
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
  }

  export type DepartmentCreateNestedOneWithoutUsersInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type CorporateTenantCreateNestedOneWithoutUsersInput = {
    create?: XOR<CorporateTenantCreateWithoutUsersInput, CorporateTenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutUsersInput
    connect?: CorporateTenantWhereUniqueInput
  }

  export type CorporateTenantCreateNestedOneWithoutAdminInput = {
    create?: XOR<CorporateTenantCreateWithoutAdminInput, CorporateTenantUncheckedCreateWithoutAdminInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutAdminInput
    connect?: CorporateTenantWhereUniqueInput
  }

  export type ContactCreateNestedManyWithoutUserInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
  }

  export type CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CorporateActivityLogCreateWithoutUserInput, CorporateActivityLogUncheckedCreateWithoutUserInput> | CorporateActivityLogCreateWithoutUserInput[] | CorporateActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CorporateActivityLogCreateOrConnectWithoutUserInput | CorporateActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: CorporateActivityLogCreateManyUserInputEnvelope
    connect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type CustomLinkUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CustomLinkCreateWithoutUserInput, CustomLinkUncheckedCreateWithoutUserInput> | CustomLinkCreateWithoutUserInput[] | CustomLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomLinkCreateOrConnectWithoutUserInput | CustomLinkCreateOrConnectWithoutUserInput[]
    createMany?: CustomLinkCreateManyUserInputEnvelope
    connect?: CustomLinkWhereUniqueInput | CustomLinkWhereUniqueInput[]
  }

  export type SnsLinkUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SnsLinkCreateWithoutUserInput, SnsLinkUncheckedCreateWithoutUserInput> | SnsLinkCreateWithoutUserInput[] | SnsLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SnsLinkCreateOrConnectWithoutUserInput | SnsLinkCreateOrConnectWithoutUserInput[]
    createMany?: SnsLinkCreateManyUserInputEnvelope
    connect?: SnsLinkWhereUniqueInput | SnsLinkWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type BillingRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput> | BillingRecordCreateWithoutUserInput[] | BillingRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutUserInput | BillingRecordCreateOrConnectWithoutUserInput[]
    createMany?: BillingRecordCreateManyUserInputEnvelope
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
  }

  export type CorporateTenantUncheckedCreateNestedOneWithoutAdminInput = {
    create?: XOR<CorporateTenantCreateWithoutAdminInput, CorporateTenantUncheckedCreateWithoutAdminInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutAdminInput
    connect?: CorporateTenantWhereUniqueInput
  }

  export type ContactUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PasswordResetTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput | PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    set?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    disconnect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    delete?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    update?: PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput | PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetTokenUpdateManyWithWhereWithoutUserInput | PasswordResetTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
  }

  export type CorporateActivityLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<CorporateActivityLogCreateWithoutUserInput, CorporateActivityLogUncheckedCreateWithoutUserInput> | CorporateActivityLogCreateWithoutUserInput[] | CorporateActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CorporateActivityLogCreateOrConnectWithoutUserInput | CorporateActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: CorporateActivityLogUpsertWithWhereUniqueWithoutUserInput | CorporateActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CorporateActivityLogCreateManyUserInputEnvelope
    set?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    disconnect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    delete?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    connect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    update?: CorporateActivityLogUpdateWithWhereUniqueWithoutUserInput | CorporateActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CorporateActivityLogUpdateManyWithWhereWithoutUserInput | CorporateActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CorporateActivityLogScalarWhereInput | CorporateActivityLogScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type CustomLinkUpdateManyWithoutUserNestedInput = {
    create?: XOR<CustomLinkCreateWithoutUserInput, CustomLinkUncheckedCreateWithoutUserInput> | CustomLinkCreateWithoutUserInput[] | CustomLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomLinkCreateOrConnectWithoutUserInput | CustomLinkCreateOrConnectWithoutUserInput[]
    upsert?: CustomLinkUpsertWithWhereUniqueWithoutUserInput | CustomLinkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CustomLinkCreateManyUserInputEnvelope
    set?: CustomLinkWhereUniqueInput | CustomLinkWhereUniqueInput[]
    disconnect?: CustomLinkWhereUniqueInput | CustomLinkWhereUniqueInput[]
    delete?: CustomLinkWhereUniqueInput | CustomLinkWhereUniqueInput[]
    connect?: CustomLinkWhereUniqueInput | CustomLinkWhereUniqueInput[]
    update?: CustomLinkUpdateWithWhereUniqueWithoutUserInput | CustomLinkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CustomLinkUpdateManyWithWhereWithoutUserInput | CustomLinkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CustomLinkScalarWhereInput | CustomLinkScalarWhereInput[]
  }

  export type SnsLinkUpdateManyWithoutUserNestedInput = {
    create?: XOR<SnsLinkCreateWithoutUserInput, SnsLinkUncheckedCreateWithoutUserInput> | SnsLinkCreateWithoutUserInput[] | SnsLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SnsLinkCreateOrConnectWithoutUserInput | SnsLinkCreateOrConnectWithoutUserInput[]
    upsert?: SnsLinkUpsertWithWhereUniqueWithoutUserInput | SnsLinkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SnsLinkCreateManyUserInputEnvelope
    set?: SnsLinkWhereUniqueInput | SnsLinkWhereUniqueInput[]
    disconnect?: SnsLinkWhereUniqueInput | SnsLinkWhereUniqueInput[]
    delete?: SnsLinkWhereUniqueInput | SnsLinkWhereUniqueInput[]
    connect?: SnsLinkWhereUniqueInput | SnsLinkWhereUniqueInput[]
    update?: SnsLinkUpdateWithWhereUniqueWithoutUserInput | SnsLinkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SnsLinkUpdateManyWithWhereWithoutUserInput | SnsLinkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SnsLinkScalarWhereInput | SnsLinkScalarWhereInput[]
  }

  export type SubscriptionUpdateOneWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    upsert?: SubscriptionUpsertWithoutUserInput
    disconnect?: SubscriptionWhereInput | boolean
    delete?: SubscriptionWhereInput | boolean
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutUserInput, SubscriptionUpdateWithoutUserInput>, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type BillingRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput> | BillingRecordCreateWithoutUserInput[] | BillingRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutUserInput | BillingRecordCreateOrConnectWithoutUserInput[]
    upsert?: BillingRecordUpsertWithWhereUniqueWithoutUserInput | BillingRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BillingRecordCreateManyUserInputEnvelope
    set?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    disconnect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    delete?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    update?: BillingRecordUpdateWithWhereUniqueWithoutUserInput | BillingRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BillingRecordUpdateManyWithWhereWithoutUserInput | BillingRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BillingRecordScalarWhereInput | BillingRecordScalarWhereInput[]
  }

  export type DepartmentUpdateOneWithoutUsersNestedInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    upsert?: DepartmentUpsertWithoutUsersInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutUsersInput, DepartmentUpdateWithoutUsersInput>, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type CorporateTenantUpdateOneWithoutUsersNestedInput = {
    create?: XOR<CorporateTenantCreateWithoutUsersInput, CorporateTenantUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutUsersInput
    upsert?: CorporateTenantUpsertWithoutUsersInput
    disconnect?: CorporateTenantWhereInput | boolean
    delete?: CorporateTenantWhereInput | boolean
    connect?: CorporateTenantWhereUniqueInput
    update?: XOR<XOR<CorporateTenantUpdateToOneWithWhereWithoutUsersInput, CorporateTenantUpdateWithoutUsersInput>, CorporateTenantUncheckedUpdateWithoutUsersInput>
  }

  export type CorporateTenantUpdateOneWithoutAdminNestedInput = {
    create?: XOR<CorporateTenantCreateWithoutAdminInput, CorporateTenantUncheckedCreateWithoutAdminInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutAdminInput
    upsert?: CorporateTenantUpsertWithoutAdminInput
    disconnect?: CorporateTenantWhereInput | boolean
    delete?: CorporateTenantWhereInput | boolean
    connect?: CorporateTenantWhereUniqueInput
    update?: XOR<XOR<CorporateTenantUpdateToOneWithWhereWithoutAdminInput, CorporateTenantUpdateWithoutAdminInput>, CorporateTenantUncheckedUpdateWithoutAdminInput>
  }

  export type ContactUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutUserInput | ContactUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutUserInput | ContactUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutUserInput | ContactUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput> | PasswordResetTokenCreateWithoutUserInput[] | PasswordResetTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetTokenCreateOrConnectWithoutUserInput | PasswordResetTokenCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput | PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetTokenCreateManyUserInputEnvelope
    set?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    disconnect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    delete?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    connect?: PasswordResetTokenWhereUniqueInput | PasswordResetTokenWhereUniqueInput[]
    update?: PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput | PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetTokenUpdateManyWithWhereWithoutUserInput | PasswordResetTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
  }

  export type CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CorporateActivityLogCreateWithoutUserInput, CorporateActivityLogUncheckedCreateWithoutUserInput> | CorporateActivityLogCreateWithoutUserInput[] | CorporateActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CorporateActivityLogCreateOrConnectWithoutUserInput | CorporateActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: CorporateActivityLogUpsertWithWhereUniqueWithoutUserInput | CorporateActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CorporateActivityLogCreateManyUserInputEnvelope
    set?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    disconnect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    delete?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    connect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    update?: CorporateActivityLogUpdateWithWhereUniqueWithoutUserInput | CorporateActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CorporateActivityLogUpdateManyWithWhereWithoutUserInput | CorporateActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CorporateActivityLogScalarWhereInput | CorporateActivityLogScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type CustomLinkUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CustomLinkCreateWithoutUserInput, CustomLinkUncheckedCreateWithoutUserInput> | CustomLinkCreateWithoutUserInput[] | CustomLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CustomLinkCreateOrConnectWithoutUserInput | CustomLinkCreateOrConnectWithoutUserInput[]
    upsert?: CustomLinkUpsertWithWhereUniqueWithoutUserInput | CustomLinkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CustomLinkCreateManyUserInputEnvelope
    set?: CustomLinkWhereUniqueInput | CustomLinkWhereUniqueInput[]
    disconnect?: CustomLinkWhereUniqueInput | CustomLinkWhereUniqueInput[]
    delete?: CustomLinkWhereUniqueInput | CustomLinkWhereUniqueInput[]
    connect?: CustomLinkWhereUniqueInput | CustomLinkWhereUniqueInput[]
    update?: CustomLinkUpdateWithWhereUniqueWithoutUserInput | CustomLinkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CustomLinkUpdateManyWithWhereWithoutUserInput | CustomLinkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CustomLinkScalarWhereInput | CustomLinkScalarWhereInput[]
  }

  export type SnsLinkUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SnsLinkCreateWithoutUserInput, SnsLinkUncheckedCreateWithoutUserInput> | SnsLinkCreateWithoutUserInput[] | SnsLinkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SnsLinkCreateOrConnectWithoutUserInput | SnsLinkCreateOrConnectWithoutUserInput[]
    upsert?: SnsLinkUpsertWithWhereUniqueWithoutUserInput | SnsLinkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SnsLinkCreateManyUserInputEnvelope
    set?: SnsLinkWhereUniqueInput | SnsLinkWhereUniqueInput[]
    disconnect?: SnsLinkWhereUniqueInput | SnsLinkWhereUniqueInput[]
    delete?: SnsLinkWhereUniqueInput | SnsLinkWhereUniqueInput[]
    connect?: SnsLinkWhereUniqueInput | SnsLinkWhereUniqueInput[]
    update?: SnsLinkUpdateWithWhereUniqueWithoutUserInput | SnsLinkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SnsLinkUpdateManyWithWhereWithoutUserInput | SnsLinkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SnsLinkScalarWhereInput | SnsLinkScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    upsert?: SubscriptionUpsertWithoutUserInput
    disconnect?: SubscriptionWhereInput | boolean
    delete?: SubscriptionWhereInput | boolean
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutUserInput, SubscriptionUpdateWithoutUserInput>, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type BillingRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput> | BillingRecordCreateWithoutUserInput[] | BillingRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutUserInput | BillingRecordCreateOrConnectWithoutUserInput[]
    upsert?: BillingRecordUpsertWithWhereUniqueWithoutUserInput | BillingRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BillingRecordCreateManyUserInputEnvelope
    set?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    disconnect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    delete?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    update?: BillingRecordUpdateWithWhereUniqueWithoutUserInput | BillingRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BillingRecordUpdateManyWithWhereWithoutUserInput | BillingRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BillingRecordScalarWhereInput | BillingRecordScalarWhereInput[]
  }

  export type CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput = {
    create?: XOR<CorporateTenantCreateWithoutAdminInput, CorporateTenantUncheckedCreateWithoutAdminInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutAdminInput
    upsert?: CorporateTenantUpsertWithoutAdminInput
    disconnect?: CorporateTenantWhereInput | boolean
    delete?: CorporateTenantWhereInput | boolean
    connect?: CorporateTenantWhereUniqueInput
    update?: XOR<XOR<CorporateTenantUpdateToOneWithWhereWithoutAdminInput, CorporateTenantUpdateWithoutAdminInput>, CorporateTenantUncheckedUpdateWithoutAdminInput>
  }

  export type ContactUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput> | ContactCreateWithoutUserInput[] | ContactUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutUserInput | ContactCreateOrConnectWithoutUserInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutUserInput | ContactUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContactCreateManyUserInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutUserInput | ContactUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutUserInput | ContactUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutSnsLinksInput = {
    create?: XOR<UserCreateWithoutSnsLinksInput, UserUncheckedCreateWithoutSnsLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutSnsLinksInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSnsLinksNestedInput = {
    create?: XOR<UserCreateWithoutSnsLinksInput, UserUncheckedCreateWithoutSnsLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutSnsLinksInput
    upsert?: UserUpsertWithoutSnsLinksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSnsLinksInput, UserUpdateWithoutSnsLinksInput>, UserUncheckedUpdateWithoutSnsLinksInput>
  }

  export type UserCreateNestedOneWithoutCustomLinksInput = {
    create?: XOR<UserCreateWithoutCustomLinksInput, UserUncheckedCreateWithoutCustomLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomLinksInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCustomLinksNestedInput = {
    create?: XOR<UserCreateWithoutCustomLinksInput, UserUncheckedCreateWithoutCustomLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomLinksInput
    upsert?: UserUpsertWithoutCustomLinksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCustomLinksInput, UserUpdateWithoutCustomLinksInput>, UserUncheckedUpdateWithoutCustomLinksInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
  }

  export type CorporateTenantCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<CorporateTenantCreateWithoutSubscriptionInput, CorporateTenantUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutSubscriptionInput
    connect?: CorporateTenantWhereUniqueInput
  }

  export type CorporateTenantUncheckedCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<CorporateTenantCreateWithoutSubscriptionInput, CorporateTenantUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutSubscriptionInput
    connect?: CorporateTenantWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSubscriptionNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    upsert?: UserUpsertWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionInput, UserUpdateWithoutSubscriptionInput>, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type CorporateTenantUpdateOneWithoutSubscriptionNestedInput = {
    create?: XOR<CorporateTenantCreateWithoutSubscriptionInput, CorporateTenantUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutSubscriptionInput
    upsert?: CorporateTenantUpsertWithoutSubscriptionInput
    disconnect?: CorporateTenantWhereInput | boolean
    delete?: CorporateTenantWhereInput | boolean
    connect?: CorporateTenantWhereUniqueInput
    update?: XOR<XOR<CorporateTenantUpdateToOneWithWhereWithoutSubscriptionInput, CorporateTenantUpdateWithoutSubscriptionInput>, CorporateTenantUncheckedUpdateWithoutSubscriptionInput>
  }

  export type CorporateTenantUncheckedUpdateOneWithoutSubscriptionNestedInput = {
    create?: XOR<CorporateTenantCreateWithoutSubscriptionInput, CorporateTenantUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutSubscriptionInput
    upsert?: CorporateTenantUpsertWithoutSubscriptionInput
    disconnect?: CorporateTenantWhereInput | boolean
    delete?: CorporateTenantWhereInput | boolean
    connect?: CorporateTenantWhereUniqueInput
    update?: XOR<XOR<CorporateTenantUpdateToOneWithWhereWithoutSubscriptionInput, CorporateTenantUpdateWithoutSubscriptionInput>, CorporateTenantUncheckedUpdateWithoutSubscriptionInput>
  }

  export type UserCreateNestedOneWithoutBillingHistoryInput = {
    create?: XOR<UserCreateWithoutBillingHistoryInput, UserUncheckedCreateWithoutBillingHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutBillingHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBillingHistoryNestedInput = {
    create?: XOR<UserCreateWithoutBillingHistoryInput, UserUncheckedCreateWithoutBillingHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutBillingHistoryInput
    upsert?: UserUpsertWithoutBillingHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBillingHistoryInput, UserUpdateWithoutBillingHistoryInput>, UserUncheckedUpdateWithoutBillingHistoryInput>
  }

  export type UserCreateNestedOneWithoutPasswordResetTokensInput = {
    create?: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPasswordResetTokensNestedInput = {
    create?: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetTokensInput
    upsert?: UserUpsertWithoutPasswordResetTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPasswordResetTokensInput, UserUpdateWithoutPasswordResetTokensInput>, UserUncheckedUpdateWithoutPasswordResetTokensInput>
  }

  export type UserCreateNestedOneWithoutContactsInput = {
    create?: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutContactsNestedInput = {
    create?: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsInput
    upsert?: UserUpsertWithoutContactsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContactsInput, UserUpdateWithoutContactsInput>, UserUncheckedUpdateWithoutContactsInput>
  }

  export type CorporateActivityLogCreateNestedManyWithoutTenantInput = {
    create?: XOR<CorporateActivityLogCreateWithoutTenantInput, CorporateActivityLogUncheckedCreateWithoutTenantInput> | CorporateActivityLogCreateWithoutTenantInput[] | CorporateActivityLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CorporateActivityLogCreateOrConnectWithoutTenantInput | CorporateActivityLogCreateOrConnectWithoutTenantInput[]
    createMany?: CorporateActivityLogCreateManyTenantInputEnvelope
    connect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedOneWithoutCorporateTenantInput = {
    create?: XOR<SubscriptionCreateWithoutCorporateTenantInput, SubscriptionUncheckedCreateWithoutCorporateTenantInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCorporateTenantInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAdminOfTenantInput = {
    create?: XOR<UserCreateWithoutAdminOfTenantInput, UserUncheckedCreateWithoutAdminOfTenantInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminOfTenantInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutTenantInput = {
    create?: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput> | DepartmentCreateWithoutTenantInput[] | DepartmentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTenantInput | DepartmentCreateOrConnectWithoutTenantInput[]
    createMany?: DepartmentCreateManyTenantInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type CorporateSnsLinkCreateNestedManyWithoutTenantInput = {
    create?: XOR<CorporateSnsLinkCreateWithoutTenantInput, CorporateSnsLinkUncheckedCreateWithoutTenantInput> | CorporateSnsLinkCreateWithoutTenantInput[] | CorporateSnsLinkUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CorporateSnsLinkCreateOrConnectWithoutTenantInput | CorporateSnsLinkCreateOrConnectWithoutTenantInput[]
    createMany?: CorporateSnsLinkCreateManyTenantInputEnvelope
    connect?: CorporateSnsLinkWhereUniqueInput | CorporateSnsLinkWhereUniqueInput[]
  }

  export type CorporateActivityLogUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CorporateActivityLogCreateWithoutTenantInput, CorporateActivityLogUncheckedCreateWithoutTenantInput> | CorporateActivityLogCreateWithoutTenantInput[] | CorporateActivityLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CorporateActivityLogCreateOrConnectWithoutTenantInput | CorporateActivityLogCreateOrConnectWithoutTenantInput[]
    createMany?: CorporateActivityLogCreateManyTenantInputEnvelope
    connect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput> | DepartmentCreateWithoutTenantInput[] | DepartmentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTenantInput | DepartmentCreateOrConnectWithoutTenantInput[]
    createMany?: DepartmentCreateManyTenantInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type CorporateSnsLinkUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CorporateSnsLinkCreateWithoutTenantInput, CorporateSnsLinkUncheckedCreateWithoutTenantInput> | CorporateSnsLinkCreateWithoutTenantInput[] | CorporateSnsLinkUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CorporateSnsLinkCreateOrConnectWithoutTenantInput | CorporateSnsLinkCreateOrConnectWithoutTenantInput[]
    createMany?: CorporateSnsLinkCreateManyTenantInputEnvelope
    connect?: CorporateSnsLinkWhereUniqueInput | CorporateSnsLinkWhereUniqueInput[]
  }

  export type CorporateActivityLogUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CorporateActivityLogCreateWithoutTenantInput, CorporateActivityLogUncheckedCreateWithoutTenantInput> | CorporateActivityLogCreateWithoutTenantInput[] | CorporateActivityLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CorporateActivityLogCreateOrConnectWithoutTenantInput | CorporateActivityLogCreateOrConnectWithoutTenantInput[]
    upsert?: CorporateActivityLogUpsertWithWhereUniqueWithoutTenantInput | CorporateActivityLogUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CorporateActivityLogCreateManyTenantInputEnvelope
    set?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    disconnect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    delete?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    connect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    update?: CorporateActivityLogUpdateWithWhereUniqueWithoutTenantInput | CorporateActivityLogUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CorporateActivityLogUpdateManyWithWhereWithoutTenantInput | CorporateActivityLogUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CorporateActivityLogScalarWhereInput | CorporateActivityLogScalarWhereInput[]
  }

  export type SubscriptionUpdateOneWithoutCorporateTenantNestedInput = {
    create?: XOR<SubscriptionCreateWithoutCorporateTenantInput, SubscriptionUncheckedCreateWithoutCorporateTenantInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCorporateTenantInput
    upsert?: SubscriptionUpsertWithoutCorporateTenantInput
    disconnect?: SubscriptionWhereInput | boolean
    delete?: SubscriptionWhereInput | boolean
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutCorporateTenantInput, SubscriptionUpdateWithoutCorporateTenantInput>, SubscriptionUncheckedUpdateWithoutCorporateTenantInput>
  }

  export type UserUpdateOneRequiredWithoutAdminOfTenantNestedInput = {
    create?: XOR<UserCreateWithoutAdminOfTenantInput, UserUncheckedCreateWithoutAdminOfTenantInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminOfTenantInput
    upsert?: UserUpsertWithoutAdminOfTenantInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminOfTenantInput, UserUpdateWithoutAdminOfTenantInput>, UserUncheckedUpdateWithoutAdminOfTenantInput>
  }

  export type UserUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutTenantNestedInput = {
    create?: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput> | DepartmentCreateWithoutTenantInput[] | DepartmentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTenantInput | DepartmentCreateOrConnectWithoutTenantInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutTenantInput | DepartmentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: DepartmentCreateManyTenantInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutTenantInput | DepartmentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutTenantInput | DepartmentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type CorporateSnsLinkUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CorporateSnsLinkCreateWithoutTenantInput, CorporateSnsLinkUncheckedCreateWithoutTenantInput> | CorporateSnsLinkCreateWithoutTenantInput[] | CorporateSnsLinkUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CorporateSnsLinkCreateOrConnectWithoutTenantInput | CorporateSnsLinkCreateOrConnectWithoutTenantInput[]
    upsert?: CorporateSnsLinkUpsertWithWhereUniqueWithoutTenantInput | CorporateSnsLinkUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CorporateSnsLinkCreateManyTenantInputEnvelope
    set?: CorporateSnsLinkWhereUniqueInput | CorporateSnsLinkWhereUniqueInput[]
    disconnect?: CorporateSnsLinkWhereUniqueInput | CorporateSnsLinkWhereUniqueInput[]
    delete?: CorporateSnsLinkWhereUniqueInput | CorporateSnsLinkWhereUniqueInput[]
    connect?: CorporateSnsLinkWhereUniqueInput | CorporateSnsLinkWhereUniqueInput[]
    update?: CorporateSnsLinkUpdateWithWhereUniqueWithoutTenantInput | CorporateSnsLinkUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CorporateSnsLinkUpdateManyWithWhereWithoutTenantInput | CorporateSnsLinkUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CorporateSnsLinkScalarWhereInput | CorporateSnsLinkScalarWhereInput[]
  }

  export type CorporateActivityLogUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CorporateActivityLogCreateWithoutTenantInput, CorporateActivityLogUncheckedCreateWithoutTenantInput> | CorporateActivityLogCreateWithoutTenantInput[] | CorporateActivityLogUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CorporateActivityLogCreateOrConnectWithoutTenantInput | CorporateActivityLogCreateOrConnectWithoutTenantInput[]
    upsert?: CorporateActivityLogUpsertWithWhereUniqueWithoutTenantInput | CorporateActivityLogUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CorporateActivityLogCreateManyTenantInputEnvelope
    set?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    disconnect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    delete?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    connect?: CorporateActivityLogWhereUniqueInput | CorporateActivityLogWhereUniqueInput[]
    update?: CorporateActivityLogUpdateWithWhereUniqueWithoutTenantInput | CorporateActivityLogUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CorporateActivityLogUpdateManyWithWhereWithoutTenantInput | CorporateActivityLogUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CorporateActivityLogScalarWhereInput | CorporateActivityLogScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput> | UserCreateWithoutTenantInput[] | UserUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTenantInput | UserCreateOrConnectWithoutTenantInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTenantInput | UserUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UserCreateManyTenantInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTenantInput | UserUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTenantInput | UserUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput> | DepartmentCreateWithoutTenantInput[] | DepartmentUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutTenantInput | DepartmentCreateOrConnectWithoutTenantInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutTenantInput | DepartmentUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: DepartmentCreateManyTenantInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutTenantInput | DepartmentUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutTenantInput | DepartmentUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type CorporateSnsLinkUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CorporateSnsLinkCreateWithoutTenantInput, CorporateSnsLinkUncheckedCreateWithoutTenantInput> | CorporateSnsLinkCreateWithoutTenantInput[] | CorporateSnsLinkUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CorporateSnsLinkCreateOrConnectWithoutTenantInput | CorporateSnsLinkCreateOrConnectWithoutTenantInput[]
    upsert?: CorporateSnsLinkUpsertWithWhereUniqueWithoutTenantInput | CorporateSnsLinkUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CorporateSnsLinkCreateManyTenantInputEnvelope
    set?: CorporateSnsLinkWhereUniqueInput | CorporateSnsLinkWhereUniqueInput[]
    disconnect?: CorporateSnsLinkWhereUniqueInput | CorporateSnsLinkWhereUniqueInput[]
    delete?: CorporateSnsLinkWhereUniqueInput | CorporateSnsLinkWhereUniqueInput[]
    connect?: CorporateSnsLinkWhereUniqueInput | CorporateSnsLinkWhereUniqueInput[]
    update?: CorporateSnsLinkUpdateWithWhereUniqueWithoutTenantInput | CorporateSnsLinkUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CorporateSnsLinkUpdateManyWithWhereWithoutTenantInput | CorporateSnsLinkUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CorporateSnsLinkScalarWhereInput | CorporateSnsLinkScalarWhereInput[]
  }

  export type CorporateTenantCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<CorporateTenantCreateWithoutDepartmentsInput, CorporateTenantUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutDepartmentsInput
    connect?: CorporateTenantWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CorporateTenantUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<CorporateTenantCreateWithoutDepartmentsInput, CorporateTenantUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutDepartmentsInput
    upsert?: CorporateTenantUpsertWithoutDepartmentsInput
    connect?: CorporateTenantWhereUniqueInput
    update?: XOR<XOR<CorporateTenantUpdateToOneWithWhereWithoutDepartmentsInput, CorporateTenantUpdateWithoutDepartmentsInput>, CorporateTenantUncheckedUpdateWithoutDepartmentsInput>
  }

  export type UserUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CorporateTenantCreateNestedOneWithoutCorporateSnsLinksInput = {
    create?: XOR<CorporateTenantCreateWithoutCorporateSnsLinksInput, CorporateTenantUncheckedCreateWithoutCorporateSnsLinksInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutCorporateSnsLinksInput
    connect?: CorporateTenantWhereUniqueInput
  }

  export type CorporateTenantUpdateOneRequiredWithoutCorporateSnsLinksNestedInput = {
    create?: XOR<CorporateTenantCreateWithoutCorporateSnsLinksInput, CorporateTenantUncheckedCreateWithoutCorporateSnsLinksInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutCorporateSnsLinksInput
    upsert?: CorporateTenantUpsertWithoutCorporateSnsLinksInput
    connect?: CorporateTenantWhereUniqueInput
    update?: XOR<XOR<CorporateTenantUpdateToOneWithWhereWithoutCorporateSnsLinksInput, CorporateTenantUpdateWithoutCorporateSnsLinksInput>, CorporateTenantUncheckedUpdateWithoutCorporateSnsLinksInput>
  }

  export type CorporateTenantCreateNestedOneWithoutActivityLogsInput = {
    create?: XOR<CorporateTenantCreateWithoutActivityLogsInput, CorporateTenantUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutActivityLogsInput
    connect?: CorporateTenantWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutActivityLogsInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    connect?: UserWhereUniqueInput
  }

  export type CorporateTenantUpdateOneRequiredWithoutActivityLogsNestedInput = {
    create?: XOR<CorporateTenantCreateWithoutActivityLogsInput, CorporateTenantUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: CorporateTenantCreateOrConnectWithoutActivityLogsInput
    upsert?: CorporateTenantUpsertWithoutActivityLogsInput
    connect?: CorporateTenantWhereUniqueInput
    update?: XOR<XOR<CorporateTenantUpdateToOneWithWhereWithoutActivityLogsInput, CorporateTenantUpdateWithoutActivityLogsInput>, CorporateTenantUncheckedUpdateWithoutActivityLogsInput>
  }

  export type UserUpdateOneWithoutActivityLogsNestedInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    upsert?: UserUpsertWithoutActivityLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivityLogsInput, UserUpdateWithoutActivityLogsInput>, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PasswordResetTokenCreateWithoutUserInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type PasswordResetTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type PasswordResetTokenCreateOrConnectWithoutUserInput = {
    where: PasswordResetTokenWhereUniqueInput
    create: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetTokenCreateManyUserInputEnvelope = {
    data: PasswordResetTokenCreateManyUserInput | PasswordResetTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CorporateActivityLogCreateWithoutUserInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    tenant: CorporateTenantCreateNestedOneWithoutActivityLogsInput
  }

  export type CorporateActivityLogUncheckedCreateWithoutUserInput = {
    id?: string
    tenantId: string
    action: string
    entityType: string
    entityId?: string | null
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CorporateActivityLogCreateOrConnectWithoutUserInput = {
    where: CorporateActivityLogWhereUniqueInput
    create: XOR<CorporateActivityLogCreateWithoutUserInput, CorporateActivityLogUncheckedCreateWithoutUserInput>
  }

  export type CorporateActivityLogCreateManyUserInputEnvelope = {
    data: CorporateActivityLogCreateManyUserInput | CorporateActivityLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId?: string | null
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId?: string | null
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    slug: string
    views?: number
    isPublic?: boolean
    lastAccessed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    slug: string
    views?: number
    isPublic?: boolean
    lastAccessed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type CustomLinkCreateWithoutUserInput = {
    id?: string
    name: string
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomLinkUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomLinkCreateOrConnectWithoutUserInput = {
    where: CustomLinkWhereUniqueInput
    create: XOR<CustomLinkCreateWithoutUserInput, CustomLinkUncheckedCreateWithoutUserInput>
  }

  export type CustomLinkCreateManyUserInputEnvelope = {
    data: CustomLinkCreateManyUserInput | CustomLinkCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SnsLinkCreateWithoutUserInput = {
    id?: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SnsLinkUncheckedCreateWithoutUserInput = {
    id?: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SnsLinkCreateOrConnectWithoutUserInput = {
    where: SnsLinkWhereUniqueInput
    create: XOR<SnsLinkCreateWithoutUserInput, SnsLinkUncheckedCreateWithoutUserInput>
  }

  export type SnsLinkCreateManyUserInputEnvelope = {
    data: SnsLinkCreateManyUserInput | SnsLinkCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutUserInput = {
    id?: string
    status: string
    plan: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    canceledAt?: Date | string | null
    cancelReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    corporateTenant?: CorporateTenantCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    status: string
    plan: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    canceledAt?: Date | string | null
    cancelReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    corporateTenant?: CorporateTenantUncheckedCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionCreateOrConnectWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type BillingRecordCreateWithoutUserInput = {
    id?: string
    invoiceId?: string | null
    amount: number
    status: string
    description?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingRecordUncheckedCreateWithoutUserInput = {
    id?: string
    invoiceId?: string | null
    amount: number
    status: string
    description?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingRecordCreateOrConnectWithoutUserInput = {
    where: BillingRecordWhereUniqueInput
    create: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput>
  }

  export type BillingRecordCreateManyUserInputEnvelope = {
    data: BillingRecordCreateManyUserInput | BillingRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: CorporateTenantCreateNestedOneWithoutDepartmentsInput
  }

  export type DepartmentUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenantId: string
  }

  export type DepartmentCreateOrConnectWithoutUsersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
  }

  export type CorporateTenantCreateWithoutUsersInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutTenantInput
    subscription?: SubscriptionCreateNestedOneWithoutCorporateTenantInput
    admin: UserCreateNestedOneWithoutAdminOfTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    subscriptionId?: string | null
    adminId: string
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantCreateOrConnectWithoutUsersInput = {
    where: CorporateTenantWhereUniqueInput
    create: XOR<CorporateTenantCreateWithoutUsersInput, CorporateTenantUncheckedCreateWithoutUsersInput>
  }

  export type CorporateTenantCreateWithoutAdminInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutTenantInput
    subscription?: SubscriptionCreateNestedOneWithoutCorporateTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantUncheckedCreateWithoutAdminInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    subscriptionId?: string | null
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantCreateOrConnectWithoutAdminInput = {
    where: CorporateTenantWhereUniqueInput
    create: XOR<CorporateTenantCreateWithoutAdminInput, CorporateTenantUncheckedCreateWithoutAdminInput>
  }

  export type ContactCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    companyName?: string | null
    type: string
    subject: string
    message: string
    status?: string
    notes?: string | null
    assignedTo?: string | null
  }

  export type ContactUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    companyName?: string | null
    type: string
    subject: string
    message: string
    status?: string
    notes?: string | null
    assignedTo?: string | null
  }

  export type ContactCreateOrConnectWithoutUserInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
  }

  export type ContactCreateManyUserInputEnvelope = {
    data: ContactCreateManyUserInput | ContactCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PasswordResetTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: PasswordResetTokenWhereUniqueInput
    update: XOR<PasswordResetTokenUpdateWithoutUserInput, PasswordResetTokenUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordResetTokenCreateWithoutUserInput, PasswordResetTokenUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: PasswordResetTokenWhereUniqueInput
    data: XOR<PasswordResetTokenUpdateWithoutUserInput, PasswordResetTokenUncheckedUpdateWithoutUserInput>
  }

  export type PasswordResetTokenUpdateManyWithWhereWithoutUserInput = {
    where: PasswordResetTokenScalarWhereInput
    data: XOR<PasswordResetTokenUpdateManyMutationInput, PasswordResetTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type PasswordResetTokenScalarWhereInput = {
    AND?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
    OR?: PasswordResetTokenScalarWhereInput[]
    NOT?: PasswordResetTokenScalarWhereInput | PasswordResetTokenScalarWhereInput[]
    id?: StringFilter<"PasswordResetToken"> | string
    token?: StringFilter<"PasswordResetToken"> | string
    expires?: DateTimeFilter<"PasswordResetToken"> | Date | string
    userId?: StringFilter<"PasswordResetToken"> | string
    createdAt?: DateTimeFilter<"PasswordResetToken"> | Date | string
  }

  export type CorporateActivityLogUpsertWithWhereUniqueWithoutUserInput = {
    where: CorporateActivityLogWhereUniqueInput
    update: XOR<CorporateActivityLogUpdateWithoutUserInput, CorporateActivityLogUncheckedUpdateWithoutUserInput>
    create: XOR<CorporateActivityLogCreateWithoutUserInput, CorporateActivityLogUncheckedCreateWithoutUserInput>
  }

  export type CorporateActivityLogUpdateWithWhereUniqueWithoutUserInput = {
    where: CorporateActivityLogWhereUniqueInput
    data: XOR<CorporateActivityLogUpdateWithoutUserInput, CorporateActivityLogUncheckedUpdateWithoutUserInput>
  }

  export type CorporateActivityLogUpdateManyWithWhereWithoutUserInput = {
    where: CorporateActivityLogScalarWhereInput
    data: XOR<CorporateActivityLogUpdateManyMutationInput, CorporateActivityLogUncheckedUpdateManyWithoutUserInput>
  }

  export type CorporateActivityLogScalarWhereInput = {
    AND?: CorporateActivityLogScalarWhereInput | CorporateActivityLogScalarWhereInput[]
    OR?: CorporateActivityLogScalarWhereInput[]
    NOT?: CorporateActivityLogScalarWhereInput | CorporateActivityLogScalarWhereInput[]
    id?: StringFilter<"CorporateActivityLog"> | string
    tenantId?: StringFilter<"CorporateActivityLog"> | string
    userId?: StringNullableFilter<"CorporateActivityLog"> | string | null
    action?: StringFilter<"CorporateActivityLog"> | string
    entityType?: StringFilter<"CorporateActivityLog"> | string
    entityId?: StringNullableFilter<"CorporateActivityLog"> | string | null
    description?: StringFilter<"CorporateActivityLog"> | string
    metadata?: JsonNullableFilter<"CorporateActivityLog">
    createdAt?: DateTimeFilter<"CorporateActivityLog"> | Date | string
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringNullableFilter<"Account"> | string | null
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    lastAccessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    lastAccessed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomLinkUpsertWithWhereUniqueWithoutUserInput = {
    where: CustomLinkWhereUniqueInput
    update: XOR<CustomLinkUpdateWithoutUserInput, CustomLinkUncheckedUpdateWithoutUserInput>
    create: XOR<CustomLinkCreateWithoutUserInput, CustomLinkUncheckedCreateWithoutUserInput>
  }

  export type CustomLinkUpdateWithWhereUniqueWithoutUserInput = {
    where: CustomLinkWhereUniqueInput
    data: XOR<CustomLinkUpdateWithoutUserInput, CustomLinkUncheckedUpdateWithoutUserInput>
  }

  export type CustomLinkUpdateManyWithWhereWithoutUserInput = {
    where: CustomLinkScalarWhereInput
    data: XOR<CustomLinkUpdateManyMutationInput, CustomLinkUncheckedUpdateManyWithoutUserInput>
  }

  export type CustomLinkScalarWhereInput = {
    AND?: CustomLinkScalarWhereInput | CustomLinkScalarWhereInput[]
    OR?: CustomLinkScalarWhereInput[]
    NOT?: CustomLinkScalarWhereInput | CustomLinkScalarWhereInput[]
    id?: StringFilter<"CustomLink"> | string
    userId?: StringFilter<"CustomLink"> | string
    name?: StringFilter<"CustomLink"> | string
    url?: StringFilter<"CustomLink"> | string
    displayOrder?: IntFilter<"CustomLink"> | number
    createdAt?: DateTimeFilter<"CustomLink"> | Date | string
    updatedAt?: DateTimeFilter<"CustomLink"> | Date | string
  }

  export type SnsLinkUpsertWithWhereUniqueWithoutUserInput = {
    where: SnsLinkWhereUniqueInput
    update: XOR<SnsLinkUpdateWithoutUserInput, SnsLinkUncheckedUpdateWithoutUserInput>
    create: XOR<SnsLinkCreateWithoutUserInput, SnsLinkUncheckedCreateWithoutUserInput>
  }

  export type SnsLinkUpdateWithWhereUniqueWithoutUserInput = {
    where: SnsLinkWhereUniqueInput
    data: XOR<SnsLinkUpdateWithoutUserInput, SnsLinkUncheckedUpdateWithoutUserInput>
  }

  export type SnsLinkUpdateManyWithWhereWithoutUserInput = {
    where: SnsLinkScalarWhereInput
    data: XOR<SnsLinkUpdateManyMutationInput, SnsLinkUncheckedUpdateManyWithoutUserInput>
  }

  export type SnsLinkScalarWhereInput = {
    AND?: SnsLinkScalarWhereInput | SnsLinkScalarWhereInput[]
    OR?: SnsLinkScalarWhereInput[]
    NOT?: SnsLinkScalarWhereInput | SnsLinkScalarWhereInput[]
    id?: StringFilter<"SnsLink"> | string
    userId?: StringFilter<"SnsLink"> | string
    platform?: StringFilter<"SnsLink"> | string
    username?: StringNullableFilter<"SnsLink"> | string | null
    url?: StringFilter<"SnsLink"> | string
    displayOrder?: IntFilter<"SnsLink"> | number
    createdAt?: DateTimeFilter<"SnsLink"> | Date | string
    updatedAt?: DateTimeFilter<"SnsLink"> | Date | string
  }

  export type SubscriptionUpsertWithoutUserInput = {
    update: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    where?: SubscriptionWhereInput
  }

  export type SubscriptionUpdateToOneWithWhereWithoutUserInput = {
    where?: SubscriptionWhereInput
    data: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type SubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corporateTenant?: CorporateTenantUpdateOneWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corporateTenant?: CorporateTenantUncheckedUpdateOneWithoutSubscriptionNestedInput
  }

  export type BillingRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: BillingRecordWhereUniqueInput
    update: XOR<BillingRecordUpdateWithoutUserInput, BillingRecordUncheckedUpdateWithoutUserInput>
    create: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput>
  }

  export type BillingRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: BillingRecordWhereUniqueInput
    data: XOR<BillingRecordUpdateWithoutUserInput, BillingRecordUncheckedUpdateWithoutUserInput>
  }

  export type BillingRecordUpdateManyWithWhereWithoutUserInput = {
    where: BillingRecordScalarWhereInput
    data: XOR<BillingRecordUpdateManyMutationInput, BillingRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type BillingRecordScalarWhereInput = {
    AND?: BillingRecordScalarWhereInput | BillingRecordScalarWhereInput[]
    OR?: BillingRecordScalarWhereInput[]
    NOT?: BillingRecordScalarWhereInput | BillingRecordScalarWhereInput[]
    id?: StringFilter<"BillingRecord"> | string
    userId?: StringFilter<"BillingRecord"> | string
    invoiceId?: StringNullableFilter<"BillingRecord"> | string | null
    amount?: IntFilter<"BillingRecord"> | number
    status?: StringFilter<"BillingRecord"> | string
    description?: StringNullableFilter<"BillingRecord"> | string | null
    paidAt?: DateTimeNullableFilter<"BillingRecord"> | Date | string | null
    createdAt?: DateTimeFilter<"BillingRecord"> | Date | string
    updatedAt?: DateTimeFilter<"BillingRecord"> | Date | string
  }

  export type DepartmentUpsertWithoutUsersInput = {
    update: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutUsersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: CorporateTenantUpdateOneRequiredWithoutDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenantId?: StringFieldUpdateOperationsInput | string
  }

  export type CorporateTenantUpsertWithoutUsersInput = {
    update: XOR<CorporateTenantUpdateWithoutUsersInput, CorporateTenantUncheckedUpdateWithoutUsersInput>
    create: XOR<CorporateTenantCreateWithoutUsersInput, CorporateTenantUncheckedCreateWithoutUsersInput>
    where?: CorporateTenantWhereInput
  }

  export type CorporateTenantUpdateToOneWithWhereWithoutUsersInput = {
    where?: CorporateTenantWhereInput
    data: XOR<CorporateTenantUpdateWithoutUsersInput, CorporateTenantUncheckedUpdateWithoutUsersInput>
  }

  export type CorporateTenantUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    activityLogs?: CorporateActivityLogUpdateManyWithoutTenantNestedInput
    subscription?: SubscriptionUpdateOneWithoutCorporateTenantNestedInput
    admin?: UserUpdateOneRequiredWithoutAdminOfTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUpdateManyWithoutTenantNestedInput
  }

  export type CorporateTenantUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: StringFieldUpdateOperationsInput | string
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CorporateTenantUpsertWithoutAdminInput = {
    update: XOR<CorporateTenantUpdateWithoutAdminInput, CorporateTenantUncheckedUpdateWithoutAdminInput>
    create: XOR<CorporateTenantCreateWithoutAdminInput, CorporateTenantUncheckedCreateWithoutAdminInput>
    where?: CorporateTenantWhereInput
  }

  export type CorporateTenantUpdateToOneWithWhereWithoutAdminInput = {
    where?: CorporateTenantWhereInput
    data: XOR<CorporateTenantUpdateWithoutAdminInput, CorporateTenantUncheckedUpdateWithoutAdminInput>
  }

  export type CorporateTenantUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    activityLogs?: CorporateActivityLogUpdateManyWithoutTenantNestedInput
    subscription?: SubscriptionUpdateOneWithoutCorporateTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUpdateManyWithoutTenantNestedInput
  }

  export type CorporateTenantUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type ContactUpsertWithWhereUniqueWithoutUserInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutUserInput, ContactUncheckedUpdateWithoutUserInput>
    create: XOR<ContactCreateWithoutUserInput, ContactUncheckedCreateWithoutUserInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutUserInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutUserInput, ContactUncheckedUpdateWithoutUserInput>
  }

  export type ContactUpdateManyWithWhereWithoutUserInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutUserInput>
  }

  export type ContactScalarWhereInput = {
    AND?: ContactScalarWhereInput | ContactScalarWhereInput[]
    OR?: ContactScalarWhereInput[]
    NOT?: ContactScalarWhereInput | ContactScalarWhereInput[]
    id?: StringFilter<"Contact"> | string
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    name?: StringFilter<"Contact"> | string
    email?: StringFilter<"Contact"> | string
    companyName?: StringNullableFilter<"Contact"> | string | null
    type?: StringFilter<"Contact"> | string
    subject?: StringFilter<"Contact"> | string
    message?: StringFilter<"Contact"> | string
    status?: StringFilter<"Contact"> | string
    notes?: StringNullableFilter<"Contact"> | string | null
    assignedTo?: StringNullableFilter<"Contact"> | string | null
    userId?: StringNullableFilter<"Contact"> | string | null
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSnsLinksInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSnsLinksInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSnsLinksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSnsLinksInput, UserUncheckedCreateWithoutSnsLinksInput>
  }

  export type UserUpsertWithoutSnsLinksInput = {
    update: XOR<UserUpdateWithoutSnsLinksInput, UserUncheckedUpdateWithoutSnsLinksInput>
    create: XOR<UserCreateWithoutSnsLinksInput, UserUncheckedCreateWithoutSnsLinksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSnsLinksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSnsLinksInput, UserUncheckedUpdateWithoutSnsLinksInput>
  }

  export type UserUpdateWithoutSnsLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSnsLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCustomLinksInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCustomLinksInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCustomLinksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCustomLinksInput, UserUncheckedCreateWithoutCustomLinksInput>
  }

  export type UserUpsertWithoutCustomLinksInput = {
    update: XOR<UserUpdateWithoutCustomLinksInput, UserUncheckedUpdateWithoutCustomLinksInput>
    create: XOR<UserCreateWithoutCustomLinksInput, UserUncheckedCreateWithoutCustomLinksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCustomLinksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCustomLinksInput, UserUncheckedUpdateWithoutCustomLinksInput>
  }

  export type UserUpdateWithoutCustomLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCustomLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSubscriptionInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubscriptionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
  }

  export type CorporateTenantCreateWithoutSubscriptionInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutTenantInput
    admin: UserCreateNestedOneWithoutAdminOfTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    adminId: string
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantCreateOrConnectWithoutSubscriptionInput = {
    where: CorporateTenantWhereUniqueInput
    create: XOR<CorporateTenantCreateWithoutSubscriptionInput, CorporateTenantUncheckedCreateWithoutSubscriptionInput>
  }

  export type UserUpsertWithoutSubscriptionInput = {
    update: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type UserUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CorporateTenantUpsertWithoutSubscriptionInput = {
    update: XOR<CorporateTenantUpdateWithoutSubscriptionInput, CorporateTenantUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<CorporateTenantCreateWithoutSubscriptionInput, CorporateTenantUncheckedCreateWithoutSubscriptionInput>
    where?: CorporateTenantWhereInput
  }

  export type CorporateTenantUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: CorporateTenantWhereInput
    data: XOR<CorporateTenantUpdateWithoutSubscriptionInput, CorporateTenantUncheckedUpdateWithoutSubscriptionInput>
  }

  export type CorporateTenantUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    activityLogs?: CorporateActivityLogUpdateManyWithoutTenantNestedInput
    admin?: UserUpdateOneRequiredWithoutAdminOfTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUpdateManyWithoutTenantNestedInput
  }

  export type CorporateTenantUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    adminId?: StringFieldUpdateOperationsInput | string
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserCreateWithoutBillingHistoryInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBillingHistoryInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBillingHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBillingHistoryInput, UserUncheckedCreateWithoutBillingHistoryInput>
  }

  export type UserUpsertWithoutBillingHistoryInput = {
    update: XOR<UserUpdateWithoutBillingHistoryInput, UserUncheckedUpdateWithoutBillingHistoryInput>
    create: XOR<UserCreateWithoutBillingHistoryInput, UserUncheckedCreateWithoutBillingHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBillingHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBillingHistoryInput, UserUncheckedUpdateWithoutBillingHistoryInput>
  }

  export type UserUpdateWithoutBillingHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBillingHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPasswordResetTokensInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPasswordResetTokensInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPasswordResetTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
  }

  export type UserUpsertWithoutPasswordResetTokensInput = {
    update: XOR<UserUpdateWithoutPasswordResetTokensInput, UserUncheckedUpdateWithoutPasswordResetTokensInput>
    create: XOR<UserCreateWithoutPasswordResetTokensInput, UserUncheckedCreateWithoutPasswordResetTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPasswordResetTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPasswordResetTokensInput, UserUncheckedUpdateWithoutPasswordResetTokensInput>
  }

  export type UserUpdateWithoutPasswordResetTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPasswordResetTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutContactsInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutContactsInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutContactsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
  }

  export type UserUpsertWithoutContactsInput = {
    update: XOR<UserUpdateWithoutContactsInput, UserUncheckedUpdateWithoutContactsInput>
    create: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContactsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContactsInput, UserUncheckedUpdateWithoutContactsInput>
  }

  export type UserUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
  }

  export type CorporateActivityLogCreateWithoutTenantInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutActivityLogsInput
  }

  export type CorporateActivityLogUncheckedCreateWithoutTenantInput = {
    id?: string
    userId?: string | null
    action: string
    entityType: string
    entityId?: string | null
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CorporateActivityLogCreateOrConnectWithoutTenantInput = {
    where: CorporateActivityLogWhereUniqueInput
    create: XOR<CorporateActivityLogCreateWithoutTenantInput, CorporateActivityLogUncheckedCreateWithoutTenantInput>
  }

  export type CorporateActivityLogCreateManyTenantInputEnvelope = {
    data: CorporateActivityLogCreateManyTenantInput | CorporateActivityLogCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutCorporateTenantInput = {
    id?: string
    status: string
    plan: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    canceledAt?: Date | string | null
    cancelReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutCorporateTenantInput = {
    id?: string
    userId: string
    status: string
    plan: string
    priceId?: string | null
    subscriptionId?: string | null
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    canceledAt?: Date | string | null
    cancelReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutCorporateTenantInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutCorporateTenantInput, SubscriptionUncheckedCreateWithoutCorporateTenantInput>
  }

  export type UserCreateWithoutAdminOfTenantInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminOfTenantInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminOfTenantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminOfTenantInput, UserUncheckedCreateWithoutAdminOfTenantInput>
  }

  export type UserCreateWithoutTenantInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTenantInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTenantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserCreateManyTenantInputEnvelope = {
    data: UserCreateManyTenantInput | UserCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutTenantInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput>
  }

  export type DepartmentCreateManyTenantInputEnvelope = {
    data: DepartmentCreateManyTenantInput | DepartmentCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CorporateSnsLinkCreateWithoutTenantInput = {
    id?: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CorporateSnsLinkUncheckedCreateWithoutTenantInput = {
    id?: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CorporateSnsLinkCreateOrConnectWithoutTenantInput = {
    where: CorporateSnsLinkWhereUniqueInput
    create: XOR<CorporateSnsLinkCreateWithoutTenantInput, CorporateSnsLinkUncheckedCreateWithoutTenantInput>
  }

  export type CorporateSnsLinkCreateManyTenantInputEnvelope = {
    data: CorporateSnsLinkCreateManyTenantInput | CorporateSnsLinkCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CorporateActivityLogUpsertWithWhereUniqueWithoutTenantInput = {
    where: CorporateActivityLogWhereUniqueInput
    update: XOR<CorporateActivityLogUpdateWithoutTenantInput, CorporateActivityLogUncheckedUpdateWithoutTenantInput>
    create: XOR<CorporateActivityLogCreateWithoutTenantInput, CorporateActivityLogUncheckedCreateWithoutTenantInput>
  }

  export type CorporateActivityLogUpdateWithWhereUniqueWithoutTenantInput = {
    where: CorporateActivityLogWhereUniqueInput
    data: XOR<CorporateActivityLogUpdateWithoutTenantInput, CorporateActivityLogUncheckedUpdateWithoutTenantInput>
  }

  export type CorporateActivityLogUpdateManyWithWhereWithoutTenantInput = {
    where: CorporateActivityLogScalarWhereInput
    data: XOR<CorporateActivityLogUpdateManyMutationInput, CorporateActivityLogUncheckedUpdateManyWithoutTenantInput>
  }

  export type SubscriptionUpsertWithoutCorporateTenantInput = {
    update: XOR<SubscriptionUpdateWithoutCorporateTenantInput, SubscriptionUncheckedUpdateWithoutCorporateTenantInput>
    create: XOR<SubscriptionCreateWithoutCorporateTenantInput, SubscriptionUncheckedCreateWithoutCorporateTenantInput>
    where?: SubscriptionWhereInput
  }

  export type SubscriptionUpdateToOneWithWhereWithoutCorporateTenantInput = {
    where?: SubscriptionWhereInput
    data: XOR<SubscriptionUpdateWithoutCorporateTenantInput, SubscriptionUncheckedUpdateWithoutCorporateTenantInput>
  }

  export type SubscriptionUpdateWithoutCorporateTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutCorporateTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    priceId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    canceledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutAdminOfTenantInput = {
    update: XOR<UserUpdateWithoutAdminOfTenantInput, UserUncheckedUpdateWithoutAdminOfTenantInput>
    create: XOR<UserCreateWithoutAdminOfTenantInput, UserUncheckedCreateWithoutAdminOfTenantInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminOfTenantInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminOfTenantInput, UserUncheckedUpdateWithoutAdminOfTenantInput>
  }

  export type UserUpdateWithoutAdminOfTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminOfTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
    create: XOR<UserCreateWithoutTenantInput, UserUncheckedCreateWithoutTenantInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTenantInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTenantInput, UserUncheckedUpdateWithoutTenantInput>
  }

  export type UserUpdateManyWithWhereWithoutTenantInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTenantInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    nameEn?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    mainColor?: StringFilter<"User"> | string
    snsIconColor?: StringNullableFilter<"User"> | string | null
    bioBackgroundColor?: StringNullableFilter<"User"> | string | null
    bioTextColor?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    company?: StringNullableFilter<"User"> | string | null
    companyUrl?: StringNullableFilter<"User"> | string | null
    companyLabel?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    stripeCustomerId?: StringNullableFilter<"User"> | string | null
    trialEndsAt?: DateTimeNullableFilter<"User"> | Date | string | null
    subscriptionStatus?: StringNullableFilter<"User"> | string | null
    corporateRole?: StringNullableFilter<"User"> | string | null
    position?: StringNullableFilter<"User"> | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
    tenantId?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type DepartmentUpsertWithWhereUniqueWithoutTenantInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutTenantInput, DepartmentUncheckedUpdateWithoutTenantInput>
    create: XOR<DepartmentCreateWithoutTenantInput, DepartmentUncheckedCreateWithoutTenantInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutTenantInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutTenantInput, DepartmentUncheckedUpdateWithoutTenantInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutTenantInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutTenantInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    tenantId?: StringFilter<"Department"> | string
  }

  export type CorporateSnsLinkUpsertWithWhereUniqueWithoutTenantInput = {
    where: CorporateSnsLinkWhereUniqueInput
    update: XOR<CorporateSnsLinkUpdateWithoutTenantInput, CorporateSnsLinkUncheckedUpdateWithoutTenantInput>
    create: XOR<CorporateSnsLinkCreateWithoutTenantInput, CorporateSnsLinkUncheckedCreateWithoutTenantInput>
  }

  export type CorporateSnsLinkUpdateWithWhereUniqueWithoutTenantInput = {
    where: CorporateSnsLinkWhereUniqueInput
    data: XOR<CorporateSnsLinkUpdateWithoutTenantInput, CorporateSnsLinkUncheckedUpdateWithoutTenantInput>
  }

  export type CorporateSnsLinkUpdateManyWithWhereWithoutTenantInput = {
    where: CorporateSnsLinkScalarWhereInput
    data: XOR<CorporateSnsLinkUpdateManyMutationInput, CorporateSnsLinkUncheckedUpdateManyWithoutTenantInput>
  }

  export type CorporateSnsLinkScalarWhereInput = {
    AND?: CorporateSnsLinkScalarWhereInput | CorporateSnsLinkScalarWhereInput[]
    OR?: CorporateSnsLinkScalarWhereInput[]
    NOT?: CorporateSnsLinkScalarWhereInput | CorporateSnsLinkScalarWhereInput[]
    id?: StringFilter<"CorporateSnsLink"> | string
    tenantId?: StringFilter<"CorporateSnsLink"> | string
    platform?: StringFilter<"CorporateSnsLink"> | string
    username?: StringNullableFilter<"CorporateSnsLink"> | string | null
    url?: StringFilter<"CorporateSnsLink"> | string
    displayOrder?: IntFilter<"CorporateSnsLink"> | number
    isRequired?: BoolFilter<"CorporateSnsLink"> | boolean
    createdAt?: DateTimeFilter<"CorporateSnsLink"> | Date | string
    updatedAt?: DateTimeFilter<"CorporateSnsLink"> | Date | string
  }

  export type CorporateTenantCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutTenantInput
    subscription?: SubscriptionCreateNestedOneWithoutCorporateTenantInput
    admin: UserCreateNestedOneWithoutAdminOfTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantUncheckedCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    subscriptionId?: string | null
    adminId: string
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantCreateOrConnectWithoutDepartmentsInput = {
    where: CorporateTenantWhereUniqueInput
    create: XOR<CorporateTenantCreateWithoutDepartmentsInput, CorporateTenantUncheckedCreateWithoutDepartmentsInput>
  }

  export type UserCreateWithoutDepartmentInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDepartmentInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserCreateManyDepartmentInputEnvelope = {
    data: UserCreateManyDepartmentInput | UserCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type CorporateTenantUpsertWithoutDepartmentsInput = {
    update: XOR<CorporateTenantUpdateWithoutDepartmentsInput, CorporateTenantUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<CorporateTenantCreateWithoutDepartmentsInput, CorporateTenantUncheckedCreateWithoutDepartmentsInput>
    where?: CorporateTenantWhereInput
  }

  export type CorporateTenantUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: CorporateTenantWhereInput
    data: XOR<CorporateTenantUpdateWithoutDepartmentsInput, CorporateTenantUncheckedUpdateWithoutDepartmentsInput>
  }

  export type CorporateTenantUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    activityLogs?: CorporateActivityLogUpdateManyWithoutTenantNestedInput
    subscription?: SubscriptionUpdateOneWithoutCorporateTenantNestedInput
    admin?: UserUpdateOneRequiredWithoutAdminOfTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUpdateManyWithoutTenantNestedInput
  }

  export type CorporateTenantUncheckedUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: StringFieldUpdateOperationsInput | string
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
  }

  export type UserUpdateManyWithWhereWithoutDepartmentInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type CorporateTenantCreateWithoutCorporateSnsLinksInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    activityLogs?: CorporateActivityLogCreateNestedManyWithoutTenantInput
    subscription?: SubscriptionCreateNestedOneWithoutCorporateTenantInput
    admin: UserCreateNestedOneWithoutAdminOfTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantUncheckedCreateWithoutCorporateSnsLinksInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    subscriptionId?: string | null
    adminId: string
    activityLogs?: CorporateActivityLogUncheckedCreateNestedManyWithoutTenantInput
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantCreateOrConnectWithoutCorporateSnsLinksInput = {
    where: CorporateTenantWhereUniqueInput
    create: XOR<CorporateTenantCreateWithoutCorporateSnsLinksInput, CorporateTenantUncheckedCreateWithoutCorporateSnsLinksInput>
  }

  export type CorporateTenantUpsertWithoutCorporateSnsLinksInput = {
    update: XOR<CorporateTenantUpdateWithoutCorporateSnsLinksInput, CorporateTenantUncheckedUpdateWithoutCorporateSnsLinksInput>
    create: XOR<CorporateTenantCreateWithoutCorporateSnsLinksInput, CorporateTenantUncheckedCreateWithoutCorporateSnsLinksInput>
    where?: CorporateTenantWhereInput
  }

  export type CorporateTenantUpdateToOneWithWhereWithoutCorporateSnsLinksInput = {
    where?: CorporateTenantWhereInput
    data: XOR<CorporateTenantUpdateWithoutCorporateSnsLinksInput, CorporateTenantUncheckedUpdateWithoutCorporateSnsLinksInput>
  }

  export type CorporateTenantUpdateWithoutCorporateSnsLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    activityLogs?: CorporateActivityLogUpdateManyWithoutTenantNestedInput
    subscription?: SubscriptionUpdateOneWithoutCorporateTenantNestedInput
    admin?: UserUpdateOneRequiredWithoutAdminOfTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
  }

  export type CorporateTenantUncheckedUpdateWithoutCorporateSnsLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: StringFieldUpdateOperationsInput | string
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutTenantNestedInput
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CorporateTenantCreateWithoutActivityLogsInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    subscription?: SubscriptionCreateNestedOneWithoutCorporateTenantInput
    admin: UserCreateNestedOneWithoutAdminOfTenantInput
    users?: UserCreateNestedManyWithoutTenantInput
    departments?: DepartmentCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantUncheckedCreateWithoutActivityLogsInput = {
    id?: string
    name: string
    logoUrl?: string | null
    logoWidth?: number | null
    logoHeight?: number | null
    primaryColor?: string | null
    secondaryColor?: string | null
    headerText?: string | null
    textColor?: string | null
    customDomain?: string | null
    maxUsers: number
    createdAt?: Date | string
    updatedAt?: Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: string | null
    billingContact?: string | null
    accountStatus?: string
    dataRetentionDays?: number
    subscriptionId?: string | null
    adminId: string
    users?: UserUncheckedCreateNestedManyWithoutTenantInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutTenantInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedCreateNestedManyWithoutTenantInput
  }

  export type CorporateTenantCreateOrConnectWithoutActivityLogsInput = {
    where: CorporateTenantWhereUniqueInput
    create: XOR<CorporateTenantCreateWithoutActivityLogsInput, CorporateTenantUncheckedCreateWithoutActivityLogsInput>
  }

  export type UserCreateWithoutActivityLogsInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkCreateNestedManyWithoutUserInput
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordCreateNestedManyWithoutUserInput
    department?: DepartmentCreateNestedOneWithoutUsersInput
    tenant?: CorporateTenantCreateNestedOneWithoutUsersInput
    adminOfTenant?: CorporateTenantCreateNestedOneWithoutAdminInput
    contacts?: ContactCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivityLogsInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customLinks?: CustomLinkUncheckedCreateNestedManyWithoutUserInput
    snsLinks?: SnsLinkUncheckedCreateNestedManyWithoutUserInput
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    billingHistory?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    adminOfTenant?: CorporateTenantUncheckedCreateNestedOneWithoutAdminInput
    contacts?: ContactUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivityLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
  }

  export type CorporateTenantUpsertWithoutActivityLogsInput = {
    update: XOR<CorporateTenantUpdateWithoutActivityLogsInput, CorporateTenantUncheckedUpdateWithoutActivityLogsInput>
    create: XOR<CorporateTenantCreateWithoutActivityLogsInput, CorporateTenantUncheckedCreateWithoutActivityLogsInput>
    where?: CorporateTenantWhereInput
  }

  export type CorporateTenantUpdateToOneWithWhereWithoutActivityLogsInput = {
    where?: CorporateTenantWhereInput
    data: XOR<CorporateTenantUpdateWithoutActivityLogsInput, CorporateTenantUncheckedUpdateWithoutActivityLogsInput>
  }

  export type CorporateTenantUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    subscription?: SubscriptionUpdateOneWithoutCorporateTenantNestedInput
    admin?: UserUpdateOneRequiredWithoutAdminOfTenantNestedInput
    users?: UserUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUpdateManyWithoutTenantNestedInput
  }

  export type CorporateTenantUncheckedUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    logoWidth?: NullableIntFieldUpdateOperationsInput | number | null
    logoHeight?: NullableIntFieldUpdateOperationsInput | number | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    headerText?: NullableStringFieldUpdateOperationsInput | string | null
    textColor?: NullableStringFieldUpdateOperationsInput | string | null
    customDomain?: NullableStringFieldUpdateOperationsInput | string | null
    maxUsers?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    securitySettings?: NullableJsonNullValueInput | InputJsonValue
    notificationSettings?: NullableJsonNullValueInput | InputJsonValue
    billingAddress?: NullableJsonNullValueInput | InputJsonValue
    billingEmail?: NullableStringFieldUpdateOperationsInput | string | null
    billingContact?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: StringFieldUpdateOperationsInput | string
    dataRetentionDays?: IntFieldUpdateOperationsInput | number
    subscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    adminId?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutTenantNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutTenantNestedInput
    corporateSnsLinks?: CorporateSnsLinkUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type UserUpsertWithoutActivityLogsInput = {
    update: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivityLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type UserUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PasswordResetTokenCreateManyUserInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type CorporateActivityLogCreateManyUserInput = {
    id?: string
    tenantId: string
    action: string
    entityType: string
    entityId?: string | null
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId?: string | null
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomLinkCreateManyUserInput = {
    id?: string
    name: string
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SnsLinkCreateManyUserInput = {
    id?: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingRecordCreateManyUserInput = {
    id?: string
    invoiceId?: string | null
    amount: number
    status: string
    description?: string | null
    paidAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContactCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    email: string
    companyName?: string | null
    type: string
    subject: string
    message: string
    status?: string
    notes?: string | null
    assignedTo?: string | null
  }

  export type PasswordResetTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateActivityLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: CorporateTenantUpdateOneRequiredWithoutActivityLogsNestedInput
  }

  export type CorporateActivityLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateActivityLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomLinkUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomLinkUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomLinkUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SnsLinkUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SnsLinkUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SnsLinkUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    invoiceId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CorporateActivityLogCreateManyTenantInput = {
    id?: string
    userId?: string | null
    action: string
    entityType: string
    entityId?: string | null
    description: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UserCreateManyTenantInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    departmentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentCreateManyTenantInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CorporateSnsLinkCreateManyTenantInput = {
    id?: string
    platform: string
    username?: string | null
    url: string
    displayOrder: number
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CorporateActivityLogUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutActivityLogsNestedInput
  }

  export type CorporateActivityLogUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateActivityLogUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateSnsLinkUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateSnsLinkUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateSnsLinkUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyDepartmentInput = {
    id?: string
    email: string
    name?: string | null
    nameEn?: string | null
    password?: string | null
    image?: string | null
    bio?: string | null
    mainColor?: string
    snsIconColor?: string | null
    bioBackgroundColor?: string | null
    bioTextColor?: string | null
    phone?: string | null
    company?: string | null
    companyUrl?: string | null
    companyLabel?: string | null
    emailVerified?: Date | string | null
    stripeCustomerId?: string | null
    trialEndsAt?: Date | string | null
    subscriptionStatus?: string | null
    corporateRole?: string | null
    position?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUpdateManyWithoutUserNestedInput
    tenant?: CorporateTenantUpdateOneWithoutUsersNestedInput
    adminOfTenant?: CorporateTenantUpdateOneWithoutAdminNestedInput
    contacts?: ContactUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetTokens?: PasswordResetTokenUncheckedUpdateManyWithoutUserNestedInput
    activityLogs?: CorporateActivityLogUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customLinks?: CustomLinkUncheckedUpdateManyWithoutUserNestedInput
    snsLinks?: SnsLinkUncheckedUpdateManyWithoutUserNestedInput
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    billingHistory?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    adminOfTenant?: CorporateTenantUncheckedUpdateOneWithoutAdminNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    nameEn?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    mainColor?: StringFieldUpdateOperationsInput | string
    snsIconColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioBackgroundColor?: NullableStringFieldUpdateOperationsInput | string | null
    bioTextColor?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    companyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    companyLabel?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    subscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    corporateRole?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}